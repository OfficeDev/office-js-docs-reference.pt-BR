### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      Intervalo representa um conjunto de uma ou mais células contíguas, como uma célula, uma linha, uma coluna, um bloco de células, etc. Para saber mais sobre como os intervalos são usados em toda a API, leia [trabalhar com intervalos usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) e [trabalhe com intervalos usando a API JavaScript do Excel (avançado)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!-- -->.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#autoFill:member(2)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#copyFrom:member(2)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getCellProperties:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnProperties:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowProperties:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(2)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#moveTo:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#setCellProperties:member(1)'
      - 'excel!Excel.Range#setColumnProperties:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#setRowProperties:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      Representa a referência do intervalo no estilo A1. O valor de endereço conterá a referência de planilha (por exemplo, "Planilha1! A1: B4 "). Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      Representa a referência de intervalo para o intervalo especificado no idioma do usuário. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      Preenche o intervalo do intervalo atual com o intervalo de destino especificado usando a lógica de preenchimento automático especificada. O intervalo de destino pode ser nulo, ou pode estender a fonte horizontal ou verticalmente. Não há suporte para intervalos não contíguos.

      Para obter mais informações, ler preenchimento [automático e preenchimento relâmpago](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.

      \[[Conjunto de APIs: ExcelApi 1,9, ExcelApi Preview for `destinationRange` NULL](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-auto-fill.yaml
          await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          });
          ```
      parameters:
        - id: destinationRange
          description: 'O intervalo de destino para preenchimento automático. Se o intervalo de destino for nulo, os dados serão preenchidos com base nas células ao redor (que é o comportamento ao clicar duas vezes na alça de preenchimento do intervalo da interface do usuário).'
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: 'O tipo de preenchimento automático. Especifica como o intervalo de destino deve ser preenchido, com base no conteúdo do intervalo atual. O padrão é "FillDefault".'
          type:
            - 'excel!Excel.AutoFillType:enum'
  - uid: 'excel!Excel.Range#autoFill:member(2)'
    summary: |-
      Preenche o intervalo do intervalo atual com o intervalo de destino especificado usando a lógica de preenchimento automático especificada. O intervalo de destino pode ser nulo, ou pode estender a fonte horizontal ou verticalmente. Não há suporte para intervalos não contíguos.

      Para obter mais informações, ler preenchimento [automático e preenchimento relâmpago](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.

      \[[Conjunto de APIs: ExcelApi 1,9, ExcelApi Preview for `destinationRange` NULL](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange?: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: 'O intervalo de destino para preenchimento automático. Se o intervalo de destino for nulo, os dados serão preenchidos com base nas células ao redor (que é o comportamento ao clicar duas vezes na alça de preenchimento do intervalo da interface do usuário).'
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeString
          description: 'O tipo de preenchimento automático. Especifica como o intervalo de destino deve ser preenchido, com base no conteúdo do intervalo atual. O padrão é "FillDefault".'
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: |-
      Calcula um intervalo de células em uma planilha.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      Número de células no intervalo. Essa API retornará -1 se a contagem de células exceder 2^31-1 (2.147.483.647). Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      Limpe valores de intervalo, formatação, preenchimento, bordas, etc.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: Opcional. Determina o tipo de ação clara. Consulte Excel. ClearApplyTo para obter detalhes.
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      Limpe valores de intervalo, formatação, preenchimento, bordas, etc.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: Opcional. Determina o tipo de ação clara. Consulte Excel. ClearApplyTo para obter detalhes.
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      Representa o número total de colunas no intervalo. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: |-
      Representa se todas as colunas do intervalo atual estão ocultas.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      Representa o número de colunas da primeira célula no intervalo. Indexados com zero. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: |-
      Conjunto de ConditionalFormats que interseccionam o intervalo. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.Range#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: |-
      Converte o intervalo de células com tipos de dados em texto.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: |-
      Converte as células de intervalo em um tipo de dados vinculado na planilha.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: A ID de serviço que será usada para consultar os dados.
          type:
            - number
        - id: languageCulture
          description: Cultura de idioma para consultar o serviço.
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: |-
      Copia a formatação ou dados da célula do intervalo de origem ou de RangeAreas para o intervalo atual. O intervalo de destino pode ser um tamanho diferente do intervalo de origem ou RangeAreas. O destino será expandido automaticamente se for menor do que a origem.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-copyfrom.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              // Place a label in front of the copied data.
              sheet.getRange("F2").values = [["Copied Formula"]];

              // Copy a range preserving the formulas.
              // Note: non-formula values are copied over as is.
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: 'O intervalo de origem ou RangeAreas a ser copiado. Quando o RangeAreas de origem tem vários intervalos, seu formulário deve poder ser criado removendo linhas ou colunas completas de um intervalo retangular.'
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: O tipo de dados da célula ou formatação a ser copiada. O padrão é "All".
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: True se para ignorar células em branco no intervalo de origem. O padrão é false.
          type:
            - boolean
        - id: transpose
          description: True se para transpor as células no intervalo de destino. O padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#copyFrom:member(2)'
    summary: |-
      Copia a formatação ou dados da célula do intervalo de origem ou de RangeAreas para o intervalo atual. O intervalo de destino pode ser um tamanho diferente do intervalo de origem ou RangeAreas. O destino será expandido automaticamente se for menor do que a origem.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 'O intervalo de origem ou RangeAreas a ser copiado. Quando o RangeAreas de origem tem vários intervalos, seu formulário deve poder ser criado removendo linhas ou colunas completas de um intervalo retangular.'
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: copyTypeString
          description: O tipo de dados da célula ou formatação a ser copiada. O padrão é "All".
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: True se para ignorar células em branco no intervalo de origem. O padrão é false.
          type:
            - boolean
        - id: transpose
          description: True se para transpor as células no intervalo de destino. O padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: |-
      Retorna um objeto de validação de dados.

      \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      Exclui as células associadas ao intervalo.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: Especifica como deslocar as células. Consulte Excel. DeleteShiftDirection para obter detalhes.
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      Exclui as células associadas ao intervalo.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: Especifica como deslocar as células. Consulte Excel. DeleteShiftDirection para obter detalhes.
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: |-
      Localiza certa cadeia de caracteres com base em critérios especificados. Se o intervalo atual for maior que uma única célula, a pesquisa será limitada a esse intervalo, caso contrário, a pesquisa cobrirá toda a planilha que começa após essa célula.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          O objeto Range que representa a primeira célula que contém um valor que corresponde ao texto e aos critérios da pesquisa.

          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-find.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: A cadeia de caracteres a ser localizada.
          type:
            - string
        - id: criteria
          description: 'Critérios de pesquisa adicionais, incluindo a direção da pesquisa e se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: |-
      Localiza certa cadeia de caracteres com base em critérios especificados. Se o intervalo atual for maior que uma única célula, a pesquisa será limitada a esse intervalo, caso contrário, a pesquisa cobrirá toda a planilha que começa após essa célula. Se não houver nenhuma correspondência, esta função retornará um objeto NULL.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          O intervalo que corresponde aos critérios de pesquisa.

          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-find.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: A cadeia de caracteres a ser localizada.
          type:
            - string
        - id: criteria
          description: 'Critérios de pesquisa adicionais, incluindo a direção da pesquisa e se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: |-
      Faz o preenchimento relâmpago no intervalo atual. O preenchimento relâmpago preenche automaticamente dados quando detecta um padrão. Portanto, o intervalo deve ser de coluna única e ter dados em torno para encontrar o padrão.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      Retorna um objeto de formato que encapsula a fonte, o preenchimento, as bordas, o alinhamento e outras propriedades do intervalo. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      Representa a fórmula em notação A1.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      Representa a fórmula em notação A1, na formatação de número da localidade e no idioma do usuário. Por exemplo, a fórmula "=SUM(A1, 1.5)" em inglês seria "=SOMA(A1; 1,5)" em português.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: |-
      Representa a fórmula em notação no estilo L1C1.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: |-
      Obtém um objeto Range com a mesma célula superior esquerda do objeto Range atual, mas com os números especificados de linhas e colunas.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: O número de linhas do novo tamanho de intervalo.
          type:
            - number
        - id: numColumns
          description: O número de colunas do novo tamanho de intervalo.
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      Obtém o menor objeto Range que engloba os intervalos determinados. Por exemplo, o GetBoundingRect de "B2:C5" e "D10:E15" é "B2:E15".

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: O nome ou endereço do intervalo ou o objeto Range.
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna. A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha. A localização da célula retornada está relacionada à célula superior esquerda do intervalo.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: O número da linha da célula a ser recuperada. Indexados com zero.
          type:
            - number
        - id: column
          description: O número da coluna da célula a ser recuperada. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.Range#getCellProperties:member(1)'
    summary: |-
      Retorna uma matriz 2D encapsulando os dados de fonte, preenchimento, bordas, alinhamento e outras propriedades de cada célula.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel!Excel.Range#getCellProperties~0:complex'
        description: |-
          Uma matriz 2D em que cada item representa as propriedades solicitadas da célula correspondente.

          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: Um objeto que representa quais propriedades de célula serão carregadas.
          type:
            - 'excel!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      Obtém uma coluna incluída no intervalo.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: O número da coluna do intervalo a ser recuperado. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnProperties:member(1)'
    summary: |-
      Retorna uma única matriz dimensional encapsulando os dados de fonte, preenchimento, bordas, alinhamento e outras propriedades de cada coluna. Para propriedades que não são consistentes nas células de uma determinada coluna, será retornado null.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getColumnProperties~0:complex'
        description: Uma matriz em que cada item representa as propriedades solicitadas da coluna correspondente.
      parameters:
        - id: columnPropertiesLoadOptions
          description: Um objeto que representa as propriedades de coluna a serem carregadas.
          type:
            - 'excel!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: |-
      Obtém um determinado número de colunas à direita do objeto Range atual.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 'Opcional. O número de colunas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: |-
      Obtém um determinado número de colunas à esquerda do objeto Range atual.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 'Opcional. O número de colunas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      Obtém um objeto que representa a coluna inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `getEntireColumn` é um intervalo que representa as colunas "B:E").

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      Obtém um objeto que representa a linha inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `GetEntireRow` é um intervalo que representa as linhas "4:11").

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: |-
      Renderiza o intervalo como uma imagem png codificada em base64.

      **Importante**: esta API não é suportada atualmente no Excel para Mac. Visite \[OfficeDev/Office-js problema \#235\](https://github.com/OfficeDev/office-js/issues/235) para o status atual.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: |-
      Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados. Se nenhuma interseção for encontrada, retornará um objeto null.

      \[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-relationships.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      Obtém a última célula do intervalo. Por exemplo, a última célula de "B2:D5" é "D5".

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      Obtém a última coluna do intervalo. Por exemplo, a última coluna de "B2:D5" é "D2:D5".

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      Obtém a última linha do intervalo. Por exemplo, a última linha de "B2:D5" é "B5:D5".

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      Obtém um objeto que representa um intervalo deslocado do intervalo especificado. A dimensão do intervalo retornado corresponde a esse intervalo. Se o intervalo resultante for imposto para fora dos limites da grade da planilha, o sistema gerará um erro.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:J5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: 'O número de linhas (positivo, negativo ou 0) com base no qual o intervalo deve ser deslocado. Os valores positivos são deslocados para baixo e os negativos, para cima.'
          type:
            - number
        - id: columnOffset
          description: 'O número de colunas (positivo, negativo ou 0) com base no qual o intervalo deve ser deslocado. Os valores positivos são deslocados para a direita e os negativos, para a esquerda.'
          type:
            - number
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: |-
      Obtém um objeto Range semelhante ao objeto Range atual, mas com seu canto inferior direito expandido (ou recolhido) por um determinado número de linhas e colunas.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: 'O número de linhas pelo qual expandir o canto inferior direito, referente ao intervalo atual. Use um número positivo para expandir o intervalo ou um número negativo para diminuí-lo.'
          type:
            - number
        - id: deltaColumns
          description: 'O número de colunas pelas quais expandir o canto inferior direito, em relação ao intervalo atual. Use um número positivo para expandir o intervalo ou um número negativo para diminuí-lo.'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      Obtém uma linha contida no intervalo.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: O número da linha do intervalo a ser recuperado. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.Range#getRowProperties:member(1)'
    summary: |-
      Retorna uma única matriz dimensional encapsulando os dados de fonte, preenchimento, bordas, alinhamento e outras propriedades de cada célula. Para propriedades que não são consistentes nas células de uma determinada linha, será retornado null.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getRowProperties~0:complex'
        description: Uma matriz em que cada item representa as propriedades solicitadas da linha correspondente.
      parameters:
        - id: rowPropertiesLoadOptions
          description: Um objeto que representa quais propriedades de linha carregar.
          type:
            - 'excel!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: |-
      Obtém um determinado número de linhas acima do objeto Range atual.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 'Opcional. O número de linhas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: |-
      Obtém um determinado número de linhas abaixo do objeto Range atual.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 'Opcional. O número de linhas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: |-
      Obtém o objeto RangeAreas, compreendendo um ou mais intervalos retangulares, que representa todas as células que correspondem ao tipo e valor especificado. Se nenhuma célula especial for encontrada, um erro ItemNotFound será lançado.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: O tipo de células a serem incluídas.
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCells:member(2)'
    summary: |-
      Obtém o objeto RangeAreas, compreendendo um ou mais intervalos retangulares, que representa todas as células que correspondem ao tipo e valor especificado. Se nenhuma célula especial for encontrada, um erro ItemNotFound será lançado.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: O tipo de células a serem incluídas.
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: |-
      Obtém o objeto RangeAreas, compreendendo um ou mais intervalos, que representa todas as células que correspondem ao tipo e valor especificado. Se nenhuma célula especial for encontrada, um objeto NULL será retornado.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: O tipo de células a serem incluídas.
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: |-
      Obtém o objeto RangeAreas, compreendendo um ou mais intervalos, que representa todas as células que correspondem ao tipo e valor especificado. Se nenhuma célula especial for encontrada, um objeto NULL será retornado.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: O tipo de células a serem incluídas.
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: |-
      Retorna um objeto Range que representa a região circundante da célula superior esquerda nesse intervalo. Uma região ao redor é um intervalo limitado por qualquer combinação de linhas e colunas em branco em relação a esse intervalo.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: |-
      Obtém uma coleção de tabelas com escopo que se sobrepõe ao intervalo.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Se true, retornará somente as tabelas que estão totalmente contidas dentro dos limites do intervalo. O valor padrão é falso.'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: |-
      Retorna o intervalo usado do objeto range determinado. Se não houver nenhuma célula usada dentro do intervalo, essa função gerará um erro ItemNotFound.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-relationships.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: 'Considera apenas as células com valores como células usadas. \[Conjunto de APIs: ExcelApi 1,2\]'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: |-
      Retorna o intervalo usado do objeto range determinado. Se não houver nenhuma célula usada no intervalo, esta função retornará um objeto null.

      \[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/used-range.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: Considera apenas as células com valores como células usadas.
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: |-
      Representa as linhas visíveis do intervalo atual.

      \[[Conjunto de APIs: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:class'
        description: ''
  - uid: 'excel!Excel.Range#hidden:member'
    summary: |-
      Representa se todas as células do intervalo atual estão ocultas. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: |-
      Representa o hiperlink do intervalo atual.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      Insere uma célula ou um intervalo de células na planilha, no lugar desse intervalo, e desloca as outras células para liberar espaço. Retorna um novo objeto Range no espaço em branco atual.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: Especifica como deslocar as células. Consulte Excel. InsertShiftDirection para obter detalhes.
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      Insere uma célula ou um intervalo de células na planilha, no lugar desse intervalo, e desloca as outras células para liberar espaço. Retorna um novo objeto Range no espaço em branco atual.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: Especifica como deslocar as células. Consulte Excel. InsertShiftDirection para obter detalhes.
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: |-
      Representa se o intervalo atual está em uma coluna inteira. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: |-
      Representa se o intervalo atual está em uma linha inteira. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: |-
      Representa o estado do tipo de dados de cada célula. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: Fornece opções para as propriedades do objeto a ser carregado.
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: |-
      Mescla as células do intervalo em uma região da planilha.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: Opcional. Defina true para mesclar células em todas as linhas do intervalo especificado como células mescladas separadamente. O valor padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#moveTo:member(1)'
    summary: |-
      Move valores de célula, formatação e fórmulas do intervalo atual para o intervalo de destino, substituindo as informações antigas nessas células. O intervalo de destino será expandido automaticamente se for menor do que o intervalo atual. As células no intervalo de destino que estão fora da área do intervalo original não são alteradas.

      \[[Conjunto de APIs: ExcelApiOnline 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-copyfrom.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              // Place a label in front of the moved data.
              sheet.getRange("F12").values = [["Moved Range:"]];

              // Move the range from A1:E1 to G12:K12.
              sheet.getRange("A1:E1").moveTo("G12");
              await context.sync();
          });
          ```
      parameters:
        - id: destinationRange
          description: destinationRange especifica o intervalo no qual as informações neste intervalo serão movidas.
          type:
            - 'excel!Excel.Range#moveTo~0:complex'
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      Representa o código de formato de número do Excel para o intervalo especificado.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: |-
      Representa o código de formato de número do Excel para o intervalo determinado, com base nas configurações de idioma do usuário. O Excel não realiza qualquer coerção de idioma ou formatação ao obter ou definir a `numberFormatLocal` propriedade. Qualquer texto retornado usa as cadeias de caracteres formatadas localmente com base no idioma especificado nas configurações do sistema.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: |-
      Remove valores duplicados do intervalo especificado pelas colunas.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:class'
        description: |-
          O objeto resultante que contém o número de linhas removidas e o número de linhas exclusivas restantes.

          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-remove-duplicates.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: As colunas dentro do intervalo que podem conter duplicatas. É necessário especificar pelo menos uma coluna. Indexados com zero.
          type:
            - 'number[]'
        - id: includesHeader
          description: True se os dados de entrada contêm cabeçalho. O padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: |-
      Localiza e substitui a cadeia de caracteres fornecida com base nos critérios especificados no intervalo atual.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: O número de substituições realizadas.
      parameters:
        - id: text
          description: Cadeia de caracteres a ser localizada.
          type:
            - string
        - id: replacement
          description: Cadeia de caracteres para substituir o original por.
          type:
            - string
        - id: criteria
          description: Critérios adicionais de substituição.
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      Retorna o número total de linhas no intervalo. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: |-
      Representa se todas as linhas do intervalo atual estão ocultas.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      Representa o número de linhas da primeira célula no intervalo. Indexados com zero. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      Seleciona o intervalo especificado na interface do usuário do Excel.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
    remarks: |-
      Este método tem a seguinte assinatura adicional:

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a>Exemplos

      ```typescript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: 'Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#setCellProperties:member(1)'
    summary: |-
      Atualiza o intervalo com base em uma matriz 2D de propriedades da célula, encapsulando itens como fonte, preenchimento, bordas, alinhamento e assim por diante.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Built-in style names are listed in the `BuiltInStyle` enum.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: Uma matriz 2D que representa as propriedades a serem definidas em cada célula.
          type:
            - 'excel!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel!Excel.Range#setColumnProperties:member(1)'
    summary: |-
      Atualiza o intervalo com base em uma única matriz dimensional de propriedades da coluna, encapsulando itens como fonte, preenchimento, bordas, alinhamento e assim por diante.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: Uma matriz que representa as propriedades a serem definidas em cada coluna.
          type:
            - 'excel!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: |-
      Define um intervalo a ser recalculado quando o próximo recálculo ocorrer.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setRowProperties:member(1)'
    summary: |-
      Atualiza o intervalo com base em uma única matriz dimensional de propriedades da linha, encapsulando itens como fonte, preenchimento, bordas, alinhamento e assim por diante.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: Uma matriz que representa as propriedades a serem definidas em cada linha.
          type:
            - 'excel!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: |-
      Exibe o cartão para uma célula ativa se ele tiver um conteúdo valioso.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#sort:member'
    summary: |-
      Representa a classificação de intervalo do intervalo atual. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-column-and-row-sort.yaml
          async function sortTopToBottom(criteria: string) {
              await Excel.run(async (context) => {
                  const sheet = context.workbook.worksheets.getActiveWorksheet();
                  const range = sheet.getRange("A1:E5");

                  // Find the column header that provides the sort criteria.
                  const header = range.find(criteria, {});
                  header.load("columnIndex");
                  await context.sync();

                  range.sort.apply(
                      [
                          {
                              key: header.columnIndex,
                              sortOn: Excel.SortOn.value
                          }
                      ],
                      false /*matchCase*/,
                      true /*hasHeaders*/,
                      Excel.SortOrientation.rows
                  );
                  await context.sync();
              });
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: |-
      Representa o estilo de intervalo atual. Se os estilos das células forem inconsistentes, NULL será retornado. Para estilos personalizados, o nome do estilo será retornado. Para os estilos internos, uma cadeia de caracteres que representa um valor na enumeração BuiltInstyle será retornada.

      \[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      Valores de texto do intervalo especificado. O valor de texto não depende da largura da célula. A \# substituição de sinal que acontece na IU do Excel não afetará o valor de texto RETORNADO pela API. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. Range original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.RangeData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: 'Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação para`context.trackedObjects.add(thisObject)`<!-- -->. Se você estiver usando esse objeto nas `.sync` chamadas e fora da execução seqüencial de um lote ". Run" e obter um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, você precisa ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: |-
      Desfaz a mesclagem das células do intervalo em células separadas.

      \[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: 'Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é abreviada para`context.trackedObjects.remove(thisObject)`<!-- -->. Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisará chamar `context.sync()` antes que o lançamento da memória entre em vigor.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      Representa os valores brutos do intervalo especificado. Os dados retornados podem ser dos tipos: cadeia de caracteres, número ou booliano. Células que contêm um erro retornarão a cadeia de caracteres de erro.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      Representa o tipo de dados de cada célula. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      A planilha que contém o intervalo atual. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getCellProperties~0:complex'
    name: 'OfficeExtension.ClientResult<CellProperties[][]>'
    fullName: 'OfficeExtension.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getColumnProperties~0:complex'
    name: 'OfficeExtension.ClientResult<ColumnProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getRowProperties~0:complex'
    name: 'OfficeExtension.ClientResult<RowProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.Range#moveTo~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet