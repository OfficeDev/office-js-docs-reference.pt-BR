### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormatCollection
    summary: |-
      <span data-ttu-id="aa831-101">Representa uma coleção de todos os formatos condicionais que se sobrepõem ao intervalo.</span><span class="sxs-lookup"><span data-stu-id="aa831-101">Represents a collection of all the conditional formats that are overlap the range.</span></span>

      <span data-ttu-id="aa831-102">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.ConditionalFormatCollection.add
      - excel.Excel.ConditionalFormatCollection.add_1
      - excel.Excel.ConditionalFormatCollection.clearAll
      - excel.Excel.ConditionalFormatCollection.context
      - excel.Excel.ConditionalFormatCollection.getCount
      - excel.Excel.ConditionalFormatCollection.getItem
      - excel.Excel.ConditionalFormatCollection.getItemAt
      - excel.Excel.ConditionalFormatCollection.items
      - excel.Excel.ConditionalFormatCollection.load
      - excel.Excel.ConditionalFormatCollection.load_1
      - excel.Excel.ConditionalFormatCollection.load_2
      - excel.Excel.ConditionalFormatCollection.toJSON
  - uid: excel.Excel.ConditionalFormatCollection.add
    summary: |-
      <span data-ttu-id="aa831-103">Adiciona um novo formato condicional à coleção na prioridade First/Top.</span><span class="sxs-lookup"><span data-stu-id="aa831-103">Adds a new conditional format to the collection at the first/top priority.</span></span>

      <span data-ttu-id="aa831-104">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="aa831-105">Exemplos</span><span class="sxs-lookup"><span data-stu-id="aa831-105">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = "YellowThreeArrows";
              return ctx.sync().then(function () {
                  console.log("Added new yellow three arrow icon set.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
      parameters:
        - id: type
          description: <span data-ttu-id="aa831-106">O tipo de formato condicional que está sendo adicionado.</span><span class="sxs-lookup"><span data-stu-id="aa831-106">The type of conditional format being added.</span></span> <span data-ttu-id="aa831-107">Consulte Excel. Valorconditionalformattype para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="aa831-107">See Excel.ConditionalFormatType for details.</span></span>
          type:
            - excel.Excel.ConditionalFormatType
  - uid: excel.Excel.ConditionalFormatCollection.add_1
    summary: |-
      <span data-ttu-id="aa831-108">Adiciona um novo formato condicional à coleção na prioridade First/Top.</span><span class="sxs-lookup"><span data-stu-id="aa831-108">Adds a new conditional format to the collection at the first/top priority.</span></span>

      <span data-ttu-id="aa831-109">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(typeString)
    fullName: add(typeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: typeString
          description: <span data-ttu-id="aa831-110">O tipo de formato condicional que está sendo adicionado.</span><span class="sxs-lookup"><span data-stu-id="aa831-110">The type of conditional format being added.</span></span> <span data-ttu-id="aa831-111">Consulte Excel. Valorconditionalformattype para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="aa831-111">See Excel.ConditionalFormatType for details.</span></span>
          type:
            - '"Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
  - uid: excel.Excel.ConditionalFormatCollection.clearAll
    summary: |-
      <span data-ttu-id="aa831-112">Limpa todos os formatos condicionais ativos no intervalo atual especificado.</span><span class="sxs-lookup"><span data-stu-id="aa831-112">Clears all conditional formats active on the current specified range.</span></span>

      <span data-ttu-id="aa831-113">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="aa831-114">Exemplos</span><span class="sxs-lookup"><span data-stu-id="aa831-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.clearAll();
              return ctx.sync().then(function () {
                  console.log("Cleared all conditional formats from this range.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          });
          ```
  - uid: excel.Excel.ConditionalFormatCollection.context
    summary: <span data-ttu-id="aa831-115">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="aa831-115">The request context associated with the object.</span></span> <span data-ttu-id="aa831-116">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="aa831-116">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.ConditionalFormatCollection.getCount
    summary: |-
      <span data-ttu-id="aa831-117">Retorna o número de formatos condicionais na pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="aa831-117">Returns the number of conditional formats in the workbook.</span></span> <span data-ttu-id="aa831-118">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="aa831-118">Read-only.</span></span>

      <span data-ttu-id="aa831-119">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="aa831-120">Exemplos</span><span class="sxs-lookup"><span data-stu-id="aa831-120">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
              var cfCount = range.conditionalFormats.getCount(); 

              return ctx.sync().then(function () {
                  console.log("Count: " + cfCount.value);
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.ConditionalFormatCollection.getItem
    summary: |-
      <span data-ttu-id="aa831-121">Retorna um formato condicional para o ID fornecido.</span><span class="sxs-lookup"><span data-stu-id="aa831-121">Returns a conditional format for the given ID.</span></span>

      <span data-ttu-id="aa831-122">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-122">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: |-
          <span data-ttu-id="aa831-123">Objeto de formato condicional.</span><span class="sxs-lookup"><span data-stu-id="aa831-123">Conditional Format object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="aa831-124">Exemplos</span><span class="sxs-lookup"><span data-stu-id="aa831-124">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="aa831-125">A ID da formatação condicional.</span><span class="sxs-lookup"><span data-stu-id="aa831-125">The id of the conditional format.</span></span>
          type:
            - string
  - uid: excel.Excel.ConditionalFormatCollection.getItemAt
    summary: |-
      <span data-ttu-id="aa831-126">Retorna um formato condicional no índice fornecido.</span><span class="sxs-lookup"><span data-stu-id="aa831-126">Returns a conditional format at the given index.</span></span>

      <span data-ttu-id="aa831-127">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="aa831-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="aa831-128">Exemplos</span><span class="sxs-lookup"><span data-stu-id="aa831-128">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="aa831-129">Índice dos formatos condicionais a serem recuperados.</span><span class="sxs-lookup"><span data-stu-id="aa831-129">Index of the conditional formats to be retrieved.</span></span>
          type:
            - number
  - uid: excel.Excel.ConditionalFormatCollection.items
    summary: <span data-ttu-id="aa831-130">Obtém os itens filhos carregados nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="aa831-130">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type:
          - 'Excel.ConditionalFormat[]'
  - uid: excel.Excel.ConditionalFormatCollection.load
    summary: <span data-ttu-id="aa831-131">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="aa831-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="aa831-132">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="aa831-132">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="aa831-133">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="aa831-133">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="aa831-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="aa831-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="aa831-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="aa831-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="aa831-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="aa831-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types.</span></span> <span data-ttu-id="aa831-137">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="aa831-137">It is similar to the preceding signature.</span></span> <span data-ttu-id="aa831-138">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="aa831-138">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="aa831-139">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="aa831-139">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="aa831-140">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="aa831-140">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.ConditionalFormatCollection.load_1
    summary: <span data-ttu-id="aa831-141">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="aa831-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="aa831-142">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="aa831-142">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="aa831-143">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="aa831-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.ConditionalFormatCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.ConditionalFormatCollection.toJSON
    summary: '<span data-ttu-id="aa831-144">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="aa831-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="aa831-145">.</span><span class="sxs-lookup"><span data-stu-id="aa831-145"></span></span> <span data-ttu-id="aa831-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="aa831-146"></span></span><!-- --><span data-ttu-id="aa831-147">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.ConditionalFormatCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.ConditionalFormatCollectionData`</span><span class="sxs-lookup"><span data-stu-id="aa831-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`</span></span><!-- --><span data-ttu-id="aa831-148">) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.</span><span class="sxs-lookup"><span data-stu-id="aa831-148">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.ConditionalFormatCollectionData
        description: ''