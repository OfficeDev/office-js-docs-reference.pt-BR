### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Item:interface'
    summary: |-
      O namespace do item é usado para acessar a mensagem, solicitação de reunião ou compromisso atualmente selecionado. Você pode determinar o tipo do item usando a `itemType` propriedade.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restrito

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: Office.Item
    fullName: Office.Item
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Item#addHandlerAsync:member(1)'
      - 'outlook!Office.Item#addHandlerAsync:member(2)'
      - 'outlook!Office.Item#body:member'
      - 'outlook!Office.Item#itemType:member'
      - 'outlook!Office.Item#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.Item#notificationMessages:member'
      - 'outlook!Office.Item#removeHandlerAsync:member(1)'
      - 'outlook!Office.Item#removeHandlerAsync:member(2)'
      - 'outlook!Office.Item#seriesId:member'
  - uid: 'outlook!Office.Item#addHandlerAsync:member(1)'
    summary: |-
      Adiciona um manipulador de eventos a um evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, os tipos de eventos com suporte são`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, e`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve invocar o manipulador.
          type:
            - 'outlook!Office.Item#addHandlerAsync~0:complex'
        - id: handler
          description: 'A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade Type no parâmetro corresponderá ao parâmetro eventType passado para addHandlerAsync.'
          type:
            - any
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. asyncContext: os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro, asyncResult, que é um objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.Item#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.Item#addHandlerAsync:member(2)'
    summary: |-
      Adiciona um manipulador de eventos a um evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, os tipos de eventos com suporte são`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, e`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve invocar o manipulador.
          type:
            - 'outlook!Office.Item#addHandlerAsync~2:complex'
        - id: handler
          description: 'A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade Type no parâmetro corresponderá ao parâmetro eventType passado para addHandlerAsync.'
          type:
            - any
        - id: callback
          description: 'Opcional. Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro, asyncResult, que é um objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.Item#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.Item#body:member'
    summary: |-
      Obtém um objeto que fornece métodos para manipular o corpo de um item.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.Item#itemType:member'
    summary: |-
      Obtém o tipo de item que representa uma instância.

      A propriedade itemType retorna um dos valores de enumeração ItemType, indicando se a instância do objeto item é uma mensagem ou um compromisso.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.Item#itemType~0:complex'
  - uid: 'outlook!Office.Item#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Carrega de forma assíncrona as propriedades personalizadas para esse suplemento no item selecionado.

      Propriedades personalizadas são armazenadas como pares chave/valor de acordo com o aplicativo e o item. Esse método retorna um objeto CustomProperties no retorno de chamada, que fornece métodos para acessar as propriedades personalizadas específicas para o item atual e o suplemento atual. Propriedades personalizadas não são criptografadas no item, portanto não devem ser usadas como armazenamento seguro.

      As propriedades personalizadas são fornecidas como um objeto CustomProperties na propriedade asyncResult. Value. Esse objeto pode ser usado para obter, definir e remover as propriedades personalizadas do item e salvar as alterações na propriedade personalizada definida de volta no servidor.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.Item#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: Opcional. Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar na função de retorno de chamada. Esse objeto pode ser acessado pela propriedade asyncResult. asyncContext na função de retorno de chamada.
          type:
            - any
  - uid: 'outlook!Office.Item#notificationMessages:member'
    summary: |-
      Obtém as mensagens de notificação de um item.

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Get all notifications.
      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.Item#removeHandlerAsync:member(1)'
    summary: |-
      Remove um manipulador de eventos para um tipo de evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, os tipos de eventos com suporte são`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, e`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve revogar o manipulador.
          type:
            - 'outlook!Office.Item#removeHandlerAsync~0:complex'
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. asyncContext: os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro, asyncResult, que é um objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.Item#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.Item#removeHandlerAsync:member(2)'
    summary: |-
      Remove um manipulador de eventos para um tipo de evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, os tipos de eventos com suporte são`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, e`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve revogar o manipulador.
          type:
            - 'outlook!Office.Item#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Opcional. Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro, asyncResult, que é um objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.Item#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.Item#seriesId:member'
    summary: |-
      Obtém a ID da série à qual uma instância pertence.

      No Outlook na Web e clientes de desktop, a seriesid retorna a ID dos serviços Web do Exchange (EWS) do item pai (série) ao qual este item pertence. No entanto, no iOS e no Android, o seriesid retorna a ID REST do item pai.

      **Observação**: o identificador retornado pela propriedade seriesid é o mesmo que o identificador de item dos serviços Web do Exchange. A propriedade seriesid não é idêntica às IDs do Outlook usadas pela API REST do Outlook. Antes de fazer chamadas API REST usando esse valor, ela deverá ser convertida usando Office.context.mailbox.convertToRestId. Para obter mais detalhes, consulte [usar as APIs REST do Outlook a partir de um suplemento do Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api)<!-- -->.

      A propriedade seriesid retorna NULL para itens que não têm itens pai, como compromissos únicos, itens de série ou solicitações de reunião e retorna undefined para quaisquer outros itens que não sejam solicitações de reunião.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      // The seriesId property returns null for items that do
      // not have parent items (such as single appointments,
      // series items, or meeting requests) and returns
      // undefined for messages that are not meeting requests.
      var isSeriesInstance = (seriesId != null);
      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
references:
  - uid: 'outlook!Office.Item#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Item#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Item#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Item#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Item#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Item#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Item#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Item#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Item#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Item#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void