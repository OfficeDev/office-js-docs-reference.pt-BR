### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AppointmentCompose:interface'
    summary: |-
      O modo organizador de compromissos de [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Importante** : Este é um objeto interno do Outlook, não diretamente exposto por meio de interfaces existentes. Você deve tratá-lo como um modo de `Office.context.mailbox.item`<!-- -->. Consulte a página [modelo de objeto](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.2/office.context.mailbox.item) para obter mais informações.

      Interfaces pai:

      - [Compor](xref:outlook!Office.ItemCompose:interface)

      - [Compromisso](xref:outlook!Office.Appointment:interface)
    name: Office.AppointmentCompose
    fullName: Office.AppointmentCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Appointment:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#body:member'
      - 'outlook!Office.AppointmentCompose#end:member'
      - 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#itemType:member'
      - 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#location:member'
      - 'outlook!Office.AppointmentCompose#optionalAttendees:member'
      - 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#requiredAttendees:member'
      - 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#start:member'
      - 'outlook!Office.AppointmentCompose#subject:member'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      Adiciona um arquivo a uma mensagem ou um compromisso como um anexo.

      O método `addFileAttachmentAsync` carrega o arquivo no URI especificado e anexa-o ao item no formulário de composição.

      Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.

      **Importante** : em versões recentes do Outlook no Windows, foi introduzido um bug que anexa incorretamente um `Authorization: Bearer` cabeçalho a essa ação (seja usando essa API ou a interface do usuário do Outlook). Para contornar esse problema, você pode tentar usar a `addFileAttachmentFromBase64` API introduzida com o conjunto de requisitos 1,8.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadWriteItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      **Erros** :

      - `AttachmentSizeExceeded`<!-- -->: O anexo é maior do que o permitido.

      - `FileTypeNotSupported`<!-- -->: O anexo tem uma extensão que não é permitida.

      - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.

      #### <a name="examples"></a>Exemplos

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      var attachmentUrl = $("#attachmentUrl").val();
      Office.context.mailbox.item.addFileAttachmentAsync(
          attachmentUrl,
          getFileName(attachmentUrl),
          { "asyncContext" : { var1: 1, var2: true } },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: O URI que fornece o local do arquivo anexado à mensagem ou compromisso. O comprimento máximo é de 2048 caracteres.
          type:
            - string
        - id: attachmentName
          description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `isInline`<!-- -->: Se true, indica que o anexo será mostrado embutido no corpo da mensagem e não deverá ser exibido na lista de anexos.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao carregar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      Adiciona um item do Exchange, como uma mensagem, como anexo na mensagem ou no compromisso.

      O método `addItemAttachmentAsync` anexa o item com o identificador do Exchange especificado ao item no formulário de composição. Se você especificar um método de retorno de chamada, o método será chamado com um parâmetro, `asyncResult`<!-- -->, que contém o identificador de anexo ou um código que indica qualquer erro que ocorreu ao anexar o item. Você pode usar o parâmetro `options` para passar informações de estado ao método de retorno de chamada, se necessário.

      Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.

      Se o Suplemento do Office estiver em execução no Outlook na Web, o método `addItemAttachmentAsync` pode anexar itens que não sejam aquele que você está editando; no entanto, isso não tem suporte e não é recomendado.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadWriteItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      **Erros** :

      - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      var attachmentItemId = $("#attachmentItemId").val();
      Office.context.mailbox.item.addItemAttachmentAsync(
          attachmentItemId,
          "My attachment",
          { "asyncContext" : { var3: 3, var4: false } },
          function(result) { console.log(result); });
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: O identificador do Exchange do item a anexar. O comprimento máximo é de 100 caracteres.
          type:
            - any
        - id: attachmentName
          description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao adicionar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.'
          type:
            - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#body:member'
    summary: |-
      Obtém um objeto que fornece métodos para manipular o corpo de um item.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of an object that is passed as the result parameter to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.AppointmentCompose#end:member'
    summary: |-
      Obtém ou define a data e a hora em que o compromisso deve terminar.

      A `end` propriedade é um objeto [time](xref:outlook!Office.Time:interface) expresso como um valor de data e hora Coordinated Universal Time (UTC). Você pode usar o `convertToLocalClientTime` método para converter o `end` valor da propriedade na data e hora locais do cliente.

      Ao usar o método `Time.setAsync` para definir a hora de término, deve-se usar o método `convertToUtcClientTime` para converter a hora local no cliente para UTC para o servidor.

      **Importante** : no cliente Windows, você não pode usar essa propriedade para atualizar o final de uma recorrência.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example sets the end time of an appointment in compose mode by
      // using the `setAsync` method of the `Time` object.
      var endTime = new Date("3/14/2015");
      var options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };
      Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function.
              console.debug("End Time " + result.asyncContext.verb);
          }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml
      Office.context.mailbox.item.end.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment ends: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Get start date failed with message ${result.error.message}`);
          return;
        }

        var end = result.value; // Set end to current start date and time.
        end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
        Office.context.mailbox.item.end.setAsync(end, (result) => {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Set end date failed with message ${result.error.message}`);
            return;
          }
          console.log(`Successfully set end date and time to ${end}`);
        });
      });
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Time;'
      return:
        type:
          - 'outlook!Office.Time:interface'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)'
    summary: |-
      Retorna de forma assíncrona os dados selecionados do assunto ou do corpo de uma mensagem.

      Se não houver seleção, mas o cursor estiver no corpo ou no assunto, o método retorna uma cadeia de caracteres vazia para os dados selecionados. Se um campo que não seja o corpo ou o assunto estiver selecionado, o método retorna o erro `InvalidSelection`.

      Para acessar os dados selecionados do método de retorno de chamada, chame `asyncResult.value.data`<!-- -->. Para acessar a `source` propriedade que a seleção provém, chame `asyncResult.value.sourceProperty`<!-- -->, que será `body` ou `subject`<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Get selected data.
      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };

      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          console.log("Selected text in " + prop + ": " + text);
      }
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: Os dados selecionados como uma cadeia de caracteres com formato determinado por `coercionType`<!-- -->.
      parameters:
        - id: coercionType
          description: 'Solicita um formato para os dados. Se `Text`<!-- -->, o método retorna o texto sem formatação como uma cadeia de caracteres, removendo todas as marcas HTML presentes. Se `HTML`<!-- -->, o método retorna o texto selecionado, seja ele texto não criptografado ou HTML.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)'
    summary: |-
      Retorna de forma assíncrona os dados selecionados do assunto ou do corpo de uma mensagem.

      Se não houver seleção, mas o cursor estiver no corpo ou no assunto, o método retorna uma cadeia de caracteres vazia para os dados selecionados. Se um campo que não seja o corpo ou o assunto estiver selecionado, o método retorna o erro `InvalidSelection`.

      Para acessar os dados selecionados do método de retorno de chamada, chame `asyncResult.value.data`<!-- -->. Para acessar a `source` propriedade que a seleção provém, chame `asyncResult.value.sourceProperty`<!-- -->, que será `body` ou `subject`<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/get-selected-data.yaml
      Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;
          console.log("Selected text in " + prop + ": " + text);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: Os dados selecionados como uma cadeia de caracteres com formato determinado por `coercionType`<!-- -->.
      parameters:
        - id: coercionType
          description: 'Solicita um formato para os dados. Se `Text`<!-- -->, o método retorna o texto sem formatação como uma cadeia de caracteres, removendo todas as marcas HTML presentes. Se `HTML`<!-- -->, o método retorna o texto selecionado, seja ele texto não criptografado ou HTML.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: 'Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#itemType:member'
    summary: |-
      Obtém o tipo de item que representa uma instância.

      A propriedade `itemType` retorna um dos valores de enumeração `ItemType`, indicando se a instância do objeto `item` é uma mensagem ou um compromisso.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml
      console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.AppointmentCompose#itemType~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Carrega de forma assíncrona as propriedades personalizadas para esse suplemento no item selecionado.

      Propriedades personalizadas são armazenadas como pares chave/valor de acordo com o aplicativo e o item. Este método retorna um objeto `CustomProperties` no retorno de chamada, que oferece métodos para acessar as propriedades personalizadas específicas para o item atual e o suplemento atual. Propriedades personalizadas não são criptografadas no item, portanto não devem ser usadas como armazenamento seguro.

      As propriedades personalizadas são fornecidas como um objeto `CustomProperties` na propriedade `asyncResult.value`. Esse objeto pode ser usado para obter, definir e remover as propriedades personalizadas do item e salvar as alterações na propriedade personalizada definida de volta no servidor.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: Opcional. Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar na função de retorno de chamada. Esse objeto pode ser acessado pela propriedade `asyncResult.asyncContext` na função de retorno de chamada.
          type:
            - any
  - uid: 'outlook!Office.AppointmentCompose#location:member'
    summary: 'Obtém ou define o local de um compromisso. A `location` propriedade retorna um objeto [Location](xref:outlook!Office.Location:interface) que fornece métodos que são usados para obter e definir o local do compromisso.'
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var userContext = { value : 1 };
      Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);

      function callback(asyncResult) {
          var context = asyncResult.context;
          var location = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml
      Office.context.mailbox.item.location.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment location: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml
      var location = "my office";
      Office.context.mailbox.item.location.setAsync(location, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set location to ${location}`);
      });
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: Location;'
      return:
        type:
          - 'outlook!Office.Location:interface'
  - uid: 'outlook!Office.AppointmentCompose#optionalAttendees:member'
    summary: |-
      Fornece acesso aos participantes opcionais de um evento. O tipo de objeto e nível de acesso dependem do modo do item atual.

      A propriedade `optionalAttendees` retorna um objeto `Recipients` que fornece métodos para obter ou atualizar os participantes opcionais de uma reunião. No entanto, dependendo do cliente/plataforma (ou seja, Windows, Mac, etc.), os limites podem ser aplicados em quantos destinatários você pode obter ou atualizar. Consulte o objeto [Recipients](xref:outlook!Office.Recipients:interface) para obter mais detalhes.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.optionalAttendees.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfOptionalAttendeesRecipients = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml
      Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptOptionalAttendees = asyncResult.value;
          for (var i = 0; i < apptOptionalAttendees.length; i++) {
            console.log(
              "Optional attendees: " +
                apptOptionalAttendees[i].displayName +
                " (" +
                apptOptionalAttendees[i].emailAddress +
                ") - response: " +
                apptOptionalAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml
      var email = $("#emailOptional")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.optionalAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting optional attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
    summary: |-
      Remove um anexo de uma mensagem ou de um compromisso.

      O método `removeAttachmentAsync` remove o anexo com o identificador especificado do item. Como prática recomendada, deve-se usar o identificador do anexo para remover um anexo somente se o mesmo aplicativo de email tiver adicionado esse anexo na mesma sessão. No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão termina quando o usuário fecha o aplicativo, ou se o usuário começa a redigir um formulário embutido e, em seguida, abre o formulário para continuar em uma janela separada.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadWriteItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      **Erros** :

      - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      Office.context.mailbox.item.removeAttachmentAsync(
          $("#attachmentId").val(),
          { asyncContext : null },
          function(result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded) {
                  console.error(`${result.error.message}`);
              } else {
                  console.log(`Attachment removed successfully.`);
              }
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: O identificador do anexo a remover.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->. Se a remoção do anexo falhar, a propriedade `asyncResult.error` conterá um código de erro com o motivo da falha.'
          type:
            - 'outlook!Office.AppointmentCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#requiredAttendees:member'
    summary: |-
      Fornece acesso aos participantes obrigatórios de um evento. O tipo de objeto e nível de acesso dependem do modo do item atual.

      A propriedade `requiredAttendees` retorna um objeto `Recipients` que fornece métodos para obter ou atualizar os participantes obrigatórios de uma reunião. No entanto, dependendo do cliente/plataforma (ou seja, Windows, Mac, etc.), os limites podem ser aplicados em quantos destinatários você pode obter ou atualizar. Consulte o objeto [Recipients](xref:outlook!Office.Recipients:interface) para obter mais detalhes.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.requiredAttendees.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfRequiredAttendeesRecipients = asyncResult.value;
          console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml
      Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptRequiredAttendees = asyncResult.value;
          for (var i = 0; i < apptRequiredAttendees.length; i++) {
            console.log(
              "Required attendees: " +
                apptRequiredAttendees[i].displayName +
                " (" +
                apptRequiredAttendees[i].emailAddress +
                ") - response: " +
                apptRequiredAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml
      var email = $("#emailRequired")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.requiredAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting required attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)'
    summary: |-
      Insere de forma assíncrona os dados no corpo ou no assunto de uma mensagem.

      O método `setSelectedDataAsync` insere a cadeia de caracteres especificada no local do cursor no corpo ou assunto do item ou, se o texto estiver selecionado no editor, substitui o texto selecionado. Se o cursor não estiver no campo do corpo ou assunto, um erro será retornado. Após a inserção, o cursor é colocado no final do conteúdo inserido.

      \[[Conjunto de APIs: caixa de correio 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadWriteItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      **Erros** :

      - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
      ```
      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/set-selected-data.yaml
      Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected text has been updated successfully.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Os dados a serem inseridos. Os dados não devem exceder 1.000.000 de caracteres. Se forem passados mais de 1.000.000 de caracteres, ocorrerá uma exceção `ArgumentOutOfRange`.'
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `coercionType`<!-- -->: Se o texto, o estilo atual é aplicado no Outlook na Web e no Windows. Se o campo for um editor de HTML, apenas os dados de texto são inseridos, mesmo se os dados forem HTML. Se HTML e o campo oferecer suporte a HTML (o assunto não), o estilo atual será aplicado no Outlook na Web e o estilo padrão será aplicado no Outlook em clientes de área de trabalho. Se o campo for um campo de texto, retorna um erro `InvalidDataFormat`. Se `coercionType` não estiver definido, o resultado depende do campo: se o campo for HTML, HTML será usado; se o campo for texto, texto sem formatação será usado.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#start:member'
    summary: |-
      Obtém ou define a data e a hora em que o compromisso deve começar.

      A `start` propriedade é um objeto [time](xref:outlook!Office.Time:interface) expresso como um valor de data e hora Coordinated Universal Time (UTC). Você pode usar o `convertToLocalClientTime` método para converter o valor para a data e hora locais do cliente.

      Ao usar o método `Time.setAsync` para definir a hora de início, deve-se usar o método `convertToUtcClientTime` para converter a hora local no cliente para UTC para o servidor.

      **Importante** : no cliente Windows, você não pode usar essa propriedade para atualizar o início de uma recorrência.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment starts: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml
      var start = new Date(); // Represents current date and time.
      start.setDate(start.getDate() + 2); // Add 2 days to current date.
      Office.context.mailbox.item.start.setAsync(start, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set start date and time to ${start}`);
      });
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Time;'
      return:
        type:
          - 'outlook!Office.Time:interface'
  - uid: 'outlook!Office.AppointmentCompose#subject:member'
    summary: |-
      Obtém ou define a descrição que aparece no campo de assunto de um item.

      A propriedade `subject` obtém ou define o assunto completo do item, conforme enviado pelo servidor de email.

      A propriedade `subject` retorna um objeto `Subject` que fornece métodos para obter e definir o assunto.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)** :`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)** : organizador de compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml
      Office.context.mailbox.item.subject.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Subject: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml
      let subject = "Hello World!";
      Office.context.mailbox.item.subject.setAsync(subject, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set subject to ${subject}`);
      });
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
references:
  - uid: 'outlook!Office.Appointment:interface'
    name: Appointment
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Time:interface'
    name: Time
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Location:interface'
    name: Location
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject