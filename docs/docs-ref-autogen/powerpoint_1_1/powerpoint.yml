### YamlMime:UniversalReference
items:
  - uid: powerpoint!
    name: powerpoint
    fullName: powerpoint
    langs:
      - typeScript
    type: package
    children:
      - 'powerpoint!PowerPoint.Application:class'
      - 'powerpoint!PowerPoint.createPresentation:function(1)'
      - 'powerpoint!PowerPoint.ErrorCodes:enum'
      - 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
      - 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
      - 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
      - 'powerpoint!PowerPoint.Presentation:class'
      - 'powerpoint!PowerPoint.RequestContext:class'
      - 'powerpoint!PowerPoint.run:function(1)'
      - 'powerpoint!PowerPoint.run:function(2)'
      - 'powerpoint!PowerPoint.run:function(3)'
  - uid: 'powerpoint!PowerPoint.createPresentation:function(1)'
    summary: |-
      Cria e abre uma nova apresentação. Opcionalmente, a apresentação pode ser preenchida previamente com um arquivo. pptx codificado em base64.

      \[[Conjunto de APIs: PowerPointApi 1,1](/office/dev/add-ins/reference/javascript-api-for-office)\]
    name: PowerPoint.createPresentation(base64File)
    fullName: PowerPoint.createPresentation(base64File)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function createPresentation(base64File?: string): Promise<void>;'
      return:
        type:
          - 'powerpoint!PowerPoint.createPresentation~0:complex'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          var myFile = document.getElementById("file");
          var reader = new FileReader();

          reader.onload = function (event) {
              // strip off the metadata before the base64-encoded string
              var startIndex = event.target.result.indexOf("base64,");
              var copyBase64 = event.target.result.substr(startIndex + 7);

              PowerPoint.createPresentation(copyBase64);        
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64File
          description: Opcional. O arquivo. pptx codificado em base64. O valor padrão é nulo.
          type:
            - string
  - uid: 'powerpoint!PowerPoint.run:function(1)'
    summary: 'Executa um script em lotes que executa ações no modelo de objeto do PowerPoint, usando um novo RequestContext. Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.'
    name: PowerPoint.run(batch)
    fullName: PowerPoint.run(batch)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~0:complex'
        description: ''
      parameters:
        - id: batch
          description: 'Uma função que usa RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). O parâmetro context facilita as solicitações para o aplicativo PowerPoint. Como o suplemento do Office e o aplicativo do PowerPoint são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do PowerPoint do suplemento.'
          type:
            - 'powerpoint!PowerPoint.run~1:complex'
      typeParameters:
        - id: T
  - uid: 'powerpoint!PowerPoint.run:function(2)'
    summary: 'Executa um script em lotes que executa ações no modelo de objeto do PowerPoint, usando RequestContext de um objeto API criado anteriormente. Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.'
    name: 'PowerPoint.run(object, batch)'
    fullName: 'PowerPoint.run(object, batch)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~2:complex'
        description: ''
      parameters:
        - id: object
          description: 'Um objeto API criado anteriormente. O lote usará o mesmo RequestContext que o objeto Passed-in, o que significa que qualquer alteração aplicada ao objeto será selecionada por "context. Sync ()".'
          type:
            - 'powerpoint!OfficeExtension.ClientObject:class'
        - id: batch
          description: 'Uma função que usa RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). O parâmetro context facilita as solicitações para o aplicativo PowerPoint. Como o suplemento do Office e o aplicativo do PowerPoint são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do PowerPoint do suplemento.'
          type:
            - 'powerpoint!PowerPoint.run~3:complex'
      typeParameters:
        - id: T
  - uid: 'powerpoint!PowerPoint.run:function(3)'
    summary: 'Executa um script em lotes que executa ações no modelo de objeto do PowerPoint, usando RequestContext de objetos API criados anteriormente.'
    name: 'PowerPoint.run(objects, batch)'
    fullName: 'PowerPoint.run(objects, batch)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~4:complex'
        description: ''
      parameters:
        - id: objects
          description: 'Uma matriz de objetos API criados anteriormente. A matriz será validada para garantir que todos os objetos compartilhem o mesmo contexto. O lote usará esse RequestContext compartilhado, o que significa que qualquer alteração aplicada a esses objetos será selecionada por "context. Sync ()".'
          type:
            - 'powerpoint!PowerPoint.run~5:complex'
        - id: batch
          description: 'Uma função que usa RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). O parâmetro context facilita as solicitações para o aplicativo PowerPoint. Como o suplemento do Office e o aplicativo do PowerPoint são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do PowerPoint do suplemento.'
          type:
            - 'powerpoint!PowerPoint.run~6:complex'
      typeParameters:
        - id: T
references:
  - uid: 'powerpoint!PowerPoint.Application:class'
    name: PowerPoint.Application
  - uid: 'powerpoint!PowerPoint.createPresentation~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>
  - uid: 'powerpoint!PowerPoint.ErrorCodes:enum'
    name: PowerPoint.ErrorCodes
  - uid: 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
    name: PowerPoint.Interfaces.CollectionLoadOptions
  - uid: 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
    name: PowerPoint.Interfaces.PresentationData
  - uid: 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
    name: PowerPoint.Interfaces.PresentationLoadOptions
  - uid: 'powerpoint!PowerPoint.Presentation:class'
    name: PowerPoint.Presentation
  - uid: 'powerpoint!PowerPoint.RequestContext:class'
    name: PowerPoint.RequestContext
  - uid: 'powerpoint!PowerPoint.run~0:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~1:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~2:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'powerpoint!PowerPoint.run~3:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~4:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~5:complex'
    name: 'OfficeExtension.ClientObject[]'
    fullName: 'OfficeExtension.ClientObject[]'
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.ClientObject:class'
        name: OfficeExtension.ClientObject
        fullName: OfficeExtension.ClientObject
      - name: '[]'
        fullName: '[]'
  - uid: 'powerpoint!PowerPoint.run~6:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>