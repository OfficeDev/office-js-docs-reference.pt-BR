### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Cria e abre uma nova apresentação. Opcionalmente, a apresentação pode ser preenchida previamente com um arquivo .pptx codificado em base64.


    \[[Conjunto de APIs: PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Opcional. O arquivo .pptx codificado em base64. O valor padrão é nulo.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Executa um script em lotes que executa ações no modelo de objeto do PowerPoint, usando um novo RequestContext. Quando a promessa for resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Uma função que recebe um RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context.sync()"). O parâmetro de contexto facilita as solicitações para o aplicativo PowerPoint. Como o aplicativo do Office e o aplicativo do PowerPoint são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do PowerPoint por meio do complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Executa um script em lotes que executa ações no modelo de objeto do PowerPoint, usando o RequestContext de um objeto de API criado anteriormente. Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Um objeto de API criado anteriormente. O lote usará o mesmo RequestContext que o objeto passado, o que significa que todas as alterações aplicadas ao objeto serão escolhidas por "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Uma função que recebe um RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context.sync()"). O parâmetro de contexto facilita as solicitações para o aplicativo PowerPoint. Como o complemento do Office e o aplicativo do PowerPoint são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do PowerPoint por meio do complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Executa um script em lotes que executa ações no modelo de objeto do PowerPoint, usando o RequestContext de objetos de API criados anteriormente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Uma matriz de objetos de API criados anteriormente. A matriz será validada para garantir que todos os objetos compartilhem o mesmo contexto. O lote usará esse RequestContext compartilhado, o que significa que todas as alterações aplicadas a esses objetos serão escolhidas por "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Uma função que recebe um RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context.sync()"). O parâmetro de contexto facilita as solicitações para o aplicativo PowerPoint. Como o aplicativo do Office e o aplicativo do PowerPoint são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do PowerPoint por meio do complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: c6b8470ca774ffdb8d14fae40e03d6469b5de9fe
  ms.sourcegitcommit: f229afdd4c2bc820ac799394a77b637fc66e87b4
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 01/27/2021
  ms.locfileid: "49992225"
