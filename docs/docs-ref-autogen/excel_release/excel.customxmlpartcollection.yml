### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.CustomXmlPartCollection
    summary: |-
      <span data-ttu-id="5054a-101">Uma coleção de partes XML personalizadas.</span><span class="sxs-lookup"><span data-stu-id="5054a-101">A collection of custom XML parts.</span></span>

      <span data-ttu-id="5054a-102">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5054a-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.CustomXmlPartCollection.add
      - excel_release.Excel.CustomXmlPartCollection.context
      - excel_release.Excel.CustomXmlPartCollection.getByNamespace
      - excel_release.Excel.CustomXmlPartCollection.getCount
      - excel_release.Excel.CustomXmlPartCollection.getItem
      - excel_release.Excel.CustomXmlPartCollection.getItemOrNullObject
      - excel_release.Excel.CustomXmlPartCollection.items
      - excel_release.Excel.CustomXmlPartCollection.load
      - excel_release.Excel.CustomXmlPartCollection.load_1
      - excel_release.Excel.CustomXmlPartCollection.load_2
      - excel_release.Excel.CustomXmlPartCollection.toJSON
  - uid: excel_release.Excel.CustomXmlPartCollection.add
    summary: |-
      <span data-ttu-id="5054a-103">Adiciona uma nova parte XML personalizada à pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="5054a-103">Adds a new custom XML part to the workbook.</span></span>

      <span data-ttu-id="5054a-104">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5054a-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="5054a-105">Exemplos</span><span class="sxs-lookup"><span data-stu-id="5054a-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="5054a-106">Conteúdo XML.</span><span class="sxs-lookup"><span data-stu-id="5054a-106">XML content.</span></span> <span data-ttu-id="5054a-107">Deve ser um fragmento XML válido.</span><span class="sxs-lookup"><span data-stu-id="5054a-107">Must be a valid XML fragment.</span></span>
          type:
            - string
  - uid: excel_release.Excel.CustomXmlPartCollection.context
    summary: <span data-ttu-id="5054a-108">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="5054a-108">The request context associated with the object.</span></span> <span data-ttu-id="5054a-109">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="5054a-109">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.CustomXmlPartCollection.getByNamespace
    summary: |-
      <span data-ttu-id="5054a-110">Obtém uma nova coleção com escopo de partes XML personalizadas cujos namespaces correspondem ao namespace especificado.</span><span class="sxs-lookup"><span data-stu-id="5054a-110">Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.</span></span>

      <span data-ttu-id="5054a-111">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5054a-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getByNamespace(namespaceUri)
    fullName: getByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="5054a-112">Exemplos</span><span class="sxs-lookup"><span data-stu-id="5054a-112">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
      parameters:
        - id: namespaceUri
          description: '<span data-ttu-id="5054a-113">Este deve ser um URI de esquema totalmente qualificado; por exemplo, "http://schemas.contoso.com/review/1.0".</span><span class="sxs-lookup"><span data-stu-id="5054a-113">This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".</span></span>'
          type:
            - string
  - uid: excel_release.Excel.CustomXmlPartCollection.getCount
    summary: |-
      <span data-ttu-id="5054a-114">Obtém o número de partes CustomXml na coleção.</span><span class="sxs-lookup"><span data-stu-id="5054a-114">Gets the number of CustomXml parts in the collection.</span></span>

      <span data-ttu-id="5054a-115">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5054a-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel_release.Excel.CustomXmlPartCollection.getItem
    summary: |-
      <span data-ttu-id="5054a-116">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="5054a-116">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="5054a-117">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5054a-117">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="5054a-118">Exemplos</span><span class="sxs-lookup"><span data-stu-id="5054a-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="5054a-119">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="5054a-119">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel_release.Excel.CustomXmlPartCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="5054a-120">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="5054a-120">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="5054a-121">Se o CustomXmlPart não existir, a propriedade isNull do objeto Return será true.</span><span class="sxs-lookup"><span data-stu-id="5054a-121">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="5054a-122">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5054a-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="5054a-123">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="5054a-123">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel_release.Excel.CustomXmlPartCollection.items
    summary: <span data-ttu-id="5054a-124">Obtém os itens filhos carregados nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="5054a-124">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel_release.Excel.CustomXmlPartCollection.load
    summary: <span data-ttu-id="5054a-125">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="5054a-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="5054a-126">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="5054a-126">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="5054a-127">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="5054a-127">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="5054a-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="5054a-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="5054a-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="5054a-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="5054a-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="5054a-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection` - Only available on collection types.</span></span> <span data-ttu-id="5054a-131">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="5054a-131">It is similar to the preceding signature.</span></span> <span data-ttu-id="5054a-132">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="5054a-132">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="5054a-133">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="5054a-133">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="5054a-134">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="5054a-134">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel_release.Excel.CustomXmlPartCollection.load_1
    summary: <span data-ttu-id="5054a-135">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="5054a-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="5054a-136">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="5054a-136">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="5054a-137">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="5054a-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.CustomXmlPartCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel_release.Excel.CustomXmlPartCollection.toJSON
    summary: '<span data-ttu-id="5054a-138">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="5054a-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="5054a-139">.</span><span class="sxs-lookup"><span data-stu-id="5054a-139"></span></span> <span data-ttu-id="5054a-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="5054a-140"></span></span><!-- --><span data-ttu-id="5054a-141">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.CustomXmlPartCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.CustomXmlPartCollectionData`</span><span class="sxs-lookup"><span data-stu-id="5054a-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`</span></span><!-- --><span data-ttu-id="5054a-142">) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.</span><span class="sxs-lookup"><span data-stu-id="5054a-142">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartCollectionData
        description: ''