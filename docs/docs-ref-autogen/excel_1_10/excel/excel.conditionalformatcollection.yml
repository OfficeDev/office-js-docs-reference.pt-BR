### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    summary: |-
      Representa uma coleção de todos os formatos condicionais que se sobrepõem ao intervalo.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormatCollection#add:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#add:member(2)'
      - 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#context:member'
      - 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#items:member'
      - 'excel!Excel.ConditionalFormatCollection#load:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(2)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(3)'
      - 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    summary: |-
      Adiciona um novo formato condicional à coleção na prioridade First/Top.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
      parameters:
        - id: type
          description: O tipo de formato condicional que está sendo adicionado. Consulte Excel. Valorconditionalformattype para obter detalhes.
          type:
            - 'excel!Excel.ConditionalFormatType:enum'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(2)'
    summary: |-
      Adiciona um novo formato condicional à coleção na prioridade First/Top.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: add(typeString)
    fullName: add(typeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: typeString
          description: O tipo de formato condicional que está sendo adicionado. Consulte Excel. Valorconditionalformattype para obter detalhes.
          type:
            - '"Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
  - uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    summary: |-
      Limpa todos os formatos condicionais ativos no intervalo atual especificado.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    summary: |-
      Retorna o número de formatos condicionais na pasta de trabalho. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection#getCount~0:complex'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
              var cfCount = range.conditionalFormats.getCount(); 

              return ctx.sync().then(function () {
                  console.log("Count: " + cfCount.value);
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    summary: |-
      Retorna um formato condicional para o ID fornecido.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-
          Objeto de formato condicional.

          #### <a name="examples"></a>Exemplos

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: A ID da formatação condicional.
          type:
            - string
  - uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    summary: |-
      Retorna um formato condicional no índice fornecido.

      \[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
      parameters:
        - id: index
          description: Índice dos formatos condicionais a serem recuperados.
          type:
            - number
  - uid: 'excel!Excel.ConditionalFormatCollection#items:member'
    summary: Obtém os itens filhos carregados nesta coleção.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection#items~0:complex'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: options
          description: Fornece opções para as propriedades do objeto a ser carregado.
          type:
            - 'excel!Excel.ConditionalFormatCollection#load~0:complex'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.ConditionalFormatCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.ConditionalFormatCollectionData`<!-- -->) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ConditionalFormatCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: Excel.ConditionalFormat
  - uid: 'excel!Excel.ConditionalFormatType:enum'
    name: Excel.ConditionalFormatType
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ConditionalFormatCollection#items~0:complex'
    name: 'Excel.ConditionalFormat[]'
    fullName: 'Excel.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormat:class'
        name: Excel.ConditionalFormat
        fullName: Excel.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.ConditionalFormatCollection#load~0:complex'
    name: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.ConditionalFormatCollectionLoadOptions:interface'
        name: Excel.Interfaces.ConditionalFormatCollectionLoadOptions
        fullName: Excel.Interfaces.ConditionalFormatCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.ConditionalFormatCollectionData:interface'
    name: Excel.Interfaces.ConditionalFormatCollectionData