### YamlMime:TSPackage
uid: visio!
name: visio
type: package
summary: ''
classes:
- visio!Visio.Application:class
- visio!Visio.Comment:class
- visio!Visio.CommentCollection:class
- visio!Visio.Document:class
- visio!Visio.DocumentView:class
- visio!Visio.Hyperlink:class
- visio!Visio.HyperlinkCollection:class
- visio!Visio.Page:class
- visio!Visio.PageCollection:class
- visio!Visio.PageView:class
- visio!Visio.RequestContext:class
- visio!Visio.Selection:class
- visio!Visio.Shape:class
- visio!Visio.ShapeCollection:class
- visio!Visio.ShapeDataItem:class
- visio!Visio.ShapeDataItemCollection:class
- visio!Visio.ShapeView:class
interfaces:
- visio!Visio.BoundingBox:interface
- visio!Visio.DataRefreshCompleteEventArgs:interface
- visio!Visio.DocumentLoadCompleteEventArgs:interface
- visio!Visio.Highlight:interface
- visio!Visio.Interfaces.ApplicationData:interface
- visio!Visio.Interfaces.ApplicationLoadOptions:interface
- visio!Visio.Interfaces.ApplicationUpdateData:interface
- visio!Visio.Interfaces.CollectionLoadOptions:interface
- visio!Visio.Interfaces.CommentCollectionData:interface
- visio!Visio.Interfaces.CommentCollectionLoadOptions:interface
- visio!Visio.Interfaces.CommentCollectionUpdateData:interface
- visio!Visio.Interfaces.CommentData:interface
- visio!Visio.Interfaces.CommentLoadOptions:interface
- visio!Visio.Interfaces.CommentUpdateData:interface
- visio!Visio.Interfaces.DocumentData:interface
- visio!Visio.Interfaces.DocumentLoadOptions:interface
- visio!Visio.Interfaces.DocumentUpdateData:interface
- visio!Visio.Interfaces.DocumentViewData:interface
- visio!Visio.Interfaces.DocumentViewLoadOptions:interface
- visio!Visio.Interfaces.DocumentViewUpdateData:interface
- visio!Visio.Interfaces.HyperlinkCollectionData:interface
- visio!Visio.Interfaces.HyperlinkCollectionLoadOptions:interface
- visio!Visio.Interfaces.HyperlinkCollectionUpdateData:interface
- visio!Visio.Interfaces.HyperlinkData:interface
- visio!Visio.Interfaces.HyperlinkLoadOptions:interface
- visio!Visio.Interfaces.PageCollectionData:interface
- visio!Visio.Interfaces.PageCollectionLoadOptions:interface
- visio!Visio.Interfaces.PageCollectionUpdateData:interface
- visio!Visio.Interfaces.PageData:interface
- visio!Visio.Interfaces.PageLoadOptions:interface
- visio!Visio.Interfaces.PageUpdateData:interface
- visio!Visio.Interfaces.PageViewData:interface
- visio!Visio.Interfaces.PageViewLoadOptions:interface
- visio!Visio.Interfaces.PageViewUpdateData:interface
- visio!Visio.Interfaces.SelectionData:interface
- visio!Visio.Interfaces.ShapeCollectionData:interface
- visio!Visio.Interfaces.ShapeCollectionLoadOptions:interface
- visio!Visio.Interfaces.ShapeCollectionUpdateData:interface
- visio!Visio.Interfaces.ShapeData:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionData:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionLoadOptions:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionUpdateData:interface
- visio!Visio.Interfaces.ShapeDataItemData:interface
- visio!Visio.Interfaces.ShapeDataItemLoadOptions:interface
- visio!Visio.Interfaces.ShapeLoadOptions:interface
- visio!Visio.Interfaces.ShapeUpdateData:interface
- visio!Visio.Interfaces.ShapeViewData:interface
- visio!Visio.Interfaces.ShapeViewLoadOptions:interface
- visio!Visio.Interfaces.ShapeViewUpdateData:interface
- visio!Visio.PageLoadCompleteEventArgs:interface
- visio!Visio.PageRenderCompleteEventArgs:interface
- visio!Visio.Position:interface
- visio!Visio.SelectionChangedEventArgs:interface
- visio!Visio.ShapeMouseEnterEventArgs:interface
- visio!Visio.ShapeMouseLeaveEventArgs:interface
enums:
- visio!Visio.ErrorCodes:enum
- visio!Visio.OverlayHorizontalAlignment:enum
- visio!Visio.OverlayType:enum
- visio!Visio.OverlayVerticalAlignment:enum
- visio!Visio.ToolBarType:enum
functions:
- name: Visio.run(batch)
  uid: visio!Visio.run:function(1)
  package: visio!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Visio, usando um novo contexto de solicitação. Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Uma função que usa o Visio. RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). O parâmetro context facilita as solicitações para o aplicativo Visio. Como o suplemento do Office e o aplicativo do Visio são executados em dois processos diferentes, o contexto de solicitação é necessário para obter acesso ao modelo de objeto do Visio a partir do suplemento.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(object, batch)
  uid: visio!Visio.run:function(2)
  package: visio!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Visio, usando o contexto de solicitação de um objeto API criado anteriormente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject | OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Um objeto API criado anteriormente. O lote usará o mesmo contexto de solicitação que o objeto Passed-in, o que significa que qualquer alteração aplicada ao objeto será selecionada por "context. Sync ()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" /> | <xref uid="office!OfficeExtension.EmbeddedSession:class" />
    - id: batch
      description: Uma função que usa o Visio. RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(objects, batch)
  uid: visio!Visio.run:function(3)
  package: visio!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Visio, usando o contexto de solicitação de objetos API criados anteriormente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Uma matriz de objetos API criados anteriormente. A matriz será validada para garantir que todos os objetos compartilhem o mesmo contexto. O lote usará esse contexto de solicitação compartilhada, o que significa que qualquer alteração aplicada a esses objetos será selecionada por "context. Sync ()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Uma função que usa o Visio. RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(contextObject, batch)
  uid: visio!Visio.run:function(4)
  package: visio!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Visio, usando RequestContext de um objeto criado anteriormente. Quando a promessa é resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
  remarks: >-
    Além dessa assinatura, o método também tem as seguintes assinaturas:


    `run<T>(batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`


    `run<T>(object: OfficeExtension.ClientObject | OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`


    `run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(contextObject: OfficeExtension.ClientRequestContext, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: contextObject
      description: Um Visio. RequestContext criado anteriormente. Este contexto será reutilizado pela função de lote (em vez de ter um novo contexto criado). Isso significa que o lote poderá pegar as alterações feitas nos objetos de API existentes, caso esses objetos tenham sido derivados desse mesmo contexto.
      type: <xref uid="office!OfficeExtension.ClientRequestContext:class" />
    - id: batch
      description: Uma função que usa RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context. Sync ()"). O parâmetro context facilita as solicitações para o aplicativo Visio. Como o suplemento do Office e o aplicativo Visio são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do Visio a partir do suplemento.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 628e9290512b94ba1e9d8aefd6a1fa556297a078
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49142823"
