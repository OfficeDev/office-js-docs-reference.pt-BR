### YamlMime:UniversalReference
ms.openlocfilehash: 6de66b31956353c279ae7a557d994e4522957f88
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 11/09/2018
ms.locfileid: "26233558"
items:
- uid: office.OfficeExtension.LoadOption
  summary: Especifica quais propriedades de um objeto devem ser carregadas. Essa carga acontece quando o método sync() é executado. Isto sincroniza os estados entre objetos do Office e os objetos de proxy JavaScript correspondentes.
  remarks: >-
    Para o Word, o método preferencial para especificar as propriedades e informações de paginação é usando uma cadeia de caracteres literal. Os dois primeiros exemplos mostram a maneira preferencial para solicitar as propriedades de tamanho de texto e a fonte dos parágrafos em uma coleção de parágrafo:


    `context.load(paragraphs, 'text, font/size');`


    `paragraphs.load('text, font/size');`


    Veja um exemplo parecido usando notação de objeto (inclui paginação):


    `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    Observe que, quando não determinamos as propriedades específicas do objeto Font na instrução Select, a instrução de expansão em si indica que todas as propriedades da fonte são carregadas.

    #### <a name="examples"></a>Exemplos


    ```javascript

    // This example shows how to get the paragraphs in the Word document

    // along with their text and font size properties.


    // Run a batch operation against the Word object model.

    Word.run(function (context) {
        // Create a proxy object for the paragraphs collection.
        var paragraphs = context.document.body.paragraphs;

        // Queue a commmand to load the text and font properties.
        // It is best practice to always specify the property set.
        // Otherwise, all properties are returned on the object.
        context.load(paragraphs, 'text, font/size');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            // Insert code that works with the paragraphs loaded by context.load().
        })
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: OfficeExtension.LoadOption
  fullName: OfficeExtension.LoadOption
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.OfficeExtension.LoadOption.expand
  - office.OfficeExtension.LoadOption.select
  - office.OfficeExtension.LoadOption.skip
  - office.OfficeExtension.LoadOption.top
- uid: office.OfficeExtension.LoadOption.expand
  summary: Uma cadeia de caracteres delimitada por vírgulas, ou matriz de cadeias de caracteres, que especifica as propriedades de navegação para carregar.
  name: expand
  fullName: expand
  langs:
  - typeScript
  type: property
  syntax:
    content: 'expand?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.select
  summary: Uma cadeia de caracteres delimitada por vírgulas, ou matriz de cadeias de caracteres, que especifica as propriedades de carga.
  name: select
  fullName: select
  langs:
  - typeScript
  type: property
  syntax:
    content: 'select?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.skip
  summary: Só pode ser usado em tipos de coleção. Especifica o número de itens na coleção que devem ser ignorados e não são incluídos no resultado. Se superior for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  name: skip
  fullName: skip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'skip?: number;'
    return:
      type:
      - number
- uid: office.OfficeExtension.LoadOption.top
  summary: Só pode ser usado em tipos de coleção. Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.
  name: top
  fullName: top
  langs:
  - typeScript
  type: property
  syntax:
    content: 'top?: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
