### YamlMime:UniversalReference
ms.openlocfilehash: 6de66b31956353c279ae7a557d994e4522957f88
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 11/09/2018
ms.locfileid: "26233558"
items:
- uid: office.OfficeExtension.LoadOption
  summary: <span data-ttu-id="acaac-101">Especifica quais propriedades de um objeto devem ser carregadas.</span><span class="sxs-lookup"><span data-stu-id="acaac-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="acaac-102">Essa carga acontece quando o método sync() é executado.</span><span class="sxs-lookup"><span data-stu-id="acaac-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="acaac-103">Isto sincroniza os estados entre objetos do Office e os objetos de proxy JavaScript correspondentes.</span><span class="sxs-lookup"><span data-stu-id="acaac-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>
  remarks: >-
    <span data-ttu-id="acaac-104">Para o Word, o método preferencial para especificar as propriedades e informações de paginação é usando uma cadeia de caracteres literal.</span><span class="sxs-lookup"><span data-stu-id="acaac-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="acaac-105">Os dois primeiros exemplos mostram a maneira preferencial para solicitar as propriedades de tamanho de texto e a fonte dos parágrafos em uma coleção de parágrafo:</span><span class="sxs-lookup"><span data-stu-id="acaac-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>


    `context.load(paragraphs, 'text, font/size');`


    `paragraphs.load('text, font/size');`


    <span data-ttu-id="acaac-106">Veja um exemplo parecido usando notação de objeto (inclui paginação):</span><span class="sxs-lookup"><span data-stu-id="acaac-106">Here is a similar example using object notation (includes paging):</span></span>


    `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    <span data-ttu-id="acaac-107">Observe que, quando não determinamos as propriedades específicas do objeto Font na instrução Select, a instrução de expansão em si indica que todas as propriedades da fonte são carregadas.</span><span class="sxs-lookup"><span data-stu-id="acaac-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

    #### <a name="examples"></a><span data-ttu-id="acaac-108">Exemplos</span><span class="sxs-lookup"><span data-stu-id="acaac-108">Examples</span></span>


    ```javascript

    // This example shows how to get the paragraphs in the Word document

    // along with their text and font size properties.


    // Run a batch operation against the Word object model.

    Word.run(function (context) {
        // Create a proxy object for the paragraphs collection.
        var paragraphs = context.document.body.paragraphs;

        // Queue a commmand to load the text and font properties.
        // It is best practice to always specify the property set.
        // Otherwise, all properties are returned on the object.
        context.load(paragraphs, 'text, font/size');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            // Insert code that works with the paragraphs loaded by context.load().
        })
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: OfficeExtension.LoadOption
  fullName: OfficeExtension.LoadOption
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.OfficeExtension.LoadOption.expand
  - office.OfficeExtension.LoadOption.select
  - office.OfficeExtension.LoadOption.skip
  - office.OfficeExtension.LoadOption.top
- uid: office.OfficeExtension.LoadOption.expand
  summary: <span data-ttu-id="acaac-109">Uma cadeia de caracteres delimitada por vírgulas, ou matriz de cadeias de caracteres, que especifica as propriedades de navegação para carregar.</span><span class="sxs-lookup"><span data-stu-id="acaac-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>
  name: expand
  fullName: expand
  langs:
  - typeScript
  type: property
  syntax:
    content: 'expand?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.select
  summary: <span data-ttu-id="acaac-110">Uma cadeia de caracteres delimitada por vírgulas, ou matriz de cadeias de caracteres, que especifica as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="acaac-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>
  name: select
  fullName: select
  langs:
  - typeScript
  type: property
  syntax:
    content: 'select?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.skip
  summary: <span data-ttu-id="acaac-111">Só pode ser usado em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="acaac-111">Only usable on collection types.</span></span> <span data-ttu-id="acaac-112">Especifica o número de itens na coleção que devem ser ignorados e não são incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="acaac-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="acaac-113">Se superior for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="acaac-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: skip
  fullName: skip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'skip?: number;'
    return:
      type:
      - number
- uid: office.OfficeExtension.LoadOption.top
  summary: <span data-ttu-id="acaac-114">Só pode ser usado em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="acaac-114">Only usable on collection types.</span></span> <span data-ttu-id="acaac-115">Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class="sxs-lookup"><span data-stu-id="acaac-115">Specifies the maximum number of collection items that can be included in the result.</span></span>
  name: top
  fullName: top
  langs:
  - typeScript
  type: property
  syntax:
    content: 'top?: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"acaac-116\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"acaac-116\">Examples</span></span>\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
