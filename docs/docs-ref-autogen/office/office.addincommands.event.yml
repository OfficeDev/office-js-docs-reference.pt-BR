### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: <span data-ttu-id="a78e6-101">O objeto Event é passado como um parâmetro para funções de suplemento invocadas por botões de comando sem interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="a78e6-101">The event object is passed as a parameter to add-in functions invoked by UI-less command buttons.</span></span> <span data-ttu-id="a78e6-102">O objeto permite que o suplemento identifique qual botão foi clicado e avise o host que concluiu seu processamento.</span><span class="sxs-lookup"><span data-stu-id="a78e6-102">The object allows the add-in to identify which button was clicked and to signal the host that it has completed its processing.</span></span>
    remarks: |-
      <span data-ttu-id="a78e6-103">ConFira os [conjuntos de requisitos de comandos de suplemento](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) para obter mais informações de suporte.</span><span class="sxs-lookup"><span data-stu-id="a78e6-103">See [Add-in commands requirement sets](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) for more support information.</span></span>

      <span data-ttu-id="a78e6-104">**<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: \*\* [modo](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->restrito do Outlook aplicável\*\*: redação ou leitura</span><span class="sxs-lookup"><span data-stu-id="a78e6-104">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      <span data-ttu-id="a78e6-105">Indica que o suplemento concluiu o processamento que foi acionado por um botão de comando do suplemento ou manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="a78e6-105">Indicates that the add-in has completed processing that was triggered by an add-in command button or event handler.</span></span>

      <span data-ttu-id="a78e6-106">Este método deve ser chamado no final de uma função que foi invocado por um comando de suplemento definido com um elemento Action com um atributo xsi: type definido como ExecuteFunction.</span><span class="sxs-lookup"><span data-stu-id="a78e6-106">This method must be called at the end of a function which was invoked by an add-in command defined with an Action element with an xsi:type attribute set to ExecuteFunction.</span></span> <span data-ttu-id="a78e6-107">Chamar esse método sinaliza o cliente host de que a função está concluída e que ele pode limpar qualquer estado envolvido com chamar a função.</span><span class="sxs-lookup"><span data-stu-id="a78e6-107">Calling this method signals the host client that the function is complete and that it can clean up any state involved with invoking the function.</span></span> <span data-ttu-id="a78e6-108">Por exemplo, se o usuário fechar o Outlook antes de este método ser chamado, o Outlook o avisará de que uma função ainda está em execução.</span><span class="sxs-lookup"><span data-stu-id="a78e6-108">For example, if the user closes Outlook before this method is called, Outlook will warn that a function is still executing.</span></span>

      <span data-ttu-id="a78e6-109">Este método deve ser chamado em um manipulador de eventos adicionado por meio de Office.context.mailbox.addHandlerAsync depois de concluir o processamento do evento.</span><span class="sxs-lookup"><span data-stu-id="a78e6-109">This method must be called in an event handler added via Office.context.mailbox.addHandlerAsync after completing processing of the event.</span></span>

      <span data-ttu-id="a78e6-110">\[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]</span><span class="sxs-lookup"><span data-stu-id="a78e6-110">\[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/javascript-api-for-office) \]</span></span>
    remarks: |-
      <span data-ttu-id="a78e6-111">**<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: \*\* [modo](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->restrito do Outlook aplicável\*\*: redação ou leitura</span><span class="sxs-lookup"><span data-stu-id="a78e6-111">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>

      <span data-ttu-id="a78e6-112">A caixa de correio 1,3 não `options` tem o parâmetro enquanto a visualização da caixa `options` de correio tem suporte para o parâmetro.</span><span class="sxs-lookup"><span data-stu-id="a78e6-112">Mailbox 1.3 does not have the `options` parameter while Mailbox Preview does have support for `options` parameter)</span></span>

      #### <a name="examples"></a><span data-ttu-id="a78e6-113">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a78e6-113">Examples</span></span>

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: { allowEvent: boolean }): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="a78e6-114">Opcional.</span><span class="sxs-lookup"><span data-stu-id="a78e6-114">Optional.</span></span> <span data-ttu-id="a78e6-115">Um objeto literal que contém uma ou mais das propriedades a seguir.</span><span class="sxs-lookup"><span data-stu-id="a78e6-115">An object literal that contains one or more of the following properties.</span></span> <span data-ttu-id="a78e6-116">allowEvent: um valor booliano.</span><span class="sxs-lookup"><span data-stu-id="a78e6-116">allowEvent: A boolean value.</span></span> <span data-ttu-id="a78e6-117">Quando o método Completed é usado para sinalizar a conclusão de um manipulador de eventos, esse valor indica que o evento manipulado deve continuar a execução ou ser cancelado.</span><span class="sxs-lookup"><span data-stu-id="a78e6-117">When the completed method is used to signal completion of an event handler, this value indicates of the handled event should continue execution or be canceled.</span></span> <span data-ttu-id="a78e6-118">Por exemplo, um suplemento que manipula o evento de envio pode definir allowEvent = false para cancelar o envio da mensagem.</span><span class="sxs-lookup"><span data-stu-id="a78e6-118">For example, an add-in that handles the ItemSend event can set allowEvent = false to cancel sending of the message.</span></span>'
          type:
            - '{ allowEvent: boolean }'
  - uid: office.Office.AddinCommands.Event.source
    summary: <span data-ttu-id="a78e6-119">Informações sobre o controle que disparou a chamada desta função.</span><span class="sxs-lookup"><span data-stu-id="a78e6-119">Information about the control that triggered calling this function.</span></span>
    remarks: |-
      <span data-ttu-id="a78e6-120">Esta propriedade só tem suporte no Outlook no [conjunto de requisitos](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) de caixa de correio 1,3 e posterior.</span><span class="sxs-lookup"><span data-stu-id="a78e6-120">This property is only supported in Outlook in [requirement set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) Mailbox 1.3 and later.</span></span>

      #### <a name="examples"></a><span data-ttu-id="a78e6-121">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a78e6-121">Examples</span></span>

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source