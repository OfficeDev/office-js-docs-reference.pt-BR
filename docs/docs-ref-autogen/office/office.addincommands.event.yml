### YamlMime:UniversalReference
ms.openlocfilehash: 99b68a9c8525e05e27e381e43f1b31aa961d02a3
ms.sourcegitcommit: a422a2c3b9ada79477a9f873276b3c00765f7072
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 03/27/2019
ms.locfileid: "30900402"
items:
- uid: office.Office.AddinCommands.Event
  summary: O objeto Event é passado como um parâmetro para funções de suplemento invocadas por botões de comando sem interface do usuário. O objeto permite que o suplemento identifique qual botão foi clicado e avise o host que concluiu seu processamento.
  remarks: <table> <tr><td>Tipo de suplemento</td><td>Conteúdo, painel de tarefas, Outlook</td></tr> <tr><td>[Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restrito</td></tr> <tr><td>[Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Escrever ou Ler</td></tr> </table>
  name: Office.AddinCommands.Event
  fullName: Office.AddinCommands.Event
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.AddinCommands.Event.completed
  - office.Office.AddinCommands.Event.source
- uid: office.Office.AddinCommands.Event.completed
  summary: >-
    Indica que o suplemento concluiu o processamento que foi acionado por um botão de comando do suplemento ou manipulador de eventos.


    Este método deve ser chamado no final de uma função que foi invocado por um comando de suplemento definido com um elemento Action com um atributo xsi: type definido como ExecuteFunction. Chamar esse método sinaliza o cliente host de que a função está concluída e que ele pode limpar qualquer estado envolvido com chamar a função. Por exemplo, se o usuário fechar o Outlook antes de este método ser chamado, o Outlook o avisará de que uma função ainda está em execução.


    Este método deve ser chamado em um manipulador de eventos adicionado por meio de Office.context.mailbox.addHandlerAsync depois de concluir o processamento do evento.


    \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: >-
    <table> <tr><td>[Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restrito</td></tr> <tr><td>[Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Escrever ou Ler</td></tr> </table>


    **Detalhes do suporte**


    Um Y maiúsculo na matriz a seguir indica que esse método tem suporte no aplicativo host do Office correspondente. Uma célula vazia indica que o aplicativo host do Office não dá suporte a esse método.


    Para obter mais informações sobre os requisitos de servidor e aplicativo host do Office, consulte [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts com suporte, por plataforma* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (no navegador) </th><th> Office para iPad </th></tr> <tr><td><strong>Ele</strong></td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>Ele</strong></td><td> Y (desde a caixa de correio `options` 1,3: sem parâmetro;<br>Visualização da caixa de correio: `options` adiciona suporte para o parâmetro</td><td> </td><td> </td></tr> <tr><td><strong>Apresentação</strong></td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>Palavras</strong></td><td> Y </td><td> Y </td><td> Y </td></tr> </table>

    #### <a name="examples"></a>Exemplos


    ```javascript

    function processItem (event) {
        // Do some processing

        event.completed();
    }


    // In the following example, the checkMessage function has

    // been registered as an event handler for ItemSend.

    function checkMessage(event) {
        // Get the item being sent
        var outgoingMsg = Office.context.mailbox.item;

        // Check if subject contains "BLOCK"
        outgoingMsg.subject.getAsync(function (result) {
            // Subject is in result.value
            if (result.value.indexOf('BLOCK') != -1) {
                // Value is found, stop send
                event.completed({allowEvent = false});
            } else {
                // Value wasn't found, allow send
                event.completed({allowEvent = true});
            }
        });
    }

    ```
  name: completed(options)
  fullName: completed(options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'completed(options?: { allowEvent: boolean }): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. allowEvent: um valor booliano. Quando o método Completed é usado para sinalizar a conclusão de um manipulador de eventos, esse valor indica que o evento manipulado deve continuar a execução ou ser cancelado. Por exemplo, um suplemento que manipula o evento de envio pode definir allowEvent = false para cancelar o envio da mensagem.'
      type:
      - '{ allowEvent: boolean }'
- uid: office.Office.AddinCommands.Event.source
  summary: >-
    Informações sobre o controle que disparou a chamada desta função.


    **Detalhes do suporte**


    Um Y maiúsculo na matriz a seguir indica que essa propriedade tem suporte no aplicativo host do Office correspondente. Uma célula vazia indica que o aplicativo host do Office não dá suporte a essa propriedade.


    Para obter mais informações sobre os requisitos de servidor e aplicativo host do Office, consulte [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts com suporte, por plataforma* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (no navegador) </th><th> Office para iPad </th></tr> <tr><td><strong>Ele</strong></td><td> S (caixa de correio 1,3) </td><td> </td><td> </td></tr> </table>
  name: source
  fullName: source
  langs:
  - typeScript
  type: property
  syntax:
    content: source:Source;
    return:
      type:
      - office.Office.AddinCommands.Source
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// In this example, consider a button defined in an add-in manifest as follows:\n//<Control xsi:type=\"Button\" id=\"eventTestButton\">\n//    <Label resid=\"eventButtonLabel\" />\n//    <Tooltip resid=\"eventButtonTooltip\" />\n//    <Supertip>\n//        <Title resid=\"eventSuperTipTitle\" />\n//        <Description resid=\"eventSuperTipDescription\" />\n//    </Supertip>\n//    <Icon>\n//        <bt:Image size=\"16\" resid=\"blue-icon-16\" />\n//        <bt:Image size=\"32\" resid=\"blue-icon-32\" />\n//        <bt:Image size=\"80\" resid=\"blue-icon-80\" />\n//    </Icon>\n//    <Action xsi:type=\"ExecuteFunction\">\n//        <FunctionName>testEventObject</FunctionName>\n//    </Action>\n//</Control>\n\n// The button has an id attribute set to eventTestButton, and will invoke\n// the testEventObject function defined in the add-in.\n// That function looks like this:\nfunction testEventObject(event) {\n    // The event object implements the Event interface.\n\n    // This value will be \"eventTestButton\".\n    var buttonId = event.source.id;\n\n    // Signal to the host app that processing is complete.\n    event.completed();\n}\n```\n```javascript\n// Function is used by two buttons:\n// button1 and button2\nfunction multiButton (event) {\n    // Check which button was clicked.\n    var buttonId = event.source.id;\n\n    if (buttonId === 'button1') {\n        doButton1Action();\n    } else {\n        doButton2Action();\n    }\n\n    event.completed();\n}\n```"
