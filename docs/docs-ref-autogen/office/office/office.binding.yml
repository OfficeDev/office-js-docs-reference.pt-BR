### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Binding:interface'
    summary: |-
      Representa uma associação a uma seção do documento.

      O objeto Binding expõe a funcionalidade todas por todas as associações, independentemente do tipo.

      O objeto Binding nunca é chamado diretamente. É a classe pai abstrata dos objetos que representam cada tipo de associação: [Office. matrixbinding](xref:office!Office.MatrixBinding:interface)<!-- -->, [Office. TableBinding](xref:office!Office.TableBinding:interface)<!-- -->, ou [Office. TextBinding](xref:office!Office.TextBinding:interface)<!-- -->. Todos esses três objetos herdam os métodos getDataAsync e setDataAsync do objeto Binding que permitem que você interaja com os dados na associação. Eles também herdam as propriedades id e type para consultar os valores de propriedade. Além disso, os objetos MatrixBinding e TableBinding expõem métodos adicionais para recursos específicos de matriz e tabela, como contar o número de linhas e colunas.
    remarks: |-
      **Hosts**: Excel, Word

      **Conjuntos de requisitos**:

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
    name: Office.Binding
    fullName: Office.Binding
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Binding#addHandlerAsync:member(1)'
      - 'office!Office.Binding#addHandlerAsync:member(2)'
      - 'office!Office.Binding#document:member'
      - 'office!Office.Binding#getDataAsync:member(1)'
      - 'office!Office.Binding#getDataAsync:member(2)'
      - 'office!Office.Binding#id:member'
      - 'office!Office.Binding#removeHandlerAsync:member(1)'
      - 'office!Office.Binding#removeHandlerAsync:member(2)'
      - 'office!Office.Binding#setDataAsync:member(1)'
      - 'office!Office.Binding#setDataAsync:member(2)'
      - 'office!Office.Binding#type:member'
  - uid: 'office!Office.Binding#addHandlerAsync:member(1)'
    summary: 'Adiciona um manipulador de eventos ao objeto para o [Office. EventType](xref:office!Office.EventType:enum) especificado<!-- -->. Os EventType suportados são `Office.EventType.BindingDataChanged` e`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Você pode adicionar vários manipuladores de eventos para o eventType especificado, desde que o nome de cada função do manipulador de eventos seja exclusivo.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'O tipo de evento. Para associações, pode ser `Office.EventType.BindingDataChanged` ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: 'A função de manipulador de eventos a ser adicionada, cujo único parâmetro é do tipo [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) ou [Office. BindingSelectionChangedEventArgs](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.'
          type:
            - any
        - id: options
          description: 'Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterados, para uso em um retorno de chamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#addHandlerAsync~0:complex'
  - uid: 'office!Office.Binding#addHandlerAsync:member(2)'
    summary: 'Adiciona um manipulador de eventos ao objeto para o [Office. EventType](xref:office!Office.EventType:enum) especificado<!-- -->. Os EventType suportados são `Office.EventType.BindingDataChanged` e`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Você pode adicionar vários manipuladores de eventos para o eventType especificado, desde que o nome de cada função do manipulador de eventos seja exclusivo.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following code sample calls the select method of the Office object to access the binding
      // with ID "MyBinding", and then calls the addHandlerAsync method to add a handler function 
      // for the bindingDataChanged event of that binding.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingDataChanged, onBindingDataChanged);
      }

      function onBindingDataChanged(eventArgs) {
          write("Data has changed in binding: " + eventArgs.binding.id);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To add an event handler for the BindingSelectionChanged event of a binding, 
      // use the addHandlerAsync method of the Binding object.
      // The event handler receives an argument of type BindingSelectionChangedEventArgs.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
      }

      function onBindingSelectionChanged(eventArgs) {
          write(eventArgs.binding.id + " has been selected.");
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'O tipo de evento. Para associações, pode ser `Office.EventType.BindingDataChanged` ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: 'A função de manipulador de eventos a ser adicionada, cujo único parâmetro é do tipo [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) ou [Office. BindingSelectionChangedEventArgs](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#addHandlerAsync~1:complex'
  - uid: 'office!Office.Binding#document:member'
    summary: Obter o objeto Document associado à associação.
    name: document
    fullName: document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Office.Document;'
      return:
        type:
          - 'office!Office.Document:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.document.url);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.Binding#getDataAsync:member(1)'
    summary: Retorna os dados contidos na associação.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (ao usar`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textcoerção](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar`Office.CoercionType.Text`<!-- -->)

      Quando chamado de uma Matrixbinding ou TableBinding, o método getDataAsync retornará um subconjunto dos valores ligados se os parâmetros optional startRow, startColumn, rowCount e columnCount forem especificados (e especificarem um intervalo contíguo e válido).
    name: 'getDataAsync(options, callback)'
    fullName: 'getDataAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Fornece opções sobre como obter os dados em uma associação.
          type:
            - 'office!Office.GetBindingDataOptions:interface'
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` Propriedade do resultado é os valores na associação especificada. Se o `coercionType` parâmetro for especificado (e a chamada for bem-sucedida), os dados serão retornados no formato descrito no tópico de enumeração CoercionType.'
          type:
            - 'office!Office.Binding#getDataAsync~0:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Binding#getDataAsync:member(2)'
    summary: Retorna os dados contidos na associação.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (ao usar`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textcoerção](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar`Office.CoercionType.Text`<!-- -->)

      Quando chamado de uma Matrixbinding ou TableBinding, o método getDataAsync retornará um subconjunto dos valores ligados se os parâmetros optional startRow, startColumn, rowCount e columnCount forem especificados (e especificarem um intervalo contíguo e válido).

      #### <a name="examples"></a>Exemplos

      ```javascript
      function showBindingData() {
          Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
              write(asyncResult.value)
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // There is an important difference in behavior between using the "table" and "matrix" coercionType with the
      // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following
      // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.

      // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following
      // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the
      // first non-header row in the table.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'table', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value.rows[0][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }

      // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array
      // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all
      // included in the result.value matrix as separate rows before the table body rows are included.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'matrix', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value[1][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getDataAsync(callback)
    fullName: getDataAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` Propriedade do resultado é os valores na associação especificada. Se o `coercionType` parâmetro for especificado (e a chamada for bem-sucedida), os dados serão retornados no formato descrito no tópico de enumeração CoercionType.'
          type:
            - 'office!Office.Binding#getDataAsync~1:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Binding#id:member'
    summary: 'Uma cadeia de caracteres que identifica exclusivamente essa associação entre as associações no mesmo objeto [Office.Document](xref:office!Office.Document:interface) .'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.id);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.Binding#removeHandlerAsync:member(1)'
    summary: Remove o manipulador especificado da associação para o tipo de evento especificado.
    remarks: '**Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'O tipo de evento. Para associações, pode ser `Office.EventType.BindingDataChanged` ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: Fornece opções para determinar quais manipuladores de eventos ou manipuladores serão removidos.
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#removeHandlerAsync~0:complex'
  - uid: 'office!Office.Binding#removeHandlerAsync:member(2)'
    summary: Remove o manipulador especificado da associação para o tipo de evento especificado.
    remarks: |-
      **Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      #### <a name="examples"></a>Exemplos

      ```javascript
      function removeEventHandlerFromBinding() {
          Office.select("bindings#MyBinding").removeHandlerAsync(
              Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'O tipo de evento. Para associações, pode ser `Office.EventType.BindingDataChanged` ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#removeHandlerAsync~1:complex'
  - uid: 'office!Office.Binding#setDataAsync:member(1)'
    summary: Grava dados na seção associada do documento representado pelo objeto de associação especificado.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (ao usar`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textcoerção](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar`Office.CoercionType.Text`<!-- -->)

      O valor passado para data contém os dados a serem gravados na associação. O tipo do valor passado determina o que será gravado conforme descrito na tabela a seguir.

      <table> <tr> <th>`data`valor</th> <th>Dados gravados</th> </tr> <tr> <td>String</td> <td>O texto sem formatação ou qualquer coisa que possa ser forçada para uma cadeia de caracteres serão gravados.</td> </tr> <tr> <td>Uma matriz de matrizes ("matrix")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Para gravar uma única coluna de três linhas, passe uma matriz como esta:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Um `TableData` objeto</td> <td>Será gravada uma tabela com cabeçalhos.</td> </tr> </table>

      Além disso, essas ações específicas do aplicativo se aplicam ao gravar dados em uma associação. Para o Word, os dados especificados são gravados na associação da seguinte maneira:

      <table> <tr> <th>`data`valor</th> <th>Dados gravados</th> </tr> <tr> <td>String</td> <td>O texto especificado é gravado.</td> </tr> <tr> <td>Uma matriz de matrizes ("Matrix") ou um `TableData` objeto</td> <td>Uma tabela do Word é gravada.</td> </tr> <tr> <td>HTML</td> <td>O HTML especificado é gravado. Se qualquer um dos HTML que você escrever for inválido, o Word não irá gerar um erro. Word will write as much of the HTML as it can and will omit any invalid data.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>O XML especificado é gravado.</td> </tr> </table>

      Para o Excel, os dados especificados são gravados na associação da seguinte maneira:

      <table> <tr> <th>`data`valor</th> <th>Dados gravados</th> </tr> <tr> <td>String</td> <td>O texto especificado é inserido como o valor da primeira célula associada. Você também pode especificar uma fórmula válida para adicionar essa fórmula à célula associada. Por exemplo, definir data como `"=SUM(A1:A5)"` totalizará os valores no intervalo especificado. No entanto, após definir uma fórmula na célula associada, não é possível ler a fórmula adicionada (ou qualquer fórmula preexistente) da célula associada. Se você chamar o método Binding. getDataAsync na célula bound para ler seus dados, o método poderá retornar apenas os dados exibidos na célula (o resultado da fórmula).</td> </tr> <tr> <td>Uma matriz de matrizes ("matrix") e a forma corresponde exatamente à forma da associação especificada</td> <td>O conjunto de linhas e colunas é gravado. Você também pode especificar uma matriz de matrizes que contenham fórmulas válidas para adicioná-las às células associadas. Por exemplo, a definição de dados para `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` adicionará essas duas fórmulas a uma associação que contenha duas células. Assim como na definição de uma fórmula em uma única célula associada, você não pode ler as fórmulas adicionadas (ou qualquer fórmula pré-existente) da associação com o `Binding.getDataAsync` método-ela retorna apenas os dados exibidos nas células associadas.</td> </tr> <tr> <td>Um `TableData` objeto e a forma da tabela corresponde à tabela associada.</td> <td>O conjunto de linhas e/ou cabeçalhos especificado é gravado, se não, outros dados nas células ao redor serão substituídos. **Observação**: se você especificar fórmulas no objeto TableData passado para o parâmetro *Data* , poderá não obter os resultados esperados devido ao recurso "colunas calculadas" do Excel, que duplica automaticamente as fórmulas dentro de uma coluna. Para resolver esse problema quando desejar gravar *data* que contém fórmulas em uma tabela associada, tente especificar os dados como uma matriz de matrizes (em vez de um objeto TableData) e especifique o *coercionType* como Microsoft.Office.Matrix ou "matrix".</td> </tr> </table>

      Para o Excel na Web:

      - O número total de células no valor passado para o parâmetro data não pode exceder 20.000 em uma única chamada para esse método.

      - O número de grupos de formatação passados para o parâmetro cellFormat não pode exceder 100. Um único grupo formatação consiste em um conjunto de formatação aplicado a um intervalo de células especificado.

      Em todos os outros casos, um erro será retornado.

      O método setDataAsync gravará dados em um subconjunto de uma associação de tabela ou matriz se os parâmetros opcionais startRow e startColumn estiverem especificados e especificarem um intervalo válido.

      Na função de retorno de chamada passada para o método setDataAsync, você pode usar as propriedades do objeto AsyncResult para retornar as informações a seguir.

      <table> <tr> <th>Propriedade</th> <th>Use para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Sempre retorna undefined porque não há objetos ou dados a serem recuperados.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar o sucesso ou falha da operação.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Acessar um objeto Error que fornecerá informações de erro se a operação tiver falhado.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Um item definido pelo usuário de qualquer tipo que é retornado no objeto AsyncResult sem ser alterado.</td> </tr> </table>
    name: 'setDataAsync(data, options, callback)'
    fullName: 'setDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Os dados a serem definidos na seleção atual. Possíveis tipos de dados por host:

            Cadeia de caracteres: Excel na Web e no Windows e no Word somente na Web e no Windows

            matriz de matrizes: somente Excel e Word

            [Office. TableData](xref:office!Office.TableData:class)<!-- -->: Somente Excel e Word

            HTML: Word somente na Web e no Windows

            Office Open XML: somente Word
          type:
            - 'office!Office.Binding#setDataAsync~0:complex'
        - id: options
          description: Fornece opções sobre como definir os dados em uma associação.
          type:
            - 'office!Office.SetBindingDataOptions:interface'
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#setDataAsync~1:complex'
  - uid: 'office!Office.Binding#setDataAsync:member(2)'
    summary: Grava dados na seção associada do documento representado pelo objeto de associação especificado.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (ao usar`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textcoerção](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar`Office.CoercionType.Text`<!-- -->)

      O valor passado para data contém os dados a serem gravados na associação. O tipo do valor passado determina o que será gravado conforme descrito na tabela a seguir.

      <table> <tr> <th>`data`valor</th> <th>Dados gravados</th> </tr> <tr> <td>String</td> <td>O texto sem formatação ou qualquer coisa que possa ser forçada para uma cadeia de caracteres serão gravados.</td> </tr> <tr> <td>Uma matriz de matrizes ("matrix")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Para gravar uma única coluna de três linhas, passe uma matriz como esta:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Um `TableData` objeto</td> <td>Será gravada uma tabela com cabeçalhos.</td> </tr> </table>

      Além disso, essas ações específicas do aplicativo se aplicam ao gravar dados em uma associação. Para o Word, os dados especificados são gravados na associação da seguinte maneira:

      <table> <tr> <th>`data`valor</th> <th>Dados gravados</th> </tr> <tr> <td>String</td> <td>O texto especificado é gravado.</td> </tr> <tr> <td>Uma matriz de matrizes ("Matrix") ou um `TableData` objeto</td> <td>Uma tabela do Word é gravada.</td> </tr> <tr> <td>HTML</td> <td>O HTML especificado é gravado. Se qualquer um dos HTML que você escrever for inválido, o Word não irá gerar um erro. Word will write as much of the HTML as it can and will omit any invalid data.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>O XML especificado é gravado.</td> </tr> </table>

      Para o Excel, os dados especificados são gravados na associação da seguinte maneira:

      <table> <tr> <th>`data`valor</th> <th>Dados gravados</th> </tr> <tr> <td>String</td> <td>O texto especificado é inserido como o valor da primeira célula associada. Você também pode especificar uma fórmula válida para adicionar essa fórmula à célula associada. Por exemplo, definir data como `"=SUM(A1:A5)"` totalizará os valores no intervalo especificado. No entanto, após definir uma fórmula na célula associada, não é possível ler a fórmula adicionada (ou qualquer fórmula preexistente) da célula associada. Se você chamar o método Binding. getDataAsync na célula bound para ler seus dados, o método poderá retornar apenas os dados exibidos na célula (o resultado da fórmula).</td> </tr> <tr> <td>Uma matriz de matrizes ("matrix") e a forma corresponde exatamente à forma da associação especificada</td> <td>O conjunto de linhas e colunas é gravado. Você também pode especificar uma matriz de matrizes que contenham fórmulas válidas para adicioná-las às células associadas. Por exemplo, a definição de dados para `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` adicionará essas duas fórmulas a uma associação que contenha duas células. Assim como na definição de uma fórmula em uma única célula associada, você não pode ler as fórmulas adicionadas (ou qualquer fórmula pré-existente) da associação com o `Binding.getDataAsync` método-ela retorna apenas os dados exibidos nas células associadas.</td> </tr> <tr> <td>Um `TableData` objeto e a forma da tabela corresponde à tabela associada.</td> <td>O conjunto de linhas e/ou cabeçalhos especificado é gravado, se não, outros dados nas células ao redor serão substituídos. **Observação**: se você especificar fórmulas no objeto TableData passado para o parâmetro *Data* , poderá não obter os resultados esperados devido ao recurso "colunas calculadas" do Excel, que duplica automaticamente as fórmulas dentro de uma coluna. Para resolver esse problema quando desejar gravar *data* que contém fórmulas em uma tabela associada, tente especificar os dados como uma matriz de matrizes (em vez de um objeto TableData) e especifique o *coercionType* como Microsoft.Office.Matrix ou "matrix".</td> </tr> </table>

      Para o Excel na Web:

      - O número total de células no valor passado para o parâmetro data não pode exceder 20.000 em uma única chamada para esse método.

      - O número de grupos de formatação passados para o parâmetro cellFormat não pode exceder 100. Um único grupo formatação consiste em um conjunto de formatação aplicado a um intervalo de células especificado.

      Em todos os outros casos, um erro será retornado.

      O método setDataAsync gravará dados em um subconjunto de uma associação de tabela ou matriz se os parâmetros opcionais startRow e startColumn estiverem especificados e especificarem um intervalo válido.

      Na função de retorno de chamada passada para o método setDataAsync, você pode usar as propriedades do objeto AsyncResult para retornar as informações a seguir.

      <table> <tr> <th>Propriedade</th> <th>Use para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Sempre retorna undefined porque não há objetos ou dados a serem recuperados.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar o sucesso ou falha da operação.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Acessar um objeto Error que fornecerá informações de erro se a operação tiver falhado.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Um item definido pelo usuário de qualquer tipo que é retornado no objeto AsyncResult sem ser alterado.</td> </tr> </table>

      #### <a name="examples"></a>Exemplos

      ```javascript
      function setBindingData() {
          Office.select("bindings#MyBinding").setDataAsync('Hello World!', function (asyncResult) { });
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.
      // For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter 
      // as "html" as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.select("bindings#myBinding").setDataAsync(
              "<b>Hello</b> World!", {coercionType: "html"}, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In this example, the call to setDataAsync passes the data parameter as an array of arrays
      // (to create a single column of three rows), and specifies the data structure with the 
      // coercionType parameter as a "matrix".
      function writeBoundDataMatrix() {
          Office.select("bindings#myBinding").setDataAsync(
              [['Berlin'],['Munich'],['Duisburg']],{ coercionType: "matrix" }, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter 
      // as a TableData object (to write three columns and three rows), and specifies the data structure
      // with the coercionType parameter as a "table".

      // In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,
      // but as a single column with a new header and three rows, to update the values in the last column 
      // of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter 
      // is specified as 2 to replace the values in the third column of the table.
      function writeBoundDataTable() {
          // Create a TableData object.
          var myTable = new Office.TableData();
          myTable.headers = ['First Name', 'Last Name', 'Grade'];
          myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];

          // Set myTable in the binding.
          Office.select("bindings#myBinding").setDataAsync(myTable, { coercionType: "table" }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }

      // Replace last column with different data.
      function updateTableData() {
          var newTable = new Office.TableData();
          newTable.headers = ["Gender"];
          newTable.rows = [["M"],["M"],["F"]];
          Office.select("bindings#myBinding").setDataAsync(newTable, { coercionType: "table", startColumn:2 }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }     
          });   
      }

      // In this example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],
        {cellFormat:[{cells: {row: 1}, format: {fontColor: "yellow"}}, 
            {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}]}, 
        function (asyncResult){});
      ```
    name: 'setDataAsync(data, callback)'
    fullName: 'setDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Os dados a serem definidos na seleção atual. Possíveis tipos de dados por host:

            Cadeia de caracteres: Excel na Web e no Windows e no Word somente na Web e no Windows

            matriz de matrizes: somente Excel e Word

            `TableData`<!-- -->: Somente Excel e Word

            HTML: Word somente na Web e no Windows

            Office Open XML: somente Word
          type:
            - 'office!Office.Binding#setDataAsync~2:complex'
        - id: callback
          description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#setDataAsync~3:complex'
  - uid: 'office!Office.Binding#type:member'
    summary: Obtém o tipo de associação.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Office.BindingType;'
      return:
        type:
          - 'office!Office.BindingType:enum'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
              write(asyncResult.value.type); 
          }) 

          // Function that writes to a div with id='message' on the page. 
          function write(message){ 
              document.getElementById('message').innerText += message;  
          }
          ```
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.Binding#addHandlerAsync~0:complex'
    name: '(result: Office.AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#addHandlerAsync~1:complex'
    name: '(result: Office.AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document:interface'
    name: Office.Document
  - uid: 'office!Office.GetBindingDataOptions:interface'
    name: GetBindingDataOptions
  - uid: 'office!Office.Binding#getDataAsync~0:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.Binding#getDataAsync~1:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.Binding#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#setDataAsync~0:complex'
    name: TableData | any
    fullName: Office.TableData | any
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any'
        fullName: ' | any'
  - uid: 'office!Office.SetBindingDataOptions:interface'
    name: SetBindingDataOptions
  - uid: 'office!Office.Binding#setDataAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#setDataAsync~2:complex'
    name: TableData | any
    fullName: Office.TableData | any
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any'
        fullName: ' | any'
  - uid: 'office!Office.Binding#setDataAsync~3:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.BindingType:enum'
    name: Office.BindingType