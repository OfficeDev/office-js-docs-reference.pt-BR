### YamlMime:TSType
name: Office.Document
uid: office!Office.Document:interface
package: office!
fullName: Office.Document
summary: Uma classe abstrata que representa o documento com o qual o suplemento está interagindo.
remarks: '**Hosts**: Excel, PowerPoint, Project, Word'
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bindings
  uid: office!Office.Document#bindings:member
  package: office!
  fullName: bindings
  summary: Obtém um objeto que fornece acesso às associações definidas no documento.
  remarks: "Você não instaurá-lo diretamente no script. Para chamar membros do objeto Document para interagir com o documento ou planilha atual, use `Office.context.document` no script.\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction displayAllBindings() {\n    Office.context.document.bindings.getAllAsync(function (asyncResult) {\n        var bindingString = '';\n        for (var i in asyncResult.value) {\n            bindingString += asyncResult.value[i].id + '\\n';\n        }\n        write('Existing bindings: ' + bindingString);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bindings: Bindings;'
    return:
      type: <xref uid="office!Office.Bindings:interface" />
- name: customXmlParts
  uid: office!Office.Document#customXmlParts:member
  package: office!
  fullName: customXmlParts
  summary: Obtém um objeto que representa as partes XML personalizadas no documento.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'customXmlParts: CustomXmlParts;'
    return:
      type: <xref uid="office!Office.CustomXmlParts:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction getCustomXmlParts(){\n    Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {\n        write('Retrieved ' + asyncResult.value.length + ' custom XML parts');\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: mode
  uid: office!Office.Document#mode:member
  package: office!
  fullName: mode
  summary: Obtém o modo em que o documento está.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'mode: DocumentMode;'
    return:
      type: <xref uid="office!Office.DocumentMode:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction displayDocumentMode() {\n    write(Office.context.document.mode);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following example initializes the add-in and then gets properties of the\n// Document object that are available in the context of a Project document.\n// A Project document is the opened, active project. To access members of the\n// ProjectDocument object, use the Office.context.document object as shown in\n// the code examples for ProjectDocument methods and events.\n// The example assumes your add-in has a reference to the jQuery library and\n// that the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information about the document.\n            showDocumentProperties();\n        });\n    };\n\n    // Get the document mode and the URL of the active project.\n    function showDocumentProperties() {\n        var output = String.format(\n            'The document mode is {0}.<br/>The URL of the active project is {1}.',\n            Office.context.document.mode,\n            Office.context.document.url);\n        $('#message').html(output);\n    }\n})();\n```"
- name: settings
  uid: office!Office.Document#settings:member
  package: office!
  fullName: settings
  summary: Obtém um objeto que representa as configurações personalizadas salvas do suplemento de painel de tarefas ou conteúdo para o documento atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'settings: Settings;'
    return:
      type: <xref uid="office!Office.Settings:interface" />
- name: url
  uid: office!Office.Document#url:member
  package: office!
  fullName: url
  summary: Obtém a URL do documento aberto atualmente pelo aplicativo host. Retorna null se a URL não estiver disponível.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'url: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction displayDocumentUrl() {\n    write(Office.context.document.url);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Document#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Adiciona um manipulador de eventos para um evento de objeto Document.
  remarks: >-
    **Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    Você pode adicionar vários manipuladores de eventos para o eventType especificado, desde que o nome de cada função de manipulador de eventos seja exclusivo.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Para um evento de objeto Document, o parâmetro eventType pode ser especificado como `Office.EventType.Document.SelectionChanged` ou `Office.EventType.Document.ActiveViewChanged`<!-- -->ou o valor de texto correspondente dessa enumeração.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: A função de manipulador de eventos a ser acrescentada, cujo único parâmetro é do [ tipoOffice.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Obrigatório.
      type: any
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Document#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Adiciona um manipulador de eventos para um evento de objeto Document.
  remarks: "**Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)\n\nVocê pode adicionar vários manipuladores de eventos para o eventType especificado, desde que o nome de cada função de manipulador de eventos seja exclusivo.\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following example adds an event handler for the SelectionChanged event of a document\nfunction addSelectionChangedEventHandler() {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);\n}\n\nfunction MyHandler(eventArgs) {\n    write('Event raised: ' + eventArgs.type);\n    doSomethingWithDocument(eventArgs.document);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example adds a handler for the ResourceSelectionChanged event.\n// When the resource selection changes in the document, it gets the GUID of the selected resource.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ResourceSelectionChanged,\n                getResourceGuid);\n        });\n    };\n\n    // Get the GUID of the selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ResourceSelectionChanged\n// event handler in a Project add-in, see \"Create your first task pane add-in\n// for Project 2013 by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example adds a handler for the TaskSelectionChanged event.\n// When the task selection changes in the document, it gets the GUID of the\n// selected task.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.TaskSelectionChanged,\n                getTaskGuid);\n            getTaskGuid();\n        });\n    };\n\n    // Get the GUID of the selected task and display it in the add-in.\n    function getTaskGuid() {\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```\n```javascript\n// The following code example adds a handler for the ViewSelectionChanged\n// event. When the active view changes, it gets the name and type of the active view.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the name and type of the active view and display it in the add-in.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, result.value.viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For an example that shows how to use a ViewSelectionChanged event handler in a\n// Project add-in, see \"Create your first task pane add-in for Project 2013 by\n// using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.\n// When the active view changes, the handler checks the view type. It enables a button if the view is a resource\n// view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected\n// resource and displays it in the add-in.\n// The example assumes that your add-in has a reference to the jQuery library and that the following page controls\n// are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" disabled=\"disabled\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            // Add a ViewSelectionChanged event handler.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            $('#get-info').click(getResourceGuid);\n\n            // This example calls the handler on page load to get the active view\n            // of the default page.\n            getActiveView();\n        });\n    };\n\n    // Activate the button based on the active view type of the document.\n    // This is the ViewSelectionChanged event handler.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var viewType = result.value.viewType;\n                    if (viewType == 6 ||   // ResourceForm\n                        viewType == 7 ||   // ResourceSheet\n                        viewType == 8 ||   // ResourceGraph\n                        viewType == 15) {  // ResourceUsage\n                        $('#get-info').removeAttr('disabled');\n                    }\n                    else {\n                        $('#get-info').attr('disabled', 'disabled');\n                    }\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    // Get the GUID of the currently selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html('Resource GUID: ' + result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,\n// see \"Create your first task pane add-in for Project by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Para um evento de objeto Document, o parâmetro eventType pode ser especificado como `Office.EventType.Document.SelectionChanged` ou `Office.EventType.Document.ActiveViewChanged`<!-- -->ou o valor de texto correspondente dessa enumeração.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: A função de manipulador de eventos a ser acrescentada, cujo único parâmetro é do [ tipoOffice.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Obrigatório.
      type: any
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(options, callback)
  uid: office!Office.Document#getActiveViewAsync:member(1)
  package: office!
  fullName: getActiveViewAsync(options, callback)
  summary: Retorna o estado do modo de exibição atual da apresentação (edição ou leitura).
  remarks: >-
    **Conjunto de requisitos**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Pode disparar um evento quando o modo de exibição for alterado.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o estado da exibição atual da apresentação. O valor retornado pode ser "edit" ou "leitura". "edit" corresponde a qualquer uma das exibições nas quais você pode editar slides, como Normal ou Modo de Exibição de Contorno. "read" corresponde a Apresentação de Slides ou Exibição de Leitura.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(callback)
  uid: office!Office.Document#getActiveViewAsync:member(2)
  package: office!
  fullName: getActiveViewAsync(callback)
  summary: Retorna o estado do modo de exibição atual da apresentação (edição ou leitura).
  remarks: >-
    **Conjunto de requisitos**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Pode disparar um evento quando o modo de exibição for alterado.


    #### <a name="examples"></a>Exemplos


    ```javascript

    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o estado da exibição atual da apresentação. O valor retornado pode ser "edit" ou "leitura". "edit" corresponde a qualquer uma das exibições nas quais você pode editar slides, como Normal ou Modo de Exibição de Contorno. "read" corresponde a Apresentação de Slides ou Exibição de Leitura.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, options, callback)
  uid: office!Office.Document#getFileAsync:member(1)
  package: office!
  fullName: getFileAsync(fileType, options, callback)
  summary: Retorna o arquivo de documento inteiro em fatias de até 4194304 bytes (4 MB). Para os complementos no iPad, há suporte para até 65536 (64 KB). Observe que a especificação do tamanho de fatia do arquivo acima do limite permitido resultará em uma falha de “Erro interno”.
  remarks: "**Conjuntos de requisitos**:\n\n- [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (ao usar `Office.FileType.Compressed`<!-- -->)\n\n- [Arquivo](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)\n\n- [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (ao usar `Office.FileType.Text`<!-- -->)\n\nPara os complementos em execução em aplicativos host do Office diferentes do Office no iPad, o método oferece suporte para obter arquivos em fatias de até `getFileAsync` 4194304 bytes (4 MB). Para os complementos em execução em aplicativos do Office no iPad, o método dá suporte à obter arquivos em fatias de `getFileAsync` até 65536 (64 KB).\n\nO `fileType` parâmetro pode ser especificado usando a enumeração [Office.FileType](xref:office!Office.FileType:enum) ou valores de texto. Mas os valores possíveis variam com o host:\n\n*FileTypes com suporte, por plataforma* <table> <tr><th> </th><th> Office no Windows </th><th> Office na Web </th><th> Office no iPad </th><th> Office no Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Word </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following example gets the document in Office Open XML (\"compressed\") format in 65536 bytes (64 KB) slices.\n// Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.\nfunction getDocumentAsCompressed() {\n    Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, \n        function (result) {\n            if (result.status == \"succeeded\") {\n                // If the getFileAsync call succeeded, then\n                // result.value will return a valid File Object.\n                var myFile = result.value;\n                var sliceCount = myFile.sliceCount;\n                var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];\n                app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n\n                // Get the file slices.\n                getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n            else {\n                app.showNotification(\"Error:\", result.error.message);\n            }\n    });\n}\n\nfunction getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {\n    file.getSliceAsync(nextSlice, function (sliceResult) {\n        if (sliceResult.status == \"succeeded\") {\n            if (!gotAllSlices) { // Failed to get all slices, no need to continue.\n                return;\n            }\n\n            // Got one slice, store it in a temporary array.\n            // (Or you can do something else, such as\n            // send it to a third-party server.)\n            docdataSlices[sliceResult.value.index] = sliceResult.value.data;\n            if (++slicesReceived == sliceCount) {\n              // All slices have been received.\n              file.closeAsync();\n              onGotAllSlices(docdataSlices);\n            }\n            else {\n                getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n        }\n            else {\n                gotAllSlices = false;\n                file.closeAsync();\n                app.showNotification(\"getSliceAsync Error:\", sliceResult.error.message);\n            }\n    });\n}\n\nfunction onGotAllSlices(docdataSlices) {\n    var docdata = [];\n    for (var i = 0; i < docdataSlices.length; i++) {\n        docdata = docdata.concat(docdataSlices[i]);\n    }\n\n    var fileContent = new String();\n    for (var j = 0; j < docdata.length; j++) {\n        fileContent += String.fromCharCode(docdata[j]);\n    }\n\n    // Now all the file content is stored in 'fileContent' variable,\n    // you can do something with it, such as print, fax...\n}\n\n// The following example gets the document in PDF format.\nOffice.context.document.getFileAsync(Office.FileType.Pdf,\n    function(result) {\n        if (result.status == \"succeeded\") {\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n            // Now, you can call getSliceAsync to download the files,\n            // as described in the previous code segment (compressed format).\n            \n            myFile.closeAsync();\n        }\n        else {\n            app.showNotification(\"Error:\", result.error.message);\n        }\n}\n);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: O formato no qual o arquivo será retornado
      type: <xref uid="office!Office.FileType:enum" />
    - id: options
      description: Fornece opções para definir o tamanho das fatias nas que o documento será dividido.
      type: <xref uid="office!Office.GetFileOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o objeto File.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, callback)
  uid: office!Office.Document#getFileAsync:member(2)
  package: office!
  fullName: getFileAsync(fileType, callback)
  summary: Retorna o arquivo de documento inteiro em fatias de até 4194304 bytes (4 MB). Para os complementos no iPad, há suporte para até 65536 (64 KB). Observe que a especificação do tamanho de fatia do arquivo acima do limite permitido resultará em uma falha de “Erro interno”.
  remarks: >-
    **Conjuntos de requisitos**:


    - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (ao usar `Office.FileType.Compressed`<!-- -->)


    - [Arquivo](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


    - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (ao usar `Office.FileType.Text`<!-- -->)


    Para os complementos em execução em aplicativos host do Office diferentes do Office no iPad, o método oferece suporte para obter arquivos em fatias de até `getFileAsync` 4194304 bytes (4 MB). Para os complementos em execução no Office em aplicativos iPad, o método dá suporte à obter arquivos em fatias de `getFileAsync` até 65536 (64 KB).


    O `fileType` parâmetro pode ser especificado usando a enumeração [Office.FileType](xref:office!Office.FileType:enum) ou valores de texto. Mas os valores possíveis variam com o host:


    *FileTypes com suporte, por plataforma* <table> <tr><th> </th><th> Office no Windows </th><th> Office na Web </th><th> Office no iPad </th><th> Office no Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Word </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: O formato no qual o arquivo será retornado
      type: <xref uid="office!Office.FileType:enum" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o objeto File.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(options, callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(1)
  package: office!
  fullName: getFilePropertiesAsync(options, callback)
  summary: Obtém as propriedades de arquivo do documento atual.
  remarks: >-
    **Conjuntos de requisitos**: [Não em um conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    Você obter a URL do arquivo com a propriedade url `asyncResult.value.url`<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado são as propriedades do arquivo (com a URL encontrada em `asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(2)
  package: office!
  fullName: getFilePropertiesAsync(callback)
  summary: Obtém as propriedades de arquivo do documento atual.
  remarks: >-
    **Conjuntos de requisitos**: [Não em um conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    Você obter a URL do arquivo com a propriedade url `asyncResult.value.url`<!-- -->.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // To read the URL of the current file, you need to write a callback function that returns the URL.

    // The following example shows how to:

    // 1. Pass an anonymous callback function that returns the value of the file's URL

    //    to the callback parameter of the getFilePropertiesAsync method.

    // 2. Display the value on the add-in's page.

    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: callback
      description: Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado são as propriedades do arquivo (com a URL encontrada em `asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(options, callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(1)
  package: office!
  fullName: getMaxResourceIndexAsync(options, callback)
  summary: >-
    Somente documentos do projeto. Obter o índice máximo da coleção de recursos no projeto atual.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o número de índice mais alto na coleção de recursos do projeto atual.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(2)
  package: office!
  fullName: getMaxResourceIndexAsync(callback)
  summary: >-
    Somente documentos do projeto. Obter o índice máximo da coleção de recursos no projeto atual.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o número de índice mais alto na coleção de recursos do projeto atual.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection \n// of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync\n// method to get each resource GUID. The example assumes that your add-in has a reference to the \n// jQuery library and that the following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getMaxTaskIndexAsync(options, callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(1)
  package: office!
  fullName: getMaxTaskIndexAsync(options, callback)
  summary: >-
    Somente documentos do projeto. Obter o índice máximo da coleção de tarefas no projeto atual.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A propriedade do resultado é o número de índice mais alto na coleção de tarefas do projeto `value` atual.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxTaskIndexAsync(callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(2)
  package: office!
  fullName: getMaxTaskIndexAsync(callback)
  summary: >-
    Somente documentos do projeto. Obter o índice máximo da coleção de tarefas no projeto atual.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A propriedade do resultado é o número de índice mais alto na coleção de tarefas do projeto `value` atual.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the maximum index\n// of the collection of tasks in the current project. Then it uses the returned value\n// with the getTaskByIndexAsync method to get each task GUID.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getProjectFieldAsync(fieldId, options, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(1)
  package: office!
  fullName: getProjectFieldAsync(fieldId, options, callback)
  summary: Somente documentos do projeto. Obter o campo Projeto (Ex. ProjectWebAccessURL).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Campos de nível do projeto.
      type: number
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém a `fieldValue` propriedade, que representa o valor do campo especificado.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getProjectFieldAsync(fieldId, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(2)
  package: office!
  fullName: getProjectFieldAsync(fieldId, callback)
  summary: Somente documentos do projeto. Obter o campo Projeto (Ex. ProjectWebAccessURL).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Campos de nível do projeto.
      type: number
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém a `fieldValue` propriedade, que representa o valor do campo especificado.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example gets the values of three specified fields for the active project, \n// and then displays the values in the add-in.\n// The example calls getProjectFieldAsync recursively, after the previous call returns successfully.\n// It also tracks the calls to determine when all calls are sent.\n// The example assumes your add-in has a reference to the jQuery library and that the \n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information for the active project.\n            getProjectInformation();\n        });\n    };\n\n    // Get the specified fields for the active project.\n    function getProjectInformation() {\n        var fields =\n            [Office.ProjectProjectFields.Start, \n             Office.ProjectProjectFields.Finish, \n             Office.ProjectProjectFields.GUID];\n        var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == fields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n            else {\n                Office.context.document.getProjectFieldAsync(\n                    fields[index],\n                    function (result) {\n\n                        // If the call is successful, get the field value and then get the next field.\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceByIndexAsync(resourceIndex, options, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(1)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, options, callback)
  summary: >-
    Somente documentos do projeto. Obter o GUID do recurso que tem o índice especificado na coleção de recursos.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: O índice do recurso na coleção de recursos do projeto.
      type: number
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceByIndexAsync(resourceIndex, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(2)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, callback)
  summary: >-
    Somente documentos do projeto. Obter o GUID do recurso que tem o índice especificado na coleção de recursos.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: O índice do recurso na coleção de recursos do projeto.
      type: number
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource\n// collection, and then calls getResourceByIndexAsync to get the GUID for each resource.\n// The example assumes that your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceFieldAsync(resourceId, fieldId, options, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(1)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, options, callback)
  summary: Somente documentos do projeto. Obter campo de recurso para a ID de recurso fornecida. (Ex.ResourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Uma cadeia de caracteres ou um valor da ID do Recurso.
      type: string
    - id: fieldId
      description: Campos de Recursos.
      type: number
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceFieldAsync(resourceId, fieldId, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(2)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, callback)
  summary: Somente documentos do projeto. Obter campo de recurso para a ID de recurso fornecida. (Ex.ResourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Uma cadeia de caracteres ou um valor da ID do Recurso.
      type: string
    - id: fieldId
      description: Campos de Recursos.
      type: number
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource\n// that's currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(1)
  package: office!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: Lê os dados contidos na seleção atual no documento.
  remarks: "**Conjuntos de requisitos**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (ao usar `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar `Office.CoercionType.Table`<!-- -->)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar `Office.CoercionType.Text`<!-- -->)\n\nNa função de retorno de chamada passada para o método getSelectedDataAsync, você pode usar as propriedades do objeto AsyncResult para retornar as informações a seguir.\n\n<table> <tr> <th>Propriedade</th> <th>Use para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Sempre retorna indefinido porque não há nenhum objeto ou dados a ser recuperado.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar o sucesso ou falha da operação.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Acessar um objeto Error que fornecerá informações de erro se a operação tiver falhado.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Um item definido pelo usuário de qualquer tipo que é retornado no objeto AsyncResult sem ser alterado.</td> </tr> </table>\n\nOs valores possíveis para o [parâmetro Office.CoercionType](xref:office!Office.CoercionType:enum) variam de acordo com o host.\n\n<table> <tr> <th>Host</th> <th>coercionType suportado</th> </tr> <tr> <td>Excel, PowerPoint, Project e Word</td> <td>`Office.CoercionType.Text` (cadeia de caracteres)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Matrix` (matriz de matrizes)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Table` (Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint na Web e no Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint e Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following example uses the getSelectedDataAsync method of the Document object to retrieve the\n// user's current selection as text, and then display it in the add-in's page.\n\n// Display the user's current selection.\nfunction showSelection() {\n    Office.context.document.getSelectedDataAsync(\n        \"text\",                        // coercionType\n        {valueFormat: \"unformatted\",   // valueFormat\n        filterType: \"all\"},            // filterType\n        function (result) {            // callback\n            var dataValue; \n            dataValue = result.value;\n            write('Selected data is: ' + dataValue);\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To read the value of the current selection, you need to write a callback function that reads the selection.\n// The following example shows how to:\n// 1. Pass an anonymous callback function that reads the value of the current selection\n//    to the callback parameter of the getSelectedDataAsync method.\n// 2. Read the selection as text, unformatted, and not filtered.\n// 3. Display the value on the add-in's page.\nfunction getText() {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n        { valueFormat: \"unformatted\", filterType: \"all\" },\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            } \n            else {\n                // Get selected data.\n                var dataValue = asyncResult.value; \n                write('Selected data is ' + dataValue);\n            }            \n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example gets the values of the selected cells. It uses the optional\n// asyncContext parameter to pass some text to the callback function.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getSelectedText);\n        });\n    };\n\n    // Get the text from the selected cells in the document, and display it in the add-in.\n    function getSelectedText() {\n        Office.context.document.getSelectedDataAsync(\n            Office.CoercionType.Text,\n            {asyncContext: 'Some related info'},\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'Selected text: {0}<br/>Passed info: {1}',\n                        result.value, result.asyncContext);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: O tipo de estrutura de dados a ser retornada. Consulte a seção comentários para os tipos de coerção com suporte de cada host.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: options
      description: Fornece opções para personalizar quais dados são retornados e como eles são formatados.
      type: <xref uid="office!Office.GetSelectedDataOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado são os dados da seleção atual. Isso é retornado na estrutura de dados ou formato especificado com o parâmetro coercionType. (Consulte Comentários para obter mais informações sobre a coerção de dados.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(2)
  package: office!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: Lê os dados contidos na seleção atual no documento.
  remarks: >-
    **Conjuntos de requisitos**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (ao usar `Office.CoercionType.Html`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar `Office.CoercionType.Table`<!-- -->)


    - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar `Office.CoercionType.Text`<!-- -->)


    Na função de retorno de chamada passada para o método getSelectedDataAsync, você pode usar as propriedades do objeto AsyncResult para retornar as informações a seguir.


    <table> <tr> <th>Propriedade</th> <th>Use para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Sempre retorna indefinido porque não há nenhum objeto ou dados a ser recuperado.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar o sucesso ou falha da operação.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Acessar um objeto Error que fornecerá informações de erro se a operação tiver falhado.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Um item definido pelo usuário de qualquer tipo que é retornado no objeto AsyncResult sem ser alterado.</td> </tr> </table>


    Os valores possíveis para o [parâmetro Office.CoercionType](xref:office!Office.CoercionType:enum) variam de acordo com o host.


    <table> <tr> <th>Host</th> <th>coercionType suportado</th> </tr> <tr> <td>Excel, PowerPoint, Project e Word</td> <td>`Office.CoercionType.Text` (cadeia de caracteres)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Matrix` (matriz de matrizes)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Table` (Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint na Web e no Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint e Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: O tipo de estrutura de dados a ser retornada. Consulte a seção comentários para os tipos de coerção com suporte de cada host.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado são os dados da seleção atual. Isso é retornado na estrutura de dados ou formato especificado com o parâmetro coercionType. (Consulte Comentários para obter mais informações sobre a coerção de dados.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(options, callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(1)
  package: office!
  fullName: getSelectedResourceAsync(options, callback)
  summary: Somente documentos do projeto. Obter a ID do Recurso selecionada atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(2)
  package: office!
  fullName: getSelectedResourceAsync(callback)
  summary: Somente documentos do projeto. Obter a ID do Recurso selecionada atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's \n// currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page controls are\n// defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedTaskAsync(options, callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(1)
  package: office!
  fullName: getSelectedTaskAsync(options, callback)
  summary: Somente documentos do projeto. Obter a ID da Tarefa selecionada atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedTaskAsync(callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(2)
  package: office!
  fullName: getSelectedTaskAsync(callback)
  summary: Somente documentos do projeto. Obter a ID da Tarefa selecionada atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID do recurso como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets task properties by calling getTaskAsync.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedViewAsync(options, callback)
  uid: office!Office.Document#getSelectedViewAsync:member(1)
  package: office!
  fullName: getSelectedViewAsync(options, callback)
  summary: Somente documentos do projeto. Obter o tipo de exibição selecionado atual (Ex. Gantt) e View Name.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém as seguintes propriedades: - O nome do `viewName` exibição, como uma constante ProjectViewTypes. `viewType` - O tipo de exibição, como o valor inteiro de uma constante ProjectViewTypes.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedViewAsync(callback)
  uid: office!Office.Document#getSelectedViewAsync:member(2)
  package: office!
  fullName: getSelectedViewAsync(callback)
  summary: Somente documentos do projeto. Obter o tipo de exibição selecionado atual (Ex. Gantt) e View Name.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém as seguintes propriedades: - O nome do `viewName` exibição, como uma constante ProjectViewTypes. `viewType` - O tipo de exibição, como o valor inteiro de uma constante ProjectViewTypes.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls adds a ViewSelectionChanged event handler that\n// calls getSelectedViewAsync to get the name and type of the active view in the document.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the active view's name and type.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskAsync(taskId, options, callback)
  uid: office!Office.Document#getTaskAsync:member(1)
  package: office!
  fullName: getTaskAsync(taskId, options, callback)
  summary: Somente documentos do projeto. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Uma cadeia de caracteres ou um valor da ID da tarefa.
      type: string
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém as seguintes propriedades: - O nome da `taskName` tarefa. `wssTaskId` - A ID da tarefa na lista de tarefas sincronizada do SharePoint. Se o projeto não estiver sincronizado com uma lista de tarefas do SharePoint, o valor será 0. `resourceNames` - A lista separada por vírgulas dos nomes dos recursos atribuídos à tarefa.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskAsync(taskId, callback)
  uid: office!Office.Document#getTaskAsync:member(2)
  package: office!
  fullName: getTaskAsync(taskId, callback)
  summary: Somente documentos do projeto. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Uma cadeia de caracteres ou um valor da ID da tarefa.
      type: string
    - id: callback
      description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém as seguintes propriedades: - O nome da `taskName` tarefa. `wssTaskId` - A ID da tarefa na lista de tarefas sincronizada do SharePoint. Se o projeto não estiver sincronizado com uma lista de tarefas do SharePoint, o valor será 0. `resourceNames` - A lista separada por vírgulas dos nomes dos recursos atribuídos à tarefa.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the task GUID of the currently\n// selected task. Then it calls getTaskAsync to get the properties for the task that are\n// available from the JavaScript API for Office.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskByIndexAsync(taskIndex, options, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(1)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, options, callback)
  summary: >-
    Somente documentos do projeto. Obter o GUID da tarefa que tem o índice especificado na coleção de tarefas.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: O índice da tarefa no conjunto de tarefas do projeto.
      type: number
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID da tarefa como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskByIndexAsync(taskIndex, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(2)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, callback)
  summary: >-
    Somente documentos do projeto. Obter o GUID da tarefa que tem o índice especificado na coleção de tarefas.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: O índice da tarefa no conjunto de tarefas do projeto.
      type: number
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é o GUID da tarefa como uma cadeia de caracteres.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the\n// maximum index in the project's task collection, and then\n// calls getTaskByIndexAsync to get the GUID for each task.\n// The example assumes that your add-in has a reference to the\n// jQuery library and that the following page controls are defined\n// in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskFieldAsync(taskId, fieldId, options, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(1)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, options, callback)
  summary: Somente documentos do projeto. Obter o campo de tarefas para a ID da tarefa fornecida. (Ex. StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Uma cadeia de caracteres ou um valor da ID da tarefa.
      type: string
    - id: fieldId
      description: Campos de Tarefas.
      type: number
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém a `fieldValue` propriedade, que representa o valor do campo especificado.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskFieldAsync(taskId, fieldId, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(2)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, callback)
  summary: Somente documentos do projeto. Obter o campo de tarefas para a ID da tarefa fornecida. (Ex. StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Uma cadeia de caracteres ou um valor da ID da tarefa.
      type: string
    - id: fieldId
      description: Campos de Tarefas.
      type: number
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado contém a `fieldValue` propriedade, que representa o valor do campo especificado.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected task.\n    function getTaskFields(taskGuid) {\n        var output = '';\n        var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];\n        var fieldValues = ['Priority: ', '% Complete: '];\n        var index = 0;\n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // Get the field value. If the call is successful, then get the next field.\n            else {\n                Office.context.document.getTaskFieldAsync(\n                    taskGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getWSSUrlAsync(options, callback)
  uid: office!Office.Document#getWSSUrlAsync:member(1)
  package: office!
  fullName: getWSSUrlAsync(options, callback)
  summary: Somente documentos do projeto. Obter a url WSS e o nome da lista para a Lista de Tarefas, o MPP também é sincronizado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A propriedade do resultado contém as seguintes propriedades: - o nome da lista de tarefas sincronizada `value` `listName` do SharePoint. `serverUrl` - a URL da lista de tarefas sincronizada do SharePoint.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getWSSUrlAsync(callback)
  uid: office!Office.Document#getWSSUrlAsync:member(2)
  package: office!
  fullName: getWSSUrlAsync(callback)
  summary: Somente documentos do projeto. Obter a url WSS e o nome da lista para a Lista de Tarefas, o MPP também é sincronizado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A propriedade do resultado contém as seguintes propriedades: - o nome da lista de tarefas sincronizada `value` `listName` do SharePoint. `serverUrl` - a URL da lista de tarefas sincronizada do SharePoint.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, options, callback)
  uid: office!Office.Document#goToByIdAsync:member(1)
  package: office!
  fullName: goToByIdAsync(id, goToType, options, callback)
  summary: Vai para o objeto ou local especificado no documento.
  remarks: >-
    **Conjunto de requisitos**: [Não em um conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    O PowerPoint não dá suporte ao método goToByIdAsync em Exibições Mestras.


    O comportamento causado pela opção selectionMode varia de acordo com o host:


    No Excel: `Office.SelectionMode.Selected` seleciona todo o conteúdo na associação ou item nomeado. Office.SelectionMode.None para associações de texto, seleciona a célula, para associações, de matriz, associações de tabela e itens nomeados, seleciona a primeira célula de dados (não a primeira célula na linha de cabeçalho para tabelas).


    No PowerPoint: `Office.SelectionMode.Selected` seleciona o título do slide ou a primeira caixa de texto no slide. `Office.SelectionMode.None` não seleciona nada.


    No Word: `Office.SelectionMode.Selected` seleciona todo o conteúdo na associação. Office.SelectionMode.None para associações de texto, move o cursor para o início do texto, para associações de matriz e associações de tabela, seleciona a primeira célula de dados (não a primeira célula na linha de cabeçalho para tabelas).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: O identificador do objeto ou local para o qual ir.
      type: string | number
    - id: goToType
      description: O tipo de local para o qual ir.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: options
      description: Fornece opções para selecionar o local para o que é navegado.
      type: <xref uid="office!Office.GoToByIdOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é a exibição atual.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, callback)
  uid: office!Office.Document#goToByIdAsync:member(2)
  package: office!
  fullName: goToByIdAsync(id, goToType, callback)
  summary: Vai para o objeto ou local especificado no documento.
  remarks: >-
    **Conjunto de requisitos**: [Não em um conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    O PowerPoint não dá suporte ao método goToByIdAsync em Exibições Mestras.


    O comportamento causado pela opção selectionMode varia de acordo com o host:


    No Excel: `Office.SelectionMode.Selected` seleciona todo o conteúdo na associação ou item nomeado. Office.SelectionMode.None para associações de texto, seleciona a célula, para associações, de matriz, associações de tabela e itens nomeados, seleciona a primeira célula de dados (não a primeira célula na linha de cabeçalho para tabelas).


    No PowerPoint: `Office.SelectionMode.Selected` seleciona o título do slide ou a primeira caixa de texto no slide. `Office.SelectionMode.None` não seleciona nada.


    No Word: `Office.SelectionMode.Selected` seleciona todo o conteúdo na associação. Office.SelectionMode.None para associações de texto, move o cursor para o início do texto, para associações de matriz e associações de tabela, seleciona a primeira célula de dados (não a primeira célula na linha de cabeçalho para tabelas).


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Go to a binding by id (Word and Excel)

    // The following example shows how to:

    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

    // 2. Specify that binding as the binding to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value on the add-in's page.

    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to a table in a spreadsheet (Excel)

    // The following example shows how to:

    // 1. Specify a table by name as the table to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to the currently selected slide by id (PowerPoint)

    // The following example shows how to:

    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

    // 2. Specify the returned id as the slide to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value of the stringified JSON object returned by asyncResult.value,

    //    which contains information about the selected slides, on the add-in's page.

    var firstSlideId = 0;

    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }


    // Go to slide by index (PowerPoint)

    // The following example shows how to:

    // 1. Specify the index of the first, last, previous, or next slide to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: O identificador do objeto ou local para o qual ir.
      type: string | number
    - id: goToType
      description: O tipo de local para o qual ir.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A `value` propriedade do resultado é a exibição atual.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Document#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: Remove um manipulador de eventos para o tipo de evento especificado.
  remarks: '**Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: O tipo de evento. Para documento pode ser 'Document.SelectionChanged' ou 'Document.ActiveViewChanged'.
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: Fornece opções para determinar quais manipuladores ou manipuladores de eventos são removidos.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Document#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: Remove um manipulador de eventos para o tipo de evento especificado.
  remarks: >-
    **Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    #### <a name="examples"></a>Exemplos


    ```javascript

    // The following example removes the event handler named 'MyHandler'.

    function removeSelectionChangedEventHandler() {
        Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
    }


    function MyHandler(eventArgs) {
        doSomethingWithDocument(eventArgs.document);
    }

    ```

    ```javascript

    // The following code example uses addHandlerAsync to add an event handler for the

    // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

    // When a resource is selected in a resource view, the handler displays the

    // resource GUID. When the handler is removed, the GUID is not displayed.

    // The example assumes that your add-in has a reference to the jQuery library and

    // that the following page control is defined in the content div in the page body:

    // <input id="remove-handler" type="button" value="Remove handler" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ResourceSelectionChanged,
                    getResourceGuid);
                $('#remove-handler').click(removeEventHandler);
            });
        };

        // Remove the event handler.
        function removeEventHandler() {
            Office.context.document.removeHandlerAsync(
                Office.EventType.ResourceSelectionChanged,
                {handler:getResourceGuid,
                asyncContext:'The handler is removed.'},
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#remove-handler').attr('disabled', 'disabled');
                        $('#message').html(result.asyncContext);
                    }
                }
            );
        }

        // Get the GUID of the currently selected resource and display it in the add-in.
        function getResourceGuid() {
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#message').html('Resource GUID: ' + result.value);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: O tipo de evento. Para documento pode ser 'Document.SelectionChanged' ou 'Document.ActiveViewChanged'.
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(1)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  summary: >-
    Somente documentos do projeto. De definir o campo de recursos para a ID de recurso especificada.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Uma cadeia de caracteres ou um valor da ID do Recurso.
      type: string
    - id: fieldId
      description: Campos de Recursos.
      type: number
    - id: fieldValue
      description: Valor do campo de destino.
      type: string | number | boolean | object
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(2)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  summary: >-
    Somente documentos do projeto. De definir o campo de recursos para a ID de recurso especificada.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Uma cadeia de caracteres ou um valor da ID do Recurso.
      type: string
    - id: fieldId
      description: Campos de Recursos.
      type: number
    - id: fieldValue
      description: Valor do campo de destino.
      type: string | number | boolean | object
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's\n// currently selected in a resource view. Then it sets two resource field values by calling\n// setResourceFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync\n// method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource, and then get the resource fields.\n    function setResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                setResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected resource.\n    function setResourceFields(resourceGuid) {\n        var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];\n        var fieldValues = [.28, 'Notes for the resource.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setResourceFieldAsync(\n                resourceGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: setSelectedDataAsync(data, options, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(1)
  package: office!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: Grava os dados especificados na seleção atual.
  remarks: "**Conjuntos de requisitos**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->, (ao usar `Office.CoercionType.Html`<!-- -->)\n\n- [ImageCoercion 1.1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (ao usar `Office.CoercionType.Image`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar `Office.CoercionType.Table`<!-- -->)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar `Office.CoercionType.Text`<!-- -->)\n\n- [ImageCoercion 1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (ao usar `Office.CoercionType.XmlSvg`<!-- -->)\n\n**Comportamentos específicos do aplicativo**\n\nAs seguintes ações específicas do aplicativo se aplicam ao escrever dados em uma seleção.\n\n<table> <tr> <td>Word</td> <td>Se não houver seleção e o ponto de inserção estiver em um local válido, o especificado será `data` inserido no ponto de inserção</td> <td>Se `data` for uma cadeia de caracteres, o texto especificado será inserido.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for uma matriz de matrizes (\"matriz\") ou um objeto TableData, uma nova tabela do Word será inserida.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for HTML, o HTML especificado será inserido. (**Importante**: se qualquer um dos HTML inseridos for inválido, o Word não levantará um erro. O Word inserirá o máximo de HTML possível e omiti todos os dados inválidos).</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for o Office Open XML, o XML especificado será inserido.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for um fluxo de imagem codificado base64, a imagem especificada será inserida.</td> </tr> <tr> <td></td> <td>Se houver uma seleção</td> <td>Ele será substituído pelas regras especificadas `data` seguindo as mesmas regras acima.</td> </tr> <tr> <td></td> <td>Inserir imagens</td> <td>As imagens inseridas são colocadas em linha. Os parâmetros imageLeft e imageTop são ignorados. A taxa de proporção da imagem sempre está bloqueada. Se apenas um dos parâmetros imageWidth e imageHeight for fornecido, o outro valor será automaticamente dimensionado para manter a taxa de proporção original.</td> </tr>\n\n<tr> <td>Excel</td> <td>Se uma única célula estiver selecionada</td> <td>Se `data` for uma cadeia de caracteres, o texto especificado será inserido como o valor da célula atual.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for uma matriz de matrizes (\"matriz\"), o conjunto especificado de linhas e colunas será inserido, se nenhum outro dado nas células ao redor for substituído.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for um objeto TableData, uma nova tabela do Excel com o conjunto especificado de linhas e headers será inserida, se nenhum outro dado nas células ao redor for substituído.</td> </tr> <tr> <td></td> <td>Se várias células forem selecionadas</td> <td>If the shape does not match the shape of `data`<!-- -->, um erro é retornado.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, os valores das células selecionadas são atualizados com base nos valores em `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Inserir imagens</td> <td>As imagens inseridas são flutuantes. Os parâmetros de posição imageLeft e imageTop são relativos às células selecionadas atualmente. Valores negativos de imageLeft e imageTop são permitidos e podem ser reajustados pelo Excel para posicionar a imagem dentro de uma planilha. A taxa de proporção da imagem fica bloqueada, a menos que ambos os parâmetros imageWidth e imageHeight sejam fornecidos. Se apenas um dos parâmetros imageWidth e imageHeight for fornecido, o outro valor será automaticamente dimensionado para manter a taxa de proporção original.</td> </tr> <tr> <td></td> <td>Todos os outros casos</td> <td>Um erro é retornado.</td> </tr>\n\n<tr> <td>Excel Online</td> <td>Além dos comportamentos descritos para o Excel acima, esses limites se aplicam ao escrever dados no Excel na Web</td> <td>O número total de células que você pode gravar em uma planilha com o parâmetro não pode exceder `data` 20.000 em uma única chamada para esse método.</td> </tr> <tr> <td></td> <td></td> <td>O número de grupos de formatação passados para `cellFormat` o parâmetro não pode exceder 100. Um único grupo formatação consiste em um conjunto de formatação aplicado a um intervalo de células especificado.</td> </tr>\n\n<tr> <td>PowerPoint</td> <td>Inserir imagem</td> <td>As imagens inseridas são flutuantes. Os parâmetros position imageLeft e imageTop são opcionais, mas, se fornecidos, ambos devem estar presentes. Se um único valor for fornecido, ele será ignorado. Valores negativos de imageLeft e imageTop são permitidos e podem posicionar uma imagem fora de um slide. Se nenhum parâmetro opcional for fornecido e o slide tiver um espaço reservado, a imagem substituirá o espaço reservado no slide. A taxa de proporção da imagem ficará bloqueada, a menos que ambos os parâmetros imageWidth e imageHeight sejam fornecidos. Se apenas um dos parâmetros imageWidth e imageHeight for fornecido, o outro valor será automaticamente dimensionado para manter a taxa de proporção original.</td> </tr> </table>\n\n**Hosts**\n\nOs valores possíveis para o [parâmetro Office.CoercionType](xref:office!Office.CoercionType:enum) variam de acordo com o host.\n\n<table> <tr> <th>Host</th> <th>coercionType suportado</th> </tr> <tr> <td>Excel, PowerPoint, Project e Word</td> <td>`Office.CoercionType.Text` (cadeia de caracteres)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Matrix` (matriz de matrizes)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Table` (Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint na Web e no Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint e Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following example sets the selected text or cell to \"Hello World!\", \n// and if that fails, displays the value of the error.message property.\nfunction writeText() {\n    Office.context.document.setSelectedDataAsync(\"Hello World!\",\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write\n// to a selection. The following example writes data as an array of three rows of two columns, \n// specifying the coercionType as `Matrix` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeMatrix() {\n    Office.context.document.setSelectedDataAsync(\n        [[\"Red\", \"Rojo\"], [\"Green\", \"Verde\"], [\"Blue\", \"Azul\"]],\n        {coercionType: Office.CoercionType.Matrix}\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// The following example writes data as a one column table with a header and four rows, \n// specifying the coercionType as `Table` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeTable() {\n    // Build table.\n    var myTable = new Office.TableData();\n    myTable.headers = [[\"Cities\"]];\n    myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];\n\n    // Write table.\n    Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},\n        function (result) {\n            var error = result.error\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`\n// as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.context.document.setSelectedDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: Office.CoercionType.Html}, function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write('Error: ' + asyncResult.error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType\n// parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertPictureAtSelection(base64EncodedImageStr) {\n\n    Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {\n        coercionType: Office.CoercionType.Image,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 100,\n        imageHeight: 100\n    },\n    function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n    });\n}\n\n// In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the \n// coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertSvgAtSelection(base64EncodedImageStr) {\n    Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {\n        coercionType: Office.CoercionType.XmlSvg,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 400\n    },\n        function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n            }\n        });\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Os dados a serem definidos. Um valor de cadeia de caracteres ou [Office.CoercionType,](xref:office!Office.CoercionType:enum) matriz 2d ou objeto TableData.


        Se o valor passado `data` for:


        - Uma cadeia de caracteres: será inserido um texto sem formatação ou qualquer coisa que possa ser forçada para uma string. No Excel, você também pode especificar dados como uma fórmula válida para adicionar essa fórmula à célula selecionada. Por exemplo, definir dados como "=SUM(A1:A5)" totaliza os valores no intervalo especificado. No entanto, após definir uma fórmula na célula associada, não é possível ler a fórmula adicionada (ou qualquer fórmula preexistente) da célula associada. Se você chamar o método Document.getSelectedDataAsync na célula associada para ler seus dados, o método poderá retornar apenas os dados exibidos na célula (o resultado da fórmula).


        - Uma matriz de matrizes ("matrix"): Serão inseridos dados tabulares sem cabeçalhos. Por exemplo, para gravar dados em três linhas em duas colunas, você pode passar uma matriz como esta: \[ \[ "R1C1", "R1C2" \] , \[ "R2C1", "R2C2" \] , \[ "R3C1", "R3C2" \] \] . Para gravar uma única coluna de três linhas, passe uma matriz como esta: \[ \[ "R1C1" \] , \[ "R2C1" \] , \[ "R3C1"\]\]


        No Excel, você também pode especificar dados como uma matriz de matrizes que contém fórmulas válidas para adicioná-los às células selecionadas. Por exemplo, se nenhum outro dado for substituído, a definição de dados \[ \[ como "=SUM(A1:A5)","=AVERAGE(A1:A5)" adicionará essas duas fórmulas à \] \] seleção. Assim como ao definir uma fórmula em uma única célula como "texto", não é possível ler as fórmulas adicionadas (ou qualquer fórmula preexistente) após elas terem sido configuradas; você poderá ler apenas resultados de fórmulas.


        - Um objeto TableData: será inserida uma tabela com cabeçalhos. No Excel, se você especificar fórmulas no objeto TableData que você passar para o parâmetro de dados, talvez não receba os resultados esperados devido ao recurso "colunas calculadas" do Excel, que duplica automaticamente fórmulas em uma coluna. Para resolver isso quando quiser gravar que contém fórmulas em uma tabela selecionada, tente especificar os dados como uma matriz de matrizes (em vez de um objeto TableData) e especifique o `data` coercionType como Microsoft.Office.Matrix ou "matrix". No entanto, essa técnica bloqueará o recurso "colunas calculadas" somente quando uma das seguintes condições for atendida: (1) você está escrevendo em todas as células da coluna ou (2) já há pelo menos duas fórmulas diferentes na coluna.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: Fornece opções de como inserir dados na seleção.
      type: <xref uid="office!Office.SetSelectedDataOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A propriedade AsyncResult.value sempre retorna indefinidamente porque não há nenhum objeto ou dados a recuperar.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(2)
  package: office!
  fullName: setSelectedDataAsync(data, callback)
  summary: Grava os dados especificados na seleção atual.
  remarks: >-
    **Conjuntos de requisitos**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->, (ao usar `Office.CoercionType.Html`<!-- -->)


    - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (ao usar `Office.CoercionType.Image`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (ao usar `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (ao usar `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (ao usar `Office.CoercionType.Table`<!-- -->)


    - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (ao usar `Office.CoercionType.Text`<!-- -->)


    - [ImageCoercion 1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (ao usar `Office.CoercionType.XmlSvg`<!-- -->)


    **Comportamentos específicos do aplicativo**


    As seguintes ações específicas do aplicativo se aplicam ao escrever dados em uma seleção.


    <table> <tr> <td>Word</td> <td>Se não houver seleção e o ponto de inserção estiver em um local válido, o especificado será `data` inserido no ponto de inserção</td> <td>Se `data` for uma cadeia de caracteres, o texto especificado será inserido.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for uma matriz de matrizes ("matriz") ou um objeto TableData, uma nova tabela do Word será inserida.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for HTML, o HTML especificado será inserido. (**Importante**: se qualquer um dos HTML inseridos for inválido, o Word não levantará um erro. O Word inserirá o máximo de HTML possível e omiti todos os dados inválidos).</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for o Office Open XML, o XML especificado será inserido.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for um fluxo de imagem codificado base64, a imagem especificada será inserida.</td></tr></td> </tr> <tr> <td></td> <td>Se houver uma seleção</td> <td>Ele será substituído pelas regras especificadas `data` seguindo as mesmas regras acima.</td> </tr> <tr> <td></td> <td>Inserir imagens</td> <td>As imagens inseridas são colocadas em linha. Os parâmetros imageLeft e imageTop são ignorados. A taxa de proporção da imagem sempre está bloqueada. Se apenas um dos parâmetros imageWidth e imageHeight for fornecido, o outro valor será automaticamente dimensionado para manter a taxa de proporção original.</td> </tr>


    <tr> <td>Excel</td> <td>Se uma única célula estiver selecionada</td> <td>Se `data` for uma cadeia de caracteres, o texto especificado será inserido como o valor da célula atual.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for uma matriz de matrizes ("matriz"), o conjunto especificado de linhas e colunas será inserido, se nenhum outro dado nas células ao redor for substituído.</td> </tr> <tr> <td></td> <td></td> <td>Se `data` for um objeto TableData, uma nova tabela do Excel com o conjunto especificado de linhas e headers será inserida, se nenhum outro dado nas células ao redor for substituído.</td> </tr> <tr> <td></td> <td>Se várias células forem selecionadas</td><td>If the shape does not match the shape of `data`<!-- -->, um erro é retornado.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, os valores das células selecionadas são atualizados com base nos valores em `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Inserir imagens</td> <td>As imagens inseridas são flutuantes. Os parâmetros de posição imageLeft e imageTop são relativos às células selecionadas atualmente. Valores negativos de imageLeft e imageTop são permitidos e podem ser reajustados pelo Excel para posicionar a imagem dentro de uma planilha. A taxa de proporção da imagem fica bloqueada, a menos que ambos os parâmetros imageWidth e imageHeight sejam fornecidos. Se apenas um dos parâmetros imageWidth e imageHeight for fornecido, o outro valor será automaticamente dimensionado para manter a taxa de proporção original.</td> </tr> <tr> <td></td> <td>Todos os outros casos</td> <td>Um erro é retornado.</td> </tr>


    <tr> <td>Excel Online</td> <td>Além dos comportamentos descritos para o Excel acima, esses limites se aplicam ao escrever dados no Excel na Web</td> <td>O número total de células que você pode gravar em uma planilha com o parâmetro não pode exceder `data` 20.000 em uma única chamada para esse método.</td> </tr> <tr> <td></td> <td></td> <td>O número de grupos de formatação passados para `cellFormat` o parâmetro não pode exceder 100. Um único grupo formatação consiste em um conjunto de formatação aplicado a um intervalo de células especificado.</td> </tr>


    <tr> <td>PowerPoint</td> <td>Inserir imagem</td> <td>As imagens inseridas são flutuantes. Os parâmetros position imageLeft e imageTop são opcionais, mas, se fornecidos, ambos devem estar presentes. Se um único valor for fornecido, ele será ignorado. Valores negativos de imageLeft e imageTop são permitidos e podem posicionar uma imagem fora de um slide. Se nenhum parâmetro opcional for fornecido e o slide tiver um espaço reservado, a imagem substituirá o espaço reservado no slide. A taxa de proporção da imagem ficará bloqueada, a menos que ambos os parâmetros imageWidth e imageHeight sejam fornecidos. Se apenas um dos parâmetros imageWidth e imageHeight for fornecido, o outro valor será automaticamente dimensionado para manter a taxa de proporção original.</td> </tr> </table>


    **Hosts**


    Os valores possíveis para o [parâmetro Office.CoercionType](xref:office!Office.CoercionType:enum) variam de acordo com o host.


    <table> <tr> <th>Host</th> <th>coercionType suportado</th> </tr> <tr> <td>Excel, PowerPoint, Project e Word</td> <td>`Office.CoercionType.Text` (cadeia de caracteres)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Matrix` (matriz de matrizes)</td> </tr> <tr> <td>Excel e Word</td> <td>`Office.CoercionType.Table` (Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint na Web e no Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint e Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Os dados a serem definidos. Um valor de cadeia de caracteres ou [Office.CoercionType,](xref:office!Office.CoercionType:enum) matriz 2d ou objeto TableData.


        Se o valor passado `data` for:


        - Uma cadeia de caracteres: será inserido um texto sem formatação ou qualquer coisa que possa ser forçada para uma string. No Excel, você também pode especificar dados como uma fórmula válida para adicionar essa fórmula à célula selecionada. Por exemplo, definir dados como "=SUM(A1:A5)" totaliza os valores no intervalo especificado. No entanto, após definir uma fórmula na célula associada, não é possível ler a fórmula adicionada (ou qualquer fórmula preexistente) da célula associada. Se você chamar o método Document.getSelectedDataAsync na célula associada para ler seus dados, o método poderá retornar apenas os dados exibidos na célula (o resultado da fórmula).


        - Uma matriz de matrizes ("matrix"): Serão inseridos dados tabulares sem cabeçalhos. Por exemplo, para gravar dados em três linhas em duas colunas, você pode passar uma matriz como esta: \[ \[ "R1C1", "R1C2" \] , \[ "R2C1", "R2C2" \] , \[ "R3C1", "R3C2" \] \] . Para gravar uma única coluna de três linhas, passe uma matriz como esta: \[ \[ "R1C1" \] , \[ "R2C1" \] , \[ "R3C1"\]\]


        No Excel, você também pode especificar dados como uma matriz de matrizes que contém fórmulas válidas para adicioná-los às células selecionadas. Por exemplo, se nenhum outro dado for substituído, a definição de dados \[ \[ como "=SUM(A1:A5)","=AVERAGE(A1:A5)" adicionará essas duas fórmulas à \] \] seleção. Assim como ao definir uma fórmula em uma única célula como "texto", não é possível ler as fórmulas adicionadas (ou qualquer fórmula preexistente) após elas terem sido configuradas; você poderá ler apenas resultados de fórmulas.


        - Um objeto TableData: será inserida uma tabela com cabeçalhos. No Excel, se você especificar fórmulas no objeto TableData que você passar para o parâmetro de dados, talvez não receba os resultados esperados devido ao recurso "colunas calculadas" do Excel, que duplica automaticamente fórmulas em uma coluna. Para resolver isso quando quiser gravar que contém fórmulas em uma tabela selecionada, tente especificar os dados como uma matriz de matrizes (em vez de um objeto TableData) e especifique o `data` coercionType como Microsoft.Office.Matrix ou "matrix". No entanto, essa técnica bloqueará o recurso "colunas calculadas" somente quando uma das seguintes condições for atendida: (1) você está escrevendo em todas as células da coluna ou (2) já há pelo menos duas fórmulas diferentes na coluna.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. A propriedade AsyncResult.value sempre retorna indefinidamente porque não há nenhum objeto ou dados a recuperar.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(1)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  summary: >-
    Somente documentos do projeto. De definir o campo de tarefas para a ID da tarefa especificada.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Uma cadeia de caracteres ou um valor da ID da tarefa.
      type: string
    - id: fieldId
      description: Campos de Tarefas.
      type: number
    - id: fieldValue
      description: Valor do campo de destino.
      type: string | number | boolean | object
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(2)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  summary: >-
    Somente documentos do projeto. De definir o campo de tarefas para a ID da tarefa especificada.


    **Importante**: essa API só funciona no Project 2016 na área de trabalho do Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Uma cadeia de caracteres ou um valor da ID da tarefa.
      type: string
    - id: fieldId
      description: Campos de Tarefas.
      type: number
    - id: fieldValue
      description: Valor do campo de destino.
      type: string | number | boolean | object
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do [tipo Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's\n// currently selected in a task view. Then it sets two task field values by calling\n// setTaskFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the\n// addHandlerAsync method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function setTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                setTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected task.\n    function setTaskFields(taskGuid) {\n        var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];\n        var fieldValues = [true, 'Notes for the task.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setTaskFieldAsync(\n                taskGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
metadata:
  ms.openlocfilehash: 54cba690b37010a371be239edc2ed52104f9ae61
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51358785"
