### YamlMime:TSPackage
uid: office!
name: office
type: package
summary: ''
interfaces:
- office!Office.Actions:interface
- office!Office.AddBindingFromNamedItemOptions:interface
- office!Office.AddBindingFromPromptOptions:interface
- office!Office.AddBindingFromSelectionOptions:interface
- office!Office.Addin:interface
- office!Office.AddinCommands.Event:interface
- office!Office.AddinCommands.EventCompletedOptions:interface
- office!Office.AddinCommands.Source:interface
- office!Office.AsyncContextOptions:interface
- office!Office.AsyncResult:interface
- office!Office.Auth:interface
- office!Office.AuthOptions:interface
- office!Office.Binding:interface
- office!Office.BindingDataChangedEventArgs:interface
- office!Office.Bindings:interface
- office!Office.BindingSelectionChangedEventArgs:interface
- office!Office.Context:interface
- office!Office.ContextInformation:interface
- office!Office.Control:interface
- office!Office.CustomXmlNode:interface
- office!Office.CustomXmlPart:interface
- office!Office.CustomXmlParts:interface
- office!Office.CustomXmlPrefixMappings:interface
- office!Office.Dialog:interface
- office!Office.DialogOptions:interface
- office!Office.DialogParentMessageReceivedEventArgs:interface
- office!Office.Document:interface
- office!Office.DocumentSelectionChangedEventArgs:interface
- office!Office.Error:interface
- office!Office.File:interface
- office!Office.FileProperties:interface
- office!Office.GetBindingDataOptions:interface
- office!Office.GetFileOptions:interface
- office!Office.GetSelectedDataOptions:interface
- office!Office.GoToByIdOptions:interface
- office!Office.Group:interface
- office!Office.IPromiseConstructor:interface
- office!Office.MatrixBinding:interface
- office!Office.NodeDeletedEventArgs:interface
- office!Office.NodeInsertedEventArgs:interface
- office!Office.NodeReplacedEventArgs:interface
- office!Office.OfficeTheme:interface
- office!Office.RangeCoordinates:interface
- office!Office.RangeFormatConfiguration:interface
- office!Office.RemoveHandlerOptions:interface
- office!Office.RequirementSetSupport:interface
- office!Office.Ribbon:interface
- office!Office.RibbonUpdaterData:interface
- office!Office.SaveSettingsOptions:interface
- office!Office.SetBindingDataOptions:interface
- office!Office.SetSelectedDataOptions:interface
- office!Office.Settings:interface
- office!Office.SettingsChangedEventArgs:interface
- office!Office.Slice:interface
- office!Office.Tab:interface
- office!Office.TableBinding:interface
- office!Office.TextBinding:interface
- office!Office.UI:interface
- office!Office.VisibilityModeChangedMessage:interface
- office!OfficeExtension.DebugInfo:interface
- office!OfficeExtension.EmbeddedOptions:interface
- office!OfficeExtension.EventInfo:interface
- office!OfficeExtension.LoadOption:interface
- office!OfficeExtension.RequestContextDebugInfo:interface
- office!OfficeExtension.RequestUrlAndHeaderInfo:interface
- office!OfficeExtension.RunOptions:interface
- office!OfficeExtension.UpdateOptions:interface
enums:
- office!Office.ActiveView:enum
- office!Office.AsyncResultStatus:enum
- office!Office.BindingType:enum
- office!Office.CoercionType:enum
- office!Office.CustomXMLNodeType:enum
- office!Office.DocumentMode:enum
- office!Office.EventType:enum
- office!Office.FileType:enum
- office!Office.FilterType:enum
- office!Office.GoToType:enum
- office!Office.HostType:enum
- office!Office.Index:enum
- office!Office.InitializationReason:enum
- office!Office.PlatformType:enum
- office!Office.ProjectProjectFields:enum
- office!Office.ProjectResourceFields:enum
- office!Office.ProjectTaskFields:enum
- office!Office.ProjectViewTypes:enum
- office!Office.SelectionMode:enum
- office!Office.StartupBehavior:enum
- office!Office.Table:enum
- office!Office.ValueFormat:enum
- office!Office.VisibilityMode:enum
classes:
- office!Office.TableData:class
- office!OfficeExtension.ClientObject:class
- office!OfficeExtension.ClientRequestContext:class
- office!OfficeExtension.ClientResult:class
- office!OfficeExtension.EmbeddedSession:class
- office!OfficeExtension.Error:class
- office!OfficeExtension.ErrorCodes:class
- office!OfficeExtension.EventHandlerResult:class
- office!OfficeExtension.EventHandlers:class
- office!OfficeExtension.TrackedObjects:class
functions:
- name: Office.initialize(reason)
  uid: office!Office.initialize:function(1)
  package: office!
  summary: >-
    Ocorre quando o ambiente de tempo de execução é carregado e o suplemento está pronto para começar a interagir com o aplicativo e o documento hospedado.


    O parâmetro reason da função de ouvinte de eventos initialize retorna um valor de enumeração que `InitializationReason` especifica como ocorreu a inicialização. Um suplemento de painel de tarefas ou conteúdo pode ser inicializado de duas maneiras:


    - O usuário acabou de inseri-lo na seção Complementos usados recentemente da lista de opções de complemento na guia Inserir da faixa de opções no aplicativo host do Office ou na caixa de diálogo Inserir o complemento.


    - O usuário abriu um documento que já contém o suplemento.


    *Observação*: o parâmetro motivo da função de ouvinte de eventos initialize retorna apenas um valor de enumeração para o painel de tarefas e os `InitializationReason` complementos de conteúdo. Ele não retorna um valor para Outlook de complementos.
  remarks: "**Detalhes do suporte**\n\nUm Y maiúsculo na matriz a seguir indica que esse método tem suporte no aplicativo host do Office correspondente. Uma célula vazia indica que o aplicativo host do Office não dá suporte a esse método.\n\nPara obter mais informações sobre Office aplicativo host e requisitos de servidor, consulte [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Hosts com suporte, por plataforma* <table> <tr><th> </th><th> Office no Windows </th><th> Office no navegador da Web </th><th> Office no iPad </th><th> Outlook em dispositivos móveis </th><th> Office no Mac </th></tr> <tr><td><strong>Excel</strong></td><td> S </td><td> S </td><td> S </td><td> </td><td> S </td></tr> <tr><td><strong>Outlook</strong></td><td> S </td><td> S </td><td> </td><td> S </td><td> S </td></tr> <tr><td><strong>PowerPoint</strong></td><td> S </td><td> S </td><td> S </td><td> </td><td> S </td></tr> <tr><td><strong>Project</strong></td><td> S </td><td> </td><td> </td><td> </td><td> S </td></tr> <tr><td><strong> Word </strong></td><td> S </td><td> S </td><td> S </td><td> </td><td> S </td></tr> </table>\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// You can use the value of the InitializationEnumeration to implement different logic for\n// when the add-in is first inserted versus when it is already part of the document.\n// The following example shows some simple logic that uses the value of the reason parameter\n// to display how the task pane or content add-in was initialized.\nOffice.initialize = function (reason) {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n    // After the DOM is loaded, code specific to the add-in can run.\n    // Display initialization reason.\n    if (reason == \"inserted\")\n    write(\"The add-in was just inserted.\");\n\n    if (reason == \"documentOpened\")\n    write(\"The add-in is already part of the document.\");\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function initialize(reason: InitializationReason): void;'
    parameters:
    - id: reason
      description: Indica como o aplicativo foi inicializado.
      type: <xref uid="office!Office.InitializationReason:enum" />
    return:
      type: void
      description: ''
- name: Office.isSetSupported(name, minVersion)
  uid: office!Office.isSetSupported:function(1)
  package: office!
  summary: Verifica se o conjunto de requisitos especificado é suportado pelo aplicativo Office host.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function isSetSupported(name: string, minVersion?: string): boolean;'
    parameters:
    - id: name
      description: Definir nome; por exemplo, "MatrixBindings".
      type: string
    - id: minVersion
      description: A versão mínima necessária; por exemplo, "1.4".
      type: string
    return:
      type: boolean
      description: ''
- name: Office.onReady(callback)
  uid: office!Office.onReady:function(1)
  package: office!
  summary: Garante que as OFFICE de JavaScript estão prontas para serem chamadas pelo complemento. Se a estrutura ainda não tiver inicializado, o retorno de chamada ou promessa aguardará até que o Office host esteja pronto para aceitar chamadas de API. Observe que, embora essa API se destine a ser usada dentro de um Office de Office, ela também pode ser usada fora do add-in. Nesse caso, quando Office.js determina que ele está sendo executado fora de um aplicativo host Office, ele chamará o retorno de chamada e resolverá a promessa com "null" para o host e a plataforma.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function onReady(callback?: (info: { host: HostType, platform: PlatformType }) => any): Promise<{ host: HostType, platform: PlatformType }>;'
    parameters:
    - id: callback
      description: Um método de retorno de chamada opcional, que receberá as informações do host e da plataforma. Como alternativa, em vez de usar um retorno de chamada, um complemento pode simplesmente aguardar a resolução da Promessa retornada pela função.
      type: '(info: { host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }) =&gt; any'
    return:
      type: 'Promise&lt;{ host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }&gt;'
      description: Uma Promessa que contém as informações do host e da plataforma, depois que a inicialização for concluída.
- name: Office.select(expression, callback)
  uid: office!Office.select:function(1)
  package: office!
  summary: Retorna uma promessa de um objeto descrito na expressão. O retorno de chamada só será invocado se o método falhar.
  remarks: >-
    **Detalhes do suporte**


    Um Y maiúsculo na matriz a seguir indica que esse método tem suporte no aplicativo host do Office correspondente. Uma célula vazia indica que o aplicativo host do Office não dá suporte a esse método.


    Para obter mais informações sobre Office aplicativo host e requisitos de servidor, consulte [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts com suporte, por plataforma* <table> <tr><th> </th><th> Office no Windows </th><th> Office no navegador da Web </th><th> Office no iPad </th></tr> <tr><td><strong>Excel</strong></td><td> S </td><td> S </td><td> S </td></tr> <tr><td><strong> Word </strong></td><td> S </td><td> </td><td> S </td></tr> </table>


    #### <a name="examples"></a>Exemplos


    ```javascript

    // The following code example uses the select method to retrieve a binding with the id "cities" from

    // the Bindings collection, and then calls the addHandlerAsync method to add an event handler for the

    // dataChanged event of the binding.

    function addBindingDataChangedEventHandler() {
        Office.select("bindings#cities", function onError(){}).addHandlerAsync(Office.EventType.BindingDataChanged,
        function (eventArgs) {
            doSomethingWithBinding(eventArgs.binding);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function select(expression: string, callback?: (result: AsyncResult<any>) => void): Binding;'
    parameters:
    - id: expression
      description: O objeto a ser recuperado. Exemplo de \# "bindings BindingName", recupera uma promessa de associação para uma associação chamada 'BindingName'
      type: string
    - id: callback
      description: Opcional. Uma função que é invocada quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: <xref uid="office!Office.Binding:interface" />
      description: ''
- name: Office.useShortNamespace(useShortNamespace)
  uid: office!Office.useShortNamespace:function(1)
  package: office!
  summary: Alterna o alias para o `Office` `Microsoft.Office.WebExtension` namespace completo.
  remarks: "**Detalhes do suporte**\n\nUm Y maiúsculo na matriz a seguir indica que esse método tem suporte no aplicativo host do Office correspondente. Uma célula vazia indica que o aplicativo host do Office não dá suporte a esse método.\n\nPara obter mais informações sobre Office aplicativo host e requisitos de servidor, consulte [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Hosts com suporte, por plataforma* <table> <tr><th> </th><th> Office no Windows </th><th> Office no navegador da Web </th><th> Office no iPad </th><th> Outlook em dispositivos móveis </th><th> Office no Mac </th></tr> <tr><td><strong>Excel</strong></td><td> S </td><td> S </td><td> S </td><td> </td><td> </td></tr> <tr><td><strong>Outlook</strong></td><td> S </td><td> S </td><td> </td><td> S </td><td> S </td></tr> <tr><td><strong>PowerPoint</strong></td><td> S </td><td> S </td><td> S </td><td> </td><td> </td></tr> <tr><td><strong>Project</strong></td><td> Y </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word </strong></td><td> S </td><td> S </td><td> S </td><td> </td><td> </td></tr> </table>\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction startUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(true);\n    }\n    else {\n        Office.useShortNamespace(true);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\nfunction stopUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(false);\n    }\n    else {\n        Office.useShortNamespace(false);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function useShortNamespace(useShortNamespace: boolean): void;'
    parameters:
    - id: useShortNamespace
      description: True para usar o alias de atalho; caso contrário, false para desabilitá-lo. O padrão é verdadeiro.
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 07fccc1ffd769d68d64b0eba09b7211dfc159e61
  ms.sourcegitcommit: 5636507f201d29b24a904648908b485512d0ffaf
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 05/26/2021
  ms.locfileid: "52656784"
