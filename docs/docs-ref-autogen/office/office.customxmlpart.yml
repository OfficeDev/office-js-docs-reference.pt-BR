### YamlMime:UniversalReference
ms.openlocfilehash: 2662ea466e74eb9588f3634d32a2cba1acd1c49b
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29977241"
items:
- uid: office.Office.CustomXmlPart
  summary: Representa um único CustomXMLPart em uma coleção de [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) .
  remarks: >-
    <table><tr><td>Conjuntos de requisito</td><td>CustomXmlParts</td></tr></table>


    **Detalhes do suporte**


    Um capital Y a matriz a seguir indica que esta interface é suportado no aplicativo host do Office correspondente. Uma célula vazia indica que o aplicativo host do Office não dá suporte a essa interface.


    Para obter mais informações sobre requisitos de aplicativo e servidor de host do Office, consulte [requisitos para a execução de suplementos do Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts com suporte, por plataforma* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (no navegador) </th><th> Office para iPad </th><th> Office para Mac </th></tr> <tr><td><strong>Word</strong></td><td> S </td><td> S </td><td> S </td><td> S </td></tr> </table>
  name: Office.CustomXmlPart
  fullName: Office.CustomXmlPart
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlPart.addHandlerAsync
  - office.Office.CustomXmlPart.addHandlerAsync_1
  - office.Office.CustomXmlPart.deleteAsync
  - office.Office.CustomXmlPart.deleteAsync_1
  - office.Office.CustomXmlPart.getNodesAsync
  - office.Office.CustomXmlPart.getNodesAsync_1
  - office.Office.CustomXmlPart.getXmlAsync
  - office.Office.CustomXmlPart.getXmlAsync_1
  - office.Office.CustomXmlPart.removeHandlerAsync
  - office.Office.CustomXmlPart.removeHandlerAsync_1
  - office.Office.CustomXmlPart.builtIn
  - office.Office.CustomXmlPart.id
  - office.Office.CustomXmlPart.namespaceManager
- uid: office.Office.CustomXmlPart.addHandlerAsync
  summary: Adiciona um manipulador de eventos para o objeto usando o tipo de evento especificado.
  remarks: Você pode adicionar vários manipuladores de eventos para o eventType especificado desde que o nome de cada função do manipulador de eventos é exclusivo.
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: addHandlerAsync(eventType, handler, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Especifica o tipo de evento a ser adicionado. Para um objeto CustomXmlPart, o parâmetro eventType pode ser especificado como `Office.EventType.NodeDeleted` <!-- -->, `Office.EventType.NodeInserted` <!-- -->, e `Office.EventType.NodeReplaced` <!-- -->.
      type:
      - Office.EventType
    - id: handler
      description: A função de manipulador de eventos para adicionar, cujo único parâmetro é do tipo [Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, ou [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)
      type:
      - '(result: any) => void'
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.addHandlerAsync_1
  summary: Adiciona um manipulador de eventos para o objeto usando o tipo de evento especificado.
  remarks: >-
    Você pode adicionar vários manipuladores de eventos para o eventType especificado desde que o nome de cada função do manipulador de eventos é exclusivo.

    #### <a name="examples"></a>Exemplos


    ```javascript

    // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeDeletedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                write("A node has been deleted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                write("A node has been inserted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeReplacedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                write("A node has been replaced.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```
  name: addHandlerAsync(eventType, handler, callback)
  fullName: addHandlerAsync(eventType, handler, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Especifica o tipo de evento a ser adicionado. Para um objeto CustomXmlPart, o parâmetro eventType pode ser especificado como `Office.EventType.NodeDeleted` <!-- -->, `Office.EventType.NodeInserted` <!-- -->, e `Office.EventType.NodeReplaced` <!-- -->.
      type:
      - Office.EventType
    - id: handler
      description: A função de manipulador de eventos para adicionar, cujo único parâmetro é do tipo [Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, ou [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)
      type:
      - '(result: any) => void'
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.deleteAsync
  summary: Exclui a parte XML personalizada.
  name: deleteAsync(options, callback)
  fullName: deleteAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.deleteAsync_1
  summary: Exclui a parte XML personalizada.
  name: deleteAsync(callback)
  fullName: deleteAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction deleteXMLPart() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.deleteAsync(function (eventArgs) {\n            write(\"The XML Part has been deleted.\");\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.getNodesAsync
  summary: Obtém de forma assíncrona quaisquer CustomXmlNodes nesta parte XML personalizada que correspondam ao XPath especificado.
  name: getNodesAsync(xPath, options, callback)
  fullName: getNodesAsync(xPath, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xPath
      description: Uma expressão XPath que especifica os nós que você deseja retornar. Obrigatório.
      type:
      - string
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. O `value` propriedade do resultado é uma matriz de objetos CustomXmlNode que representa os nós especificado pela expressão XPath passada ao parâmetro xPath.
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlPart.getNodesAsync_1
  summary: Obtém de forma assíncrona quaisquer CustomXmlNodes nesta parte XML personalizada que correspondam ao XPath especificado.
  name: getNodesAsync(xPath, callback)
  fullName: getNodesAsync(xPath, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: xPath
      description: Uma expressão XPath que especifica os nós que você deseja retornar. Obrigatório.
      type:
      - string
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. O `value` propriedade do resultado é uma matriz de objetos CustomXmlNode que representa os nós especificado pela expressão XPath passada ao parâmetro xPath.
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlPart.getXmlAsync
  summary: Obtém de forma assíncrona o XML dentro desta parte XML personalizada.
  name: getXmlAsync(options, callback)
  fullName: getXmlAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterado, para uso em um retorno de chamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. O `value` propriedade do resultado é uma cadeia de caracteres que contém o XML do objeto CustomXmlPart referenciado.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlPart.getXmlAsync_1
  summary: Obtém de forma assíncrona o XML dentro desta parte XML personalizada.
  name: getXmlAsync(callback)
  fullName: getXmlAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction showXMLPartInnerXML() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getXmlAsync(function (eventArgs) {\n            write(eventArgs.value);\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. O `value` propriedade do resultado é uma cadeia de caracteres que contém o XML do objeto CustomXmlPart referenciado.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlPart.removeHandlerAsync
  summary: Remove um manipulador de eventos para o tipo de evento especificado.
  name: removeHandlerAsync(eventType, handler, options, callback)
  fullName: removeHandlerAsync(eventType, handler, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Especifica o tipo de evento para remover. Para um objeto CustomXmlPart, o parâmetro eventType pode ser especificado como `Office.EventType.NodeDeleted` <!-- -->, `Office.EventType.NodeInserted` <!-- -->, e `Office.EventType.NodeReplaced` <!-- -->.
      type:
      - Office.EventType
    - id: handler
      description: O nome do manipulador para remover.
      type:
      - '(result: any) => void'
    - id: options
      description: Fornece opções para determinar qual manipulador de eventos ou manipuladores são removidos.
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.removeHandlerAsync_1
  summary: Remove um manipulador de eventos para o tipo de evento especificado.
  name: removeHandlerAsync(eventType, handler, callback)
  fullName: removeHandlerAsync(eventType, handler, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction removeNodeInsertedEventHandler() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\",\n        function (result) {\n            var xmlPart = result.value;\n            xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});\n    });\n}\n```"
    parameters:
    - id: eventType
      description: Especifica o tipo de evento para remover. Para um objeto CustomXmlPart, o parâmetro eventType pode ser especificado como `Office.EventType.NodeDeleted` <!-- -->, `Office.EventType.NodeInserted` <!-- -->, e `Office.EventType.NodeReplaced` <!-- -->.
      type:
      - Office.EventType
    - id: handler
      description: O nome do manipulador para remover.
      type:
      - '(result: any) => void'
    - id: callback
      description: Opcional. Uma função que é invocado quando o retorno de chamada retorna, cujo único parâmetro é do tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.builtIn
  summary: True se a parte XML personalizada é feita no; Caso contrário false.
  name: builtIn
  fullName: builtIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'builtIn: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction showXMLPartBuiltIn() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.builtIn);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.id
  summary: Obtém o GUID do CustomXMLPart.
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nfunction showXMLPartBuiltId() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.id);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.namespaceManager
  summary: Obtém o conjunto de namespace mapeamentos de prefixo ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) usada contra o CustomXmlPart atual.
  name: namespaceManager
  fullName: namespaceManager
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceManager: CustomXmlPrefixMappings;'
    return:
      type:
      - office.Office.CustomXmlPrefixMappings
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```javascript\nfunction setXMLPartNamespaceManagerNamespace() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.namespaceManager.addNamespaceAsync(\"myPrefix\", \"myNamespace\");\n    });\n}\n```"
