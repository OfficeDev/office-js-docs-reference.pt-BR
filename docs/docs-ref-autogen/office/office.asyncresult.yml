### YamlMime:UniversalReference
items:
  - uid: office.Office.AsyncResult
    summary: |-
      Um objeto que encapsula o resultado de uma solicitação assíncrona, incluindo informações de status e de erro caso a solicitação tenha falhado.

      Quando a função passada para o `callback` parâmetro de um método "Async" é executada, ela recebe um objeto AsyncResult que você pode acessar do único parâmetro `callback` da função.
    name: Office.AsyncResult
    fullName: Office.AsyncResult
    langs:
      - typeScript
    type: interface
    syntax:
      typeParameters:
        - id: T
    package: office
    remarks: |-


      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following is an example applicable to content and task pane add-ins.
      // The example shows a call to the getSelectedDataAsync method of the Document object.
      Office.context.document.getSelectedDataAsync("text", {
              valueFormat: "unformatted",
              filterType: "all"
          },
          function (result) {
              if (result.status === "success") {
                  var dataValue = result.value; // Get selected data.
                  console.log('Selected data is ' + dataValue);
              } else {
                  var err = result.error;
                  console.log(err.name + ": " + err.message);
              }
          });
      // The anonymous function passed as the callback argument ( function (result){...}) has a single 
      // parameter named result that provides access to an AsyncResult object when the function executes.
      // When the call to the getSelectedDataAsync method completes, the callback function executes, 
      // and the following line of code accesses the value property of the AsyncResult object to 
      // return the data selected in the document:
      var dataValue = result.value;
      // Note that other lines of code in the function use the result parameter of the callback function 
      // to access the status and error properties of the AsyncResult object.
      ```
    children:
      - office.Office.AsyncResult.asyncContext
      - office.Office.AsyncResult.diagnostics
      - office.Office.AsyncResult.error
      - office.Office.AsyncResult.status
      - office.Office.AsyncResult.value
  - uid: office.Office.AsyncResult.asyncContext
    summary: 'Obtém o item definido pelo usuário passado para o parâmetro `asyncContext` opcional do método chamado no mesmo estado em que foi transmitido. Isso retorna o item definido pelo usuário (que pode ser de qualquer tipo JavaScript: String, Number, Boolean, Object, array, NULL ou undefined) passado para o parâmetro `asyncContext` opcional do método chamado. Retorna Undefined, se você não passou nada para o parâmetro asyncContext.'
    name: asyncContext
    fullName: asyncContext
    langs:
      - typeScript
    type: property
    syntax:
      content: 'asyncContext: any;'
      return:
        type:
          - any
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          function getDataWithContext() {
              var format = "Your data: ";
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text, 
                  { asyncContext: format }, 
                  showDataWithContext);
          }

          function showDataWithContext(asyncResult) {
              write(asyncResult.asyncContext + asyncResult.value);
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.AsyncResult.diagnostics
    summary: Obtém um objeto que pode fornecer informações adicionais se um erro ocorreu.
    remarks: |-
      *APIs com suporte*

      `Office.context.mailbox.item.getCallbackTokenAsync`<!-- -->, `Office.context.mailbox.item.getUserIdentityTokenAsync`

      *Erros com suporte* <table> <tr><th>`AsyncResult.error.name` </th><th>`AsyncResult.error.message` </th><th>Descrição do objeto Diagnostics retornado </th></tr> <tr><td><strong>HTTPRequestFailure</strong> </td><td>A solicitação falhou. Confira o objeto Diagnostics do código de erro HTTP. </td><td>O código de erro HTTP em um objeto JSON por exemplo,`{"HTTPCode":"401"}` </td></tr> <tr><td><strong>InternalServerError</strong></td><td>O servidor do Exchange retornou um erro. Confira o objeto Diagnostics para obter mais informações.</td><td>A mensagem de erro do servidor Exchange em um objeto JSON por exemplo,`{"ErrorText": "The mailbox database is temporarily unavailable"}`</td></tr> </table>
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: any;'
      return:
        type:
          - any
  - uid: office.Office.AsyncResult.error
    summary: 'Obtém um objeto [Office. Error](xref:office.Office.Error) que fornece uma descrição do erro, se algum erro ocorreu.'
    name: error
    fullName: error
    langs:
      - typeScript
    type: property
    syntax:
      content: 'error: Office.Error;'
      return:
        type:
          - office.Office.Error
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          function getData() {
              Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write(asyncResult.error.message);
                  }
                  else {
                      write(asyncResult.value);
                  }
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.AsyncResult.status
    summary: 'Obtém o [Office. AsyncResultStatus](xref:office.Office.AsyncResultStatus) da operação assíncrona.'
    name: status
    fullName: status
    langs:
      - typeScript
    type: property
    syntax:
      content: 'status: AsyncResultStatus;'
      return:
        type:
          - office.Office.AsyncResultStatus
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          function getData() {
              Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write(asyncResult.error.message);
                  }
                  else {
                      write(asyncResult.value);
                  }
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.AsyncResult.value
    summary: 'Obtém a carga ou o conteúdo desta operação assíncrona, caso haja algum.'
    remarks: |-
      Você acessa o objeto AsyncResult na função passada como o argumento para o parâmetro callback de um método "Async", como os `getSelectedDataAsync` métodos e `setSelectedDataAsync` do objeto [Document](xref:office.Office.Document) .

      **Observação**: o que a propriedade Value retorna para um determinado método "Async" varia dependendo da finalidade e do contexto desse método. To determine what is returned by the value property for an "Async" method, refer to the "Callback value" section of the method's topic.

      #### <a name="examples"></a>Exemplos

      ```javascript
      function getData() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
              if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                  write(asyncResult.error.message);
              }
              else {
                  write(asyncResult.value);
              }
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: value
    fullName: value
    langs:
      - typeScript
    type: property
    syntax:
      content: 'value: T;'
      return:
        type:
          - T