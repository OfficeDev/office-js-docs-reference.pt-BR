### YamlMime:TSType
name: Excel.BindingCollection
uid: excel!Excel.BindingCollection:class
package: excel!
fullName: Excel.BindingCollection
summary: >-
  Representa a coleção de todos os objetos Binding que fazem parte da pasta de trabalho.


  \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.BindingCollection#context:member
  package: excel!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do complemento ao processo do aplicativo host do Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.BindingCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    Retorna o número de associações da coleção.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.BindingCollection#items:member
  package: excel!
  fullName: items
  summary: Obtém os itens filhos carregados nesta coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Binding[];'
    return:
      type: <xref uid="excel!Excel.Binding:class" />[]
methods:
- name: add(range, bindingType, id)
  uid: excel!Excel.BindingCollection#add:member(1)
  package: excel!
  fullName: add(range, bindingType, id)
  summary: >-
    Adiciona uma nova associação a um intervalo específico.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    parameters:
    - id: range
      description: Intervalo para vincular a associação. Pode ser um objeto Range do Excel ou uma cadeia de caracteres. Se for uma cadeia de caracteres, deve conter o endereço completo, incluindo o nome da planilha
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: bindingType
      description: Tipo de associação. Consulte Excel.BindingType.
      type: <xref uid="excel!Excel.BindingType:enum" />
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: add(range, bindingTypeString, id)
  uid: excel!Excel.BindingCollection#add:member(2)
  package: excel!
  fullName: add(range, bindingTypeString, id)
  summary: >-
    Adiciona uma nova associação a um intervalo específico.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    parameters:
    - id: range
      description: Intervalo para vincular a associação. Pode ser um objeto Range do Excel ou uma cadeia de caracteres. Se for uma cadeia de caracteres, deve conter o endereço completo, incluindo o nome da planilha
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: bindingTypeString
      description: Tipo de associação. Consulte Excel.BindingType.
      type: "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromNamedItem(name, bindingType, id)
  uid: excel!Excel.BindingCollection#addFromNamedItem:member(1)
  package: excel!
  fullName: addFromNamedItem(name, bindingType, id)
  summary: >-
    Adiciona uma nova associação com base em um item nomeado na pasta de trabalho. Se o item nomeado faz referência a várias áreas, o erro "InvalidReference" será retornado.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    parameters:
    - id: name
      description: Nome do qual deseja criar a associação.
      type: string
    - id: bindingType
      description: Tipo de associação. Consulte Excel.BindingType.
      type: <xref uid="excel!Excel.BindingType:enum" />
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromNamedItem(name, bindingTypeString, id)
  uid: excel!Excel.BindingCollection#addFromNamedItem:member(2)
  package: excel!
  fullName: addFromNamedItem(name, bindingTypeString, id)
  summary: >-
    Adiciona uma nova associação com base em um item nomeado na pasta de trabalho. Se o item nomeado faz referência a várias áreas, o erro "InvalidReference" será retornado.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    parameters:
    - id: name
      description: Nome do qual deseja criar a associação.
      type: string
    - id: bindingTypeString
      description: Tipo de associação. Consulte Excel.BindingType.
      type: "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromSelection(bindingType, id)
  uid: excel!Excel.BindingCollection#addFromSelection:member(1)
  package: excel!
  fullName: addFromSelection(bindingType, id)
  summary: >-
    Adiciona uma nova associação com base na seleção atual. Se a seleção tiver várias áreas, o erro "InvalidReference" será retornado.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
    parameters:
    - id: bindingType
      description: Tipo de associação. Consulte Excel.BindingType.
      type: <xref uid="excel!Excel.BindingType:enum" />
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromSelection(bindingTypeString, id)
  uid: excel!Excel.BindingCollection#addFromSelection:member(2)
  package: excel!
  fullName: addFromSelection(bindingTypeString, id)
  summary: >-
    Adiciona uma nova associação com base na seleção atual. Se a seleção tiver várias áreas, o erro "InvalidReference" será retornado.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    parameters:
    - id: bindingTypeString
      description: Tipo de associação. Consulte Excel.BindingType.
      type: "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: getCount()
  uid: excel!Excel.BindingCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    Obtém o número de associações da coleção.


    \[[Conjunto de API: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(id)
  uid: excel!Excel.BindingCollection#getItem:member(1)
  package: excel!
  fullName: getItem(id)
  summary: >-
    Obtém um objeto de associação pela ID.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(id: string): Excel.Binding;'
    parameters:
    - id: id
      description: ID do objeto de associação a ser recuperado.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Create a table binding to monitor data changes in the table. \n// When data is changed, the background color of the table will be changed to orange.\nfunction addEventHandler() {\n    // Create Table1\n    Excel.run(function (ctx) { \n        ctx.workbook.tables.add(\"Sheet1!A1:C4\", true);\n        return ctx.sync().then(function() {\n                console.log(\"My Diet Data Inserted!\");\n        })\n        .catch(function (error) {\n                console.log(JSON.stringify(error));\n        });\n    });\n    //Create a new table binding for Table1\n    Office.context.document.bindings.addFromNamedItemAsync(\n        \"Table1\", Office.CoercionType.Table, { id: \"myBinding\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n        else {\n            // If succeeded, then add event handler to the table binding.\n            Office.select(\"bindings#myBinding\").addHandlerAsync(\n                Office.EventType.BindingDataChanged, onBindingDataChanged);\n        }\n    });\n}\n    \n// when data in the table is changed, this event will be triggered.\nfunction onBindingDataChanged(eventArgs) {\n    Excel.run(function (ctx) { \n        // highlight the table in orange to indicate data has been changed.\n        ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = \"Orange\";\n        return ctx.sync().then(function() {\n                console.log(\"The value in this table got changed!\");\n        })\n        .catch(function (error) {\n                console.log(JSON.stringify(error));\n        });\n    });\n}\n```"
- name: getItemAt(index)
  uid: excel!Excel.BindingCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Obtém um objeto de associação com base em sua posição na matriz dos itens.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Binding;'
    parameters:
    - id: index
      description: Valor de índice do objeto a ser recuperado. Indexados com zero.
      type: number
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemOrNullObject(id)
  uid: excel!Excel.BindingCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(id)
  summary: >-
    Obtém um objeto binding pela ID. Se o objeto binding não existir, retornará um objeto null.


    \[[Conjunto de API: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.Binding;'
    parameters:
    - id: id
      description: ID do objeto de associação a ser recuperado.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.BindingCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;'
    parameters:
    - id: options
      description: Fornece opções para quais propriedades do objeto deve ser carregado.
      type: <xref uid="excel!Excel.Interfaces.BindingCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.BindingCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.BindingCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgulas ou uma matriz de cadeias de caracteres que especificam as propriedades a ser carregadas.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.BindingCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < bindings.items.length; i++)\n        {\n            console.log(bindings.items[i].id);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of bindings\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"Bindings: Count= \" + bindings.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.BindingCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.BindingCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades a ser carregadas e é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades de navegação a `propertyNamesAndPaths.expand` ser carregadas.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.BindingCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.BindingCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Substitui o método JavaScript `toJSON()` para fornecer uma saída mais útil quando um objeto API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado a ele.) Enquanto o objeto original `Excel.BindingCollection` é um objeto API, o método retorna `toJSON` um objeto JavaScript simples (digitado como `Excel.Interfaces.BindingCollectionData`<!-- -->) que contém uma matriz "items" com cópias rasas de quaisquer propriedades carregadas dos itens da coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.BindingCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: e6dc3ef29167cfc27edcdaaf8f635142283c6ce0
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51260906"
