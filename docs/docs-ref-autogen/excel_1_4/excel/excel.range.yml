### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Range
    summary: |-
      <span data-ttu-id="56c37-101">Intervalo representa um conjunto de uma ou mais células contíguas, como uma célula, uma linha, uma coluna, um bloco de células, etc. Para saber mais sobre como os intervalos são usados em toda a API, leia [trabalhar com intervalos usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) e [trabalhe com intervalos usando a API JavaScript do Excel (avançado)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="56c37-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="56c37-102">.</span><span class="sxs-lookup"><span data-stu-id="56c37-102"></span></span>

      <span data-ttu-id="56c37-103">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Range.address
      - excel.Excel.Range.addressLocal
      - excel.Excel.Range.cellCount
      - excel.Excel.Range.clear
      - excel.Excel.Range.clear_1
      - excel.Excel.Range.columnCount
      - excel.Excel.Range.columnHidden
      - excel.Excel.Range.columnIndex
      - excel.Excel.Range.context
      - excel.Excel.Range.delete
      - excel.Excel.Range.delete_1
      - excel.Excel.Range.format
      - excel.Excel.Range.formulas
      - excel.Excel.Range.formulasLocal
      - excel.Excel.Range.formulasR1C1
      - excel.Excel.Range.getBoundingRect
      - excel.Excel.Range.getCell
      - excel.Excel.Range.getColumn
      - excel.Excel.Range.getColumnsAfter
      - excel.Excel.Range.getColumnsBefore
      - excel.Excel.Range.getEntireColumn
      - excel.Excel.Range.getEntireRow
      - excel.Excel.Range.getIntersection
      - excel.Excel.Range.getIntersectionOrNullObject
      - excel.Excel.Range.getLastCell
      - excel.Excel.Range.getLastColumn
      - excel.Excel.Range.getLastRow
      - excel.Excel.Range.getOffsetRange
      - excel.Excel.Range.getResizedRange
      - excel.Excel.Range.getRow
      - excel.Excel.Range.getRowsAbove
      - excel.Excel.Range.getRowsBelow
      - excel.Excel.Range.getUsedRange
      - excel.Excel.Range.getUsedRangeOrNullObject
      - excel.Excel.Range.getVisibleView
      - excel.Excel.Range.hidden
      - excel.Excel.Range.insert
      - excel.Excel.Range.insert_1
      - excel.Excel.Range.load
      - excel.Excel.Range.load_1
      - excel.Excel.Range.load_2
      - excel.Excel.Range.merge
      - excel.Excel.Range.numberFormat
      - excel.Excel.Range.rowCount
      - excel.Excel.Range.rowHidden
      - excel.Excel.Range.rowIndex
      - excel.Excel.Range.select
      - excel.Excel.Range.set
      - excel.Excel.Range.set_1
      - excel.Excel.Range.sort
      - excel.Excel.Range.text
      - excel.Excel.Range.toJSON
      - excel.Excel.Range.track
      - excel.Excel.Range.unmerge
      - excel.Excel.Range.untrack
      - excel.Excel.Range.values
      - excel.Excel.Range.valueTypes
      - excel.Excel.Range.worksheet
  - uid: excel.Excel.Range.address
    summary: |-
      <span data-ttu-id="56c37-104">Representa a referência do intervalo no estilo A1.</span><span class="sxs-lookup"><span data-stu-id="56c37-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="56c37-105">O valor de endereço conterá a referência de planilha (por exemplo, "Planilha1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="56c37-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="56c37-106">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-106">Read-only.</span></span>

      <span data-ttu-id="56c37-107">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.addressLocal
    summary: |-
      <span data-ttu-id="56c37-108">Representa a referência de intervalo para o intervalo especificado no idioma do usuário.</span><span class="sxs-lookup"><span data-stu-id="56c37-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="56c37-109">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-109">Read-only.</span></span>

      <span data-ttu-id="56c37-110">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.cellCount
    summary: |-
      <span data-ttu-id="56c37-111">Número de células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-111">Number of cells in the range.</span></span> <span data-ttu-id="56c37-112">Essa API retornará -1 se a contagem de células exceder 2^31-1 (2.147.483.647).</span><span class="sxs-lookup"><span data-stu-id="56c37-112">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="56c37-113">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-113">Read-only.</span></span>

      <span data-ttu-id="56c37-114">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-114">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.clear
    summary: |-
      <span data-ttu-id="56c37-115">Limpe valores de intervalo, formatação, preenchimento, bordas, etc.</span><span class="sxs-lookup"><span data-stu-id="56c37-115">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="56c37-116">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-117">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-117">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="56c37-118">Opcional.</span><span class="sxs-lookup"><span data-stu-id="56c37-118">Optional.</span></span> <span data-ttu-id="56c37-119">Determina o tipo de ação clara.</span><span class="sxs-lookup"><span data-stu-id="56c37-119">Determines the type of clear action.</span></span> <span data-ttu-id="56c37-120">Consulte Excel. ClearApplyTo para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="56c37-120">See Excel.ClearApplyTo for details.</span></span>
          type:
            - excel.Excel.ClearApplyTo
  - uid: excel.Excel.Range.clear_1
    summary: |-
      <span data-ttu-id="56c37-121">Limpe valores de intervalo, formatação, preenchimento, bordas, etc.</span><span class="sxs-lookup"><span data-stu-id="56c37-121">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="56c37-122">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="56c37-123">Opcional.</span><span class="sxs-lookup"><span data-stu-id="56c37-123">Optional.</span></span> <span data-ttu-id="56c37-124">Determina o tipo de ação clara.</span><span class="sxs-lookup"><span data-stu-id="56c37-124">Determines the type of clear action.</span></span> <span data-ttu-id="56c37-125">Consulte Excel. ClearApplyTo para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="56c37-125">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: excel.Excel.Range.columnCount
    summary: |-
      <span data-ttu-id="56c37-126">Representa o número total de colunas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-126">Represents the total number of columns in the range.</span></span> <span data-ttu-id="56c37-127">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-127">Read-only.</span></span>

      <span data-ttu-id="56c37-128">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.columnHidden
    summary: |-
      <span data-ttu-id="56c37-129">Representa se todas as colunas do intervalo atual estão ocultas.</span><span class="sxs-lookup"><span data-stu-id="56c37-129">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="56c37-130">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-130">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.columnIndex
    summary: |-
      <span data-ttu-id="56c37-131">Representa o número de colunas da primeira célula no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-131">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="56c37-132">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="56c37-132">Zero-indexed.</span></span> <span data-ttu-id="56c37-133">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-133">Read-only.</span></span>

      <span data-ttu-id="56c37-134">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-134">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.context
    summary: <span data-ttu-id="56c37-135">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="56c37-135">The request context associated with the object.</span></span> <span data-ttu-id="56c37-136">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="56c37-136">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Range.delete
    summary: |-
      <span data-ttu-id="56c37-137">Exclui as células associadas ao intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-137">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="56c37-138">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-138">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: <span data-ttu-id="56c37-139">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="56c37-139">Specifies which way to shift the cells.</span></span> <span data-ttu-id="56c37-140">Consulte Excel. DeleteShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="56c37-140">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - excel.Excel.DeleteShiftDirection
  - uid: excel.Excel.Range.delete_1
    summary: |-
      <span data-ttu-id="56c37-141">Exclui as células associadas ao intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-141">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="56c37-142">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-142">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-143">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-143">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shiftString
          description: <span data-ttu-id="56c37-144">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="56c37-144">Specifies which way to shift the cells.</span></span> <span data-ttu-id="56c37-145">Consulte Excel. DeleteShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="56c37-145">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: excel.Excel.Range.format
    summary: |-
      <span data-ttu-id="56c37-146">Retorna um objeto de formato que encapsula a fonte, o preenchimento, as bordas, o alinhamento e outras propriedades do intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-146">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="56c37-147">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-147">Read-only.</span></span>

      <span data-ttu-id="56c37-148">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-148">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - excel.Excel.RangeFormat
  - uid: excel.Excel.Range.formulas
    summary: |-
      <span data-ttu-id="56c37-149">Representa a fórmula em notação A1.</span><span class="sxs-lookup"><span data-stu-id="56c37-149">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="56c37-150">Ao definir fórmulas para um intervalo, o argumento value pode ser um valor único (uma cadeia de caracteres) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="56c37-150">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="56c37-151">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-151">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="56c37-152">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.formulasLocal
    summary: |-
      <span data-ttu-id="56c37-153">Representa a fórmula em notação A1, na formatação de número da localidade e no idioma do usuário.</span><span class="sxs-lookup"><span data-stu-id="56c37-153">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="56c37-154">Por exemplo, a fórmula "=SUM(A1, 1.5)" em inglês seria "=SOMA(A1; 1,5)" em português.</span><span class="sxs-lookup"><span data-stu-id="56c37-154">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="56c37-155">Ao definir fórmulas para um intervalo, o argumento value pode ser um valor único (uma cadeia de caracteres) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="56c37-155">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="56c37-156">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-156">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="56c37-157">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-157">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.formulasR1C1
    summary: |-
      <span data-ttu-id="56c37-158">Representa a fórmula em notação no estilo L1C1.</span><span class="sxs-lookup"><span data-stu-id="56c37-158">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="56c37-159">Ao definir fórmulas para um intervalo, o argumento value pode ser um valor único (uma cadeia de caracteres) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="56c37-159">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="56c37-160">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-160">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="56c37-161">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-161">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.getBoundingRect
    summary: |-
      <span data-ttu-id="56c37-162">Obtém o menor objeto Range que engloba os intervalos determinados.</span><span class="sxs-lookup"><span data-stu-id="56c37-162">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="56c37-163">Por exemplo, o GetBoundingRect de "B2:C5" e "D10:E15" é "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="56c37-163">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="56c37-164">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-164">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-165">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-165">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="56c37-166">O nome ou endereço do intervalo ou o objeto Range.</span><span class="sxs-lookup"><span data-stu-id="56c37-166">The range object or address or range name.</span></span>
          type:
            - Range | string
  - uid: excel.Excel.Range.getCell
    summary: |-
      <span data-ttu-id="56c37-167">Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna.</span><span class="sxs-lookup"><span data-stu-id="56c37-167">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="56c37-168">A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha.</span><span class="sxs-lookup"><span data-stu-id="56c37-168">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="56c37-169">A localização da célula retornada está relacionada à célula superior esquerda do intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-169">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="56c37-170">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-170">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-171">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-171">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="56c37-172">O número da linha da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="56c37-172">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="56c37-173">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="56c37-173">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="56c37-174">O número da coluna da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="56c37-174">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="56c37-175">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="56c37-175">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getColumn
    summary: |-
      <span data-ttu-id="56c37-176">Obtém uma coluna incluída no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-176">Gets a column contained in the range.</span></span>

      <span data-ttu-id="56c37-177">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-177">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-178">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-178">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="56c37-179">O número da coluna do intervalo a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="56c37-179">Column number of the range to be retrieved.</span></span> <span data-ttu-id="56c37-180">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="56c37-180">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getColumnsAfter
    summary: |-
      <span data-ttu-id="56c37-181">Obtém um determinado número de colunas à direita do objeto Range atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-181">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="56c37-182">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-182">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="56c37-p120">Opcional. O número de colunas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.</span><span class="sxs-lookup"><span data-stu-id="56c37-p120">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getColumnsBefore
    summary: |-
      <span data-ttu-id="56c37-188">Obtém um determinado número de colunas à esquerda do objeto Range atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-188">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="56c37-189">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-189">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="56c37-p121">Opcional. O número de colunas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.</span><span class="sxs-lookup"><span data-stu-id="56c37-p121">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getEntireColumn
    summary: |-
      <span data-ttu-id="56c37-195">Obtém um objeto que representa a coluna inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `getEntireColumn` é um intervalo que representa as colunas "B:E").</span><span class="sxs-lookup"><span data-stu-id="56c37-195">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="56c37-196">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-196">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-197">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-197">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getEntireRow
    summary: |-
      <span data-ttu-id="56c37-198">Obtém um objeto que representa a linha inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `GetEntireRow` é um intervalo que representa as linhas "4:11").</span><span class="sxs-lookup"><span data-stu-id="56c37-198">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="56c37-199">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-199">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-200">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-200">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getIntersection
    summary: |-
      <span data-ttu-id="56c37-201">Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados.</span><span class="sxs-lookup"><span data-stu-id="56c37-201">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="56c37-202">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-202">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-203">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-203">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="56c37-204">O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.</span><span class="sxs-lookup"><span data-stu-id="56c37-204">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - Range | string
  - uid: excel.Excel.Range.getIntersectionOrNullObject
    summary: |-
      <span data-ttu-id="56c37-205">Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados.</span><span class="sxs-lookup"><span data-stu-id="56c37-205">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="56c37-206">Se nenhuma interseção for encontrada, retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="56c37-206">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="56c37-207">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-207">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-208">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-208">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="56c37-209">O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.</span><span class="sxs-lookup"><span data-stu-id="56c37-209">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - Range | string
  - uid: excel.Excel.Range.getLastCell
    summary: |-
      <span data-ttu-id="56c37-210">Obtém a última célula do intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-210">Gets the last cell within the range.</span></span> <span data-ttu-id="56c37-211">Por exemplo, a última célula de "B2:D5" é "D5".</span><span class="sxs-lookup"><span data-stu-id="56c37-211">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="56c37-212">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-212">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-213">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-213">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getLastColumn
    summary: |-
      <span data-ttu-id="56c37-214">Obtém a última coluna do intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-214">Gets the last column within the range.</span></span> <span data-ttu-id="56c37-215">Por exemplo, a última coluna de "B2:D5" é "D2:D5".</span><span class="sxs-lookup"><span data-stu-id="56c37-215">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="56c37-216">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-216">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-217">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-217">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getLastRow
    summary: |-
      <span data-ttu-id="56c37-218">Obtém a última linha do intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-218">Gets the last row within the range.</span></span> <span data-ttu-id="56c37-219">Por exemplo, a última linha de "B2:D5" é "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="56c37-219">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="56c37-220">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-220">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-221">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-221">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getOffsetRange
    summary: |-
      <span data-ttu-id="56c37-p126">Obtém um objeto que representa um intervalo deslocado do intervalo especificado. A dimensão do intervalo retornado corresponde a esse intervalo. Se o intervalo resultante for imposto para fora dos limites da grade da planilha, o sistema gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="56c37-p126">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="56c37-225">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-225">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-226">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-226">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="56c37-p127">O número de linhas (positivo, negativo ou 0) com base no qual o intervalo deve ser deslocado. Os valores positivos são deslocados para baixo e os negativos, para cima.</span><span class="sxs-lookup"><span data-stu-id="56c37-p127">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="56c37-p128">O número de colunas (positivo, negativo ou 0) com base no qual o intervalo deve ser deslocado. Os valores positivos são deslocados para a direita e os negativos, para a esquerda.</span><span class="sxs-lookup"><span data-stu-id="56c37-p128">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getResizedRange
    summary: |-
      <span data-ttu-id="56c37-231">Obtém um objeto Range semelhante ao objeto Range atual, mas com seu canto inferior direito expandido (ou recolhido) por um determinado número de linhas e colunas.</span><span class="sxs-lookup"><span data-stu-id="56c37-231">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="56c37-232">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-232">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="56c37-p129">O número de linhas pelo qual expandir o canto inferior direito, referente ao intervalo atual. Use um número positivo para expandir o intervalo ou um número negativo para diminuí-lo.</span><span class="sxs-lookup"><span data-stu-id="56c37-p129">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="56c37-235">O número de colunas pelas quais expandir o canto inferior direito, em relação ao intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-235">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="56c37-236">Use um número positivo para expandir o intervalo ou um número negativo para diminuí-lo.</span><span class="sxs-lookup"><span data-stu-id="56c37-236">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getRow
    summary: |-
      <span data-ttu-id="56c37-237">Obtém uma linha contida no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-237">Gets a row contained in the range.</span></span>

      <span data-ttu-id="56c37-238">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-238">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-239">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-239">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="56c37-240">O número da linha do intervalo a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="56c37-240">Row number of the range to be retrieved.</span></span> <span data-ttu-id="56c37-241">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="56c37-241">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getRowsAbove
    summary: |-
      <span data-ttu-id="56c37-242">Obtém um determinado número de linhas acima do objeto Range atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-242">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="56c37-243">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-243">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="56c37-p132">Opcional. O número de linhas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.</span><span class="sxs-lookup"><span data-stu-id="56c37-p132">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getRowsBelow
    summary: |-
      <span data-ttu-id="56c37-249">Obtém um determinado número de linhas abaixo do objeto Range atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-249">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="56c37-250">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-250">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="56c37-p133">Opcional. O número de linhas a serem incluídas no intervalo resultante. Em geral, use um número positivo para criar um intervalo fora do intervalo atual. Você também pode usar um número negativo para criar um intervalo dentro do intervalo atual. O valor padrão é 1.</span><span class="sxs-lookup"><span data-stu-id="56c37-p133">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getUsedRange
    summary: |-
      <span data-ttu-id="56c37-p134">Retorna o intervalo usado do objeto range determinado. Se não houver nenhuma célula usada dentro do intervalo, essa função gerará um erro ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="56c37-p134">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="56c37-258">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-258">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-259">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-259">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="56c37-260">Considera apenas as células com valores como células usadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-260">Considers only cells with values as used cells.</span></span> <span data-ttu-id="56c37-261">\[Conjunto de APIs: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="56c37-261">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Range.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="56c37-p136">Retorna o intervalo usado do objeto range determinado. Se não houver nenhuma célula usada no intervalo, esta função retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="56c37-p136">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="56c37-264">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-264">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-265">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-265">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="56c37-266">Considera apenas as células com valores como células usadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-266">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Range.getVisibleView
    summary: |-
      <span data-ttu-id="56c37-267">Representa as linhas visíveis do intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-267">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="56c37-268">\[[Conjunto de APIs: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-268">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - excel.Excel.RangeView
        description: ''
  - uid: excel.Excel.Range.hidden
    summary: |-
      <span data-ttu-id="56c37-269">Representa se todas as células do intervalo atual estão ocultas.</span><span class="sxs-lookup"><span data-stu-id="56c37-269">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="56c37-270">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-270">Read-only.</span></span>

      <span data-ttu-id="56c37-271">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-271">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.insert
    summary: |-
      <span data-ttu-id="56c37-p138">Insere uma célula ou um intervalo de células na planilha, no lugar desse intervalo, e desloca as outras células para liberar espaço. Retorna um novo objeto Range no espaço em branco atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-p138">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="56c37-274">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-274">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-275">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-275">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="56c37-276">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="56c37-276">Specifies which way to shift the cells.</span></span> <span data-ttu-id="56c37-277">Consulte Excel. InsertShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="56c37-277">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - excel.Excel.InsertShiftDirection
  - uid: excel.Excel.Range.insert_1
    summary: |-
      <span data-ttu-id="56c37-p140">Insere uma célula ou um intervalo de células na planilha, no lugar desse intervalo, e desloca as outras células para liberar espaço. Retorna um novo objeto Range no espaço em branco atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-p140">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="56c37-280">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-280">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="56c37-281">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="56c37-281">Specifies which way to shift the cells.</span></span> <span data-ttu-id="56c37-282">Consulte Excel. InsertShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="56c37-282">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: excel.Excel.Range.load
    summary: <span data-ttu-id="56c37-283">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="56c37-283">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="56c37-284">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="56c37-284">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="56c37-285">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="56c37-285">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="56c37-286">`load(option?: string | string[]): Excel.Range`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-286">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="56c37-287">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-287">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="56c37-288">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="56c37-288">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id="56c37-289">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="56c37-289">It is similar to the preceding signature.</span></span> <span data-ttu-id="56c37-290">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="56c37-290">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="56c37-291">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="56c37-291">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="56c37-292">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="56c37-292">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.RangeLoadOptions
  - uid: excel.Excel.Range.load_1
    summary: <span data-ttu-id="56c37-293">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="56c37-293">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="56c37-294">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="56c37-294">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-295">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-295">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="56c37-296">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-296">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.Range.load_2
    summary: <span data-ttu-id="56c37-297">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="56c37-297">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="56c37-298">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="56c37-298">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="56c37-299">Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-299">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Range.merge
    summary: |-
      <span data-ttu-id="56c37-300">Mescla as células do intervalo em uma região da planilha.</span><span class="sxs-lookup"><span data-stu-id="56c37-300">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="56c37-301">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-301">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-302">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-302">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: <span data-ttu-id="56c37-303">Opcional.</span><span class="sxs-lookup"><span data-stu-id="56c37-303">Optional.</span></span> <span data-ttu-id="56c37-304">Defina true para mesclar células em todas as linhas do intervalo especificado como células mescladas separadamente.</span><span class="sxs-lookup"><span data-stu-id="56c37-304">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id="56c37-305">O valor padrão é false.</span><span class="sxs-lookup"><span data-stu-id="56c37-305">The default value is false.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Range.numberFormat
    summary: |-
      <span data-ttu-id="56c37-306">Representa o código de formato de número do Excel para o intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="56c37-306">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="56c37-307">Ao definir o formato de número para um intervalo, o argumento value pode ser um valor único (String) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="56c37-307">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="56c37-308">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-308">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="56c37-309">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-309">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.rowCount
    summary: |-
      <span data-ttu-id="56c37-310">Retorna o número total de linhas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-310">Returns the total number of rows in the range.</span></span> <span data-ttu-id="56c37-311">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-311">Read-only.</span></span>

      <span data-ttu-id="56c37-312">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-312">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.rowHidden
    summary: |-
      <span data-ttu-id="56c37-313">Representa se todas as linhas do intervalo atual estão ocultas.</span><span class="sxs-lookup"><span data-stu-id="56c37-313">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="56c37-314">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-314">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.rowIndex
    summary: |-
      <span data-ttu-id="56c37-315">Representa o número de linhas da primeira célula no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-315">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="56c37-316">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="56c37-316">Zero-indexed.</span></span> <span data-ttu-id="56c37-317">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-317">Read-only.</span></span>

      <span data-ttu-id="56c37-318">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-318">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.select
    summary: |-
      <span data-ttu-id="56c37-319">Seleciona o intervalo especificado na interface do usuário do Excel.</span><span class="sxs-lookup"><span data-stu-id="56c37-319">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="56c37-320">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-320">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-321">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-321">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.set
    summary: '<span data-ttu-id="56c37-322">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="56c37-322">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="56c37-323">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="56c37-323">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="56c37-324">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="56c37-324">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="56c37-325">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-325">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="56c37-326">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="56c37-326">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: <span data-ttu-id="56c37-327">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-327">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Range.set_1
    summary: '<span data-ttu-id="56c37-328">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="56c37-328">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Range
  - uid: excel.Excel.Range.sort
    summary: |-
      <span data-ttu-id="56c37-329">Representa a classificação de intervalo do intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-329">Represents the range sort of the current range.</span></span> <span data-ttu-id="56c37-330">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-330">Read-only.</span></span>

      <span data-ttu-id="56c37-331">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-331">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - excel.Excel.RangeSort
  - uid: excel.Excel.Range.text
    summary: |-
      <span data-ttu-id="56c37-332">Valores de texto do intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="56c37-332">Text values of the specified range.</span></span> <span data-ttu-id="56c37-333">O valor de texto não depende da largura da célula.</span><span class="sxs-lookup"><span data-stu-id="56c37-333">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="56c37-334">A \# substituição de sinal que acontece na IU do Excel não afetará o valor de texto RETORNADO pela API.</span><span class="sxs-lookup"><span data-stu-id="56c37-334">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="56c37-335">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-335">Read-only.</span></span>

      <span data-ttu-id="56c37-336">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-336">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: excel.Excel.Range.toJSON
    summary: '<span data-ttu-id="56c37-337">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="56c37-337">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="56c37-338">.</span><span class="sxs-lookup"><span data-stu-id="56c37-338"></span></span> <span data-ttu-id="56c37-339">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="56c37-339"></span></span><!-- --><span data-ttu-id="56c37-340">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. Range original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="56c37-340">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="56c37-341">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="56c37-341">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - excel.Excel.Interfaces.RangeData
        description: ''
  - uid: excel.Excel.Range.track
    summary: '<span data-ttu-id="56c37-342">Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento.</span><span class="sxs-lookup"><span data-stu-id="56c37-342">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="56c37-343">Essa chamada é uma abreviação de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="56c37-343">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="56c37-344">Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.</span><span class="sxs-lookup"><span data-stu-id="56c37-344">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.unmerge
    summary: |-
      <span data-ttu-id="56c37-345">Desfaz a mesclagem das células do intervalo em células separadas.</span><span class="sxs-lookup"><span data-stu-id="56c37-345">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="56c37-346">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-346">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-347">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-347">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.untrack
    summary: '<span data-ttu-id="56c37-348">Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="56c37-348">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="56c37-349">Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="56c37-349">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="56c37-350">Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los.</span><span class="sxs-lookup"><span data-stu-id="56c37-350">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="56c37-351">Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.</span><span class="sxs-lookup"><span data-stu-id="56c37-351">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="56c37-352">Exemplos</span><span class="sxs-lookup"><span data-stu-id="56c37-352">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: excel.Excel.Range.values
    summary: |-
      <span data-ttu-id="56c37-353">Representa os valores brutos do intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="56c37-353">Represents the raw values of the specified range.</span></span> <span data-ttu-id="56c37-354">Os dados retornados podem ser dos tipos: cadeia de caracteres, número ou booliano.</span><span class="sxs-lookup"><span data-stu-id="56c37-354">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="56c37-355">Células que contêm um erro retornarão a cadeia de caracteres de erro.</span><span class="sxs-lookup"><span data-stu-id="56c37-355">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="56c37-356">Ao definir valores para um intervalo, o argumento value pode ser um valor único (String, Number ou Boolean) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="56c37-356">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="56c37-357">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="56c37-357">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="56c37-358">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-358">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.valueTypes
    summary: |-
      <span data-ttu-id="56c37-359">Representa o tipo de dados de cada célula.</span><span class="sxs-lookup"><span data-stu-id="56c37-359">Represents the type of data of each cell.</span></span> <span data-ttu-id="56c37-360">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-360">Read-only.</span></span>

      <span data-ttu-id="56c37-361">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-361">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'Excel.RangeValueType[][]'
  - uid: excel.Excel.Range.worksheet
    summary: |-
      <span data-ttu-id="56c37-362">A planilha que contém o intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="56c37-362">The worksheet containing the current range.</span></span> <span data-ttu-id="56c37-363">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="56c37-363">Read-only.</span></span>

      <span data-ttu-id="56c37-364">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="56c37-364">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet