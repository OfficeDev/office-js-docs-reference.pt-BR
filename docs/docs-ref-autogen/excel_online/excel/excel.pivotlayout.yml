### YamlMime:TSType
name: Excel.PivotLayout
uid: excel!Excel.PivotLayout:class
package: excel!
fullName: Excel.PivotLayout
summary: >-
  Representa o layout visual da Tabela Dinâmica.


  \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: altTextDescription
  uid: excel!Excel.PivotLayout#altTextDescription:member
  package: excel!
  fullName: altTextDescription
  summary: >-
    A descrição de texto alt da Tabela Dinâmica.


    O texto alt fornece representações alternativas baseadas em texto das informações contidas na Tabela Dinâmica. Essas informações são úteis para pessoas com deficiências visuais ou cognitivas que talvez não possam ver ou compreender a tabela. Um título pode ser lido para uma pessoa com deficiência e é usado para determinar se deseja ouvir a descrição do conteúdo.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'altTextDescription: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Set the alt text for the displayed PivotTable.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.altTextTitle = \"Farm Sales PivotTable\";\n  pivotLayout.altTextDescription = \"A summary of fruit sales. It is pivoted on farm name, and fruit type. The aggregated data is both the sums of crates sold at the farms and the sums of crates sold wholesale.\";\n  console.log(\"Adding alt text. Check the PivotTable settings to see the changes.\");\n\n  await context.sync();\n});\n```"
- name: altTextTitle
  uid: excel!Excel.PivotLayout#altTextTitle:member
  package: excel!
  fullName: altTextTitle
  summary: >-
    O título de texto alt da Tabela Dinâmica.


    O texto alt fornece representações alternativas baseadas em texto das informações contidas na Tabela Dinâmica. Essas informações são úteis para pessoas com deficiências visuais ou cognitivas que talvez não possam ver ou compreender a tabela. Um título pode ser lido para uma pessoa com deficiência e é usado para determinar se deseja ouvir a descrição do conteúdo.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'altTextTitle: string;'
    return:
      type: string
- name: autoFormat
  uid: excel!Excel.PivotLayout#autoFormat:member
  package: excel!
  fullName: autoFormat
  summary: >-
    Especifica se a formatação será formatada automaticamente quando for atualizada ou quando os campos são movidos.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFormat: boolean;'
    return:
      type: boolean
- name: context
  uid: excel!Excel.PivotLayout#context:member
  package: excel!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do Office do aplicativo host.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: emptyCellText
  uid: excel!Excel.PivotLayout#emptyCellText:member
  package: excel!
  fullName: emptyCellText
  summary: >-
    O texto que é preenchido automaticamente em qualquer célula vazia na Tabela Dinâmica se `fillEmptyCells == true`<!-- -->. Observe que esse valor persiste se `fillEmptyCells` estiver definido como `false`<!-- -->e essa configuração desse valor não definirá essa propriedade como `true`<!-- -->. Por padrão, esta é uma cadeia de caracteres vazia.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'emptyCellText: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.emptyCellText = \"--\";\n\n  // Set the text alignment to match the rest of the PivotTable.\n  pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;\n  await context.sync();\n});\n```"
- name: enableFieldList
  uid: excel!Excel.PivotLayout#enableFieldList:member
  package: excel!
  fullName: enableFieldList
  summary: >-
    Especifica se a lista de campos pode ser mostrada na interface do usuário.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableFieldList: boolean;'
    return:
      type: boolean
- name: fillEmptyCells
  uid: excel!Excel.PivotLayout#fillEmptyCells:member
  package: excel!
  fullName: fillEmptyCells
  summary: >-
    Especifica se as células vazias na Tabela Dinâmica devem ser preenchidas com o `emptyCellText`<!-- -->. O padrão é `false`<!-- -->. Observe que o valor de `emptyCellText` persiste quando essa propriedade é definida como `false`<!-- -->.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'fillEmptyCells: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Toggle whether empty cells are filled with a default value.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load(\"fillEmptyCells\");\n  await context.sync();\n\n  let fillToSet = !pivotLayout.fillEmptyCells;\n  console.log(`Filling empty cells? - ${fillToSet}`);\n\n  pivotLayout.fillEmptyCells = fillToSet;\n  await context.sync();\n});\n```"
- name: layoutType
  uid: excel!Excel.PivotLayout#layoutType:member
  package: excel!
  fullName: layoutType
  summary: >-
    Essa propriedade indica o PivotLayoutType de todos os campos da Tabela Dinâmica. Se os campos têm diferentes estados, ele será nulo.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'layoutType: Excel.PivotLayoutType | "Compact" | "Tabular" | "Outline";'
    return:
      type: <xref uid="excel!Excel.PivotLayoutType:enum" /> | "Compact" | "Tabular" | "Outline"
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Change the PivotLayout.type to a new type.\n  const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n  pivotTable.layout.load(\"layoutType\");\n  await context.sync();\n\n  // Cycle between the three layout types.\n  if (pivotTable.layout.layoutType === \"Compact\") {\n    pivotTable.layout.layoutType = \"Outline\";\n  } else if (pivotTable.layout.layoutType === \"Outline\") {\n    pivotTable.layout.layoutType = \"Tabular\";\n  } else {\n    pivotTable.layout.layoutType = \"Compact\";\n  }\n\n  await context.sync();\n  console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n});\n```"
- name: preserveFormatting
  uid: excel!Excel.PivotLayout#preserveFormatting:member
  package: excel!
  fullName: preserveFormatting
  summary: >-
    Especifica se a formatação é preservada quando o relatório é atualizado ou recalculado por operações como pivoting, classificação ou alteração de itens de campo de página.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'preserveFormatting: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Set whether the PivotTable keeps the established format after it is refreshed and recalculated.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load(\"preserveFormatting\");\n  await context.sync();\n\n  let preserveFormattingToSet = !pivotLayout.preserveFormatting;\n  console.log(`Preserve the formatting PivotTable after a refresh? - ${preserveFormattingToSet}`);\n\n  pivotLayout.preserveFormatting = preserveFormattingToSet;\n  await context.sync();\n});\n```"
- name: showColumnGrandTotals
  uid: excel!Excel.PivotLayout#showColumnGrandTotals:member
  package: excel!
  fullName: showColumnGrandTotals
  summary: >-
    Especifica se o relatório de tabela dinâmica mostra totais grandes para colunas.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showColumnGrandTotals: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Turn the grand totals on and off for the rows and columns.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load([\"showRowGrandTotals\", \"showColumnGrandTotals\"]);\n  await context.sync();\n\n  let showColumnTotals = !pivotLayout.showColumnGrandTotals;\n  let showRowTotals = !pivotLayout.showRowGrandTotals;\n  console.log(`Show column grand totals? - ${showColumnTotals}`);\n  console.log(`Show row grand totals? - ${showRowTotals}`);\n\n  pivotLayout.showColumnGrandTotals = showColumnTotals;\n  pivotLayout.showRowGrandTotals = showRowTotals;\n\n  await context.sync();\n});\n```"
- name: showFieldHeaders
  uid: excel!Excel.PivotLayout#showFieldHeaders:member
  package: excel!
  fullName: showFieldHeaders
  summary: >-
    Especifica se a Tabela Dinâmica exibe os headers de campo (legendas de campo e drop-downs de filtro).


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showFieldHeaders: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Turn the field headers on and off for the row and column hierarchies.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n  pivotLayout.load(\"showFieldHeaders\");\n  await context.sync();\n\n  let showHeaders = !pivotLayout.showFieldHeaders;\n  console.log(`Show field headers? - ${showHeaders}`);\n  pivotLayout.showFieldHeaders = showHeaders;\n  await context.sync();\n});\n```"
- name: showRowGrandTotals
  uid: excel!Excel.PivotLayout#showRowGrandTotals:member
  package: excel!
  fullName: showRowGrandTotals
  summary: >-
    Especifica se o relatório de tabela dinâmica mostra totais grandes para linhas.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showRowGrandTotals: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Turn the grand totals on and off for the rows and columns.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load([\"showRowGrandTotals\", \"showColumnGrandTotals\"]);\n  await context.sync();\n\n  let showColumnTotals = !pivotLayout.showColumnGrandTotals;\n  let showRowTotals = !pivotLayout.showRowGrandTotals;\n  console.log(`Show column grand totals? - ${showColumnTotals}`);\n  console.log(`Show row grand totals? - ${showRowTotals}`);\n\n  pivotLayout.showColumnGrandTotals = showColumnTotals;\n  pivotLayout.showRowGrandTotals = showRowTotals;\n\n  await context.sync();\n});\n```"
- name: subtotalLocation
  uid: excel!Excel.PivotLayout#subtotalLocation:member
  package: excel!
  fullName: subtotalLocation
  summary: >-
    Essa propriedade indica o `SubtotalLocationType` de todos os campos na Tabela Dinâmica. Se os campos têm estados diferentes, isso será `null`<!-- -->.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subtotalLocation: Excel.SubtotalLocationType | "AtTop" | "AtBottom" | "Off";'
    return:
      type: <xref uid="excel!Excel.SubtotalLocationType:enum" /> | "AtTop" | "AtBottom" | "Off"
methods:
- name: displayBlankLineAfterEachItem(display)
  uid: excel!Excel.PivotLayout#displayBlankLineAfterEachItem:member(1)
  package: excel!
  fullName: displayBlankLineAfterEachItem(display)
  summary: >-
    Define se uma linha em branco deve ou não ser exibida após cada item. Isso é definido no nível global da Tabela Dinâmica e aplicado a PivotFields individuais. Essa função substitui a configuração de todos os campos na Tabela Dinâmica para o valor do `display` parâmetro.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayBlankLineAfterEachItem(display: boolean): void;'
    parameters:
    - id: display
      description: True liga a configuração de exibição de linha em branco. False o desliga.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Add a blank row after each PivotItem in the row hierarchy.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.displayBlankLineAfterEachItem(true);\n  console.log(\"Setting `PivotLayout.displayBlankLineAfterEachItem` to true.\");\n\n  await context.sync();\n});\n```"
- name: getColumnLabelRange()
  uid: excel!Excel.PivotLayout#getColumnLabelRange:member(1)
  package: excel!
  fullName: getColumnLabelRange()
  summary: >-
    Retorna o intervalo onde residem os rótulos de coluna da Tabela Dinâmica.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnLabelRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getDataBodyRange()
  uid: excel!Excel.PivotLayout#getDataBodyRange:member(1)
  package: excel!
  fullName: getDataBodyRange()
  summary: >-
    Retorna o intervalo onde residem os valores de dados da tabela dinâmica.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBodyRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // the layout controls the ranges used by the PivotTable\n    const range = pivotTable.layout.getDataBodyRange();\n\n    // get all the data hierarchy totals\n    const grandTotalRange = range.getLastRow();\n    grandTotalRange.load(\"address\");\n    await context.sync();\n    \n    // use the wholesale and farm sale totals to make a final sum\n    const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange(\"B27:C27\");\n    masterTotalRange.formulas = [[\"All Crates\", \"=SUM(\" + grandTotalRange.address + \")\"]];\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // the layout controls the ranges used by the PivotTable\n    const range = pivotTable.layout.getDataBodyRange();\n\n    // get all the data hierarchy totals\n    const grandTotalRange = range.getLastRow();\n    grandTotalRange.load(\"address\");\n    await context.sync();\n    \n    // use the wholesale and farm sale totals to make a final sum\n    const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange(\"B27:C27\");\n    masterTotalRange.formulas = [[\"All Crates\", \"=SUM(\" + grandTotalRange.address + \")\"]];\n    await context.sync();\n});\n```"
- name: getDataHierarchy(cell)
  uid: excel!Excel.PivotLayout#getDataHierarchy:member(1)
  package: excel!
  fullName: getDataHierarchy(cell)
  summary: >-
    Obtém o DataHierarchy que é usado para calcular o valor em um intervalo especificado dentro da Tabela dinâmica.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataHierarchy(cell: Range | string): Excel.DataPivotHierarchy;'
    parameters:
    - id: cell
      description: Uma única célula dentro do corpo de dados de tabela dinâmica.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.DataPivotHierarchy:class" />
      description: O objeto DataPivotHierarchy usado para calcular o valor na célula especificada.
- name: getFilterAxisRange()
  uid: excel!Excel.PivotLayout#getFilterAxisRange:member(1)
  package: excel!
  fullName: getFilterAxisRange()
  summary: >-
    Retorna o intervalo de área de filtro da Tabela Dinâmica.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilterAxisRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getPivotItems(axis, cell)
  uid: excel!Excel.PivotLayout#getPivotItems:member(1)
  package: excel!
  fullName: getPivotItems(axis, cell)
  summary: >-
    Obtém os Itens dinâmicos de um eixo que compõem o valor em um intervalo especificado dentro da Tabela dinâmica.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotItems(axis: Excel.PivotAxis, cell: Range | string): Excel.PivotItemCollection;'
    parameters:
    - id: axis
      description: O eixo a partir do qual obter os PivotItems. Deve ser "linha" ou "coluna".
      type: <xref uid="excel!Excel.PivotAxis:enum" />
    - id: cell
      description: Uma única célula dentro do corpo de dados da Tabela Dinâmica.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.PivotItemCollection:class" />
      description: Um PivotItemCollection dos PivotItems que são usados para calcular os valores na linha especificada.
- name: getPivotItems(axisString, cell)
  uid: excel!Excel.PivotLayout#getPivotItems:member(2)
  package: excel!
  fullName: getPivotItems(axisString, cell)
  summary: >-
    Obtém os Itens dinâmicos de um eixo que compõem o valor em um intervalo especificado dentro da Tabela dinâmica.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotItems(axisString: "Unknown" | "Row" | "Column" | "Data" | "Filter", cell: Range | string): Excel.PivotItemCollection;'
    parameters:
    - id: axisString
      description: O eixo a partir do qual obter os PivotItems. Deve ser "linha" ou "coluna".
      type: "\"Unknown\" | \"Row\" | \"Column\" | \"Data\" | \"Filter\""
    - id: cell
      description: Uma única célula dentro do corpo de dados da Tabela Dinâmica.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.PivotItemCollection:class" />
      description: Um PivotItemCollection dos PivotItems que são usados para calcular os valores na linha especificada.
- name: getRange()
  uid: excel!Excel.PivotLayout#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: >-
    Retorna o intervalo em que a Tabela Dinâmica existe, excluindo a área de filtro.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRowLabelRange()
  uid: excel!Excel.PivotLayout#getRowLabelRange:member(1)
  package: excel!
  fullName: getRowLabelRange()
  summary: >-
    Retorna o intervalo onde residem os rótulos de linha da Tabela Dinâmica.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowLabelRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.PivotLayout#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.PivotLayoutLoadOptions): Excel.PivotLayout;'
    parameters:
    - id: options
      description: Fornece opções para quais propriedades do objeto deve ser carregado.
      type: <xref uid="excel!Excel.Interfaces.PivotLayoutLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.PivotLayout#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.PivotLayout;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgulas ou uma matriz de cadeias de caracteres que especificam as propriedades a ser carregadas.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.PivotLayout#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.PivotLayout;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades a ser carregadas e é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades de navegação a `propertyNamesAndPaths.expand` ser carregadas.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: ''
- name: repeatAllItemLabels(repeatLabels)
  uid: excel!Excel.PivotLayout#repeatAllItemLabels:member(1)
  package: excel!
  fullName: repeatAllItemLabels(repeatLabels)
  summary: >-
    Define a configuração "repetir todos os rótulos de item" em todos os campos da Tabela Dinâmica.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'repeatAllItemLabels(repeatLabels: boolean): void;'
    parameters:
    - id: repeatLabels
      description: True liga a configuração de exibição de repetição de rótulo. False o desliga.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Repeat the PivotItem labels for each row used by another level of the row hierarchy.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.repeatAllItemLabels(true);\n  console.log(\"Setting `PivotLayout.repeatAllItemLabels` to true.\");\n\n  await context.sync();\n});\n```"
- name: set(properties, options)
  uid: excel!Excel.PivotLayout#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
  remarks: >-
    Este método tem a seguinte assinatura adicional:


    `set(properties: Excel.PivotLayout): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.PivotLayoutUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Um objeto JavaScript com propriedades estruturadas isomorficamente para as propriedades do objeto no qual o método é chamado.
      type: <xref uid="excel!Excel.Interfaces.PivotLayoutUpdateData:interface" />
    - id: options
      description: Fornece uma opção para suprimir erros se o objeto properties tentar definir qualquer propriedade somente leitura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.PivotLayout#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.PivotLayout): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.PivotLayout:class" />
    return:
      type: void
      description: ''
- name: setAutoSortOnCell(cell, sortBy)
  uid: excel!Excel.PivotLayout#setAutoSortOnCell:member(1)
  package: excel!
  fullName: setAutoSortOnCell(cell, sortBy)
  summary: >-
    Define a Tabela Dinâmica para classificar automaticamente usando a célula especificada para selecionar automaticamente todos os critérios e contextos necessários. Funciona de maneira idêntica à aplicação de uma autoclassificação da interface do usuário.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAutoSortOnCell(cell: Range | string, sortBy: Excel.SortBy): void;'
    parameters:
    - id: cell
      description: Uma única célula a ser usada obterá os critérios para aplicar a autossortação.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: sortBy
      description: A direção da classificação.
      type: <xref uid="excel!Excel.SortBy:enum" />
    return:
      type: void
      description: ''
- name: setAutoSortOnCell(cell, sortByString)
  uid: excel!Excel.PivotLayout#setAutoSortOnCell:member(2)
  package: excel!
  fullName: setAutoSortOnCell(cell, sortByString)
  summary: >-
    Define a Tabela Dinâmica para classificar automaticamente usando a célula especificada para selecionar automaticamente todos os critérios e contextos necessários. Funciona de maneira idêntica à aplicação de uma autoclassificação da interface do usuário.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAutoSortOnCell(cell: Range | string, sortByString: "Ascending" | "Descending"): void;'
    parameters:
    - id: cell
      description: Uma única célula a ser usada obterá os critérios para aplicar a autossortação.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: sortByString
      description: A direção da classificação.
      type: "\"Ascending\" | \"Descending\""
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.PivotLayout#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Substitui o método JavaScript `toJSON()` para fornecer uma saída mais útil quando um objeto API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado a ele.) Enquanto a versão original Excel. Objeto PivotLayout é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.PivotLayoutData`<!-- -->) que contém cópias rasas de quaisquer propriedades filho carregadas do objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.PivotLayoutData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.PivotLayoutData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: c374a40ec1d80bcdfee93b40ed19fffa8ef12d7d
  ms.sourcegitcommit: 1f63896cdaa3b8ac3bfcb506161116a564538837
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 07/02/2021
  ms.locfileid: "53261013"
