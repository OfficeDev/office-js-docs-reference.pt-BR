### YamlMime:UniversalReference
ms.openlocfilehash: 4458a9360417b22380b7a1d6573031edf02217d6
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 01/17/2019
ms.locfileid: "28725008"
items:
- uid: excel.Excel.TableRowCollection
  summary: >-
    Representa uma coleção de todas as linhas que fazem parte da tabela.


    Observe que, ao contrário de intervalos ou colunas, que irá ajustar se novas linhas/colunas são adicionadas antes-los, um objeto TableRow representa a localização física de linha da tabela, mas não os dados. Ou seja, se os dados são classificados ou novas linhas são adicionadas, uma linha da tabela continuarão ao ponto no índice para o qual ele foi criado.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.TableRowCollection
  fullName: Excel.TableRowCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableRowCollection.add
  - excel.Excel.TableRowCollection.context
  - excel.Excel.TableRowCollection.count
  - excel.Excel.TableRowCollection.getCount
  - excel.Excel.TableRowCollection.getItemAt
  - excel.Excel.TableRowCollection.items
  - excel.Excel.TableRowCollection.load
  - excel.Excel.TableRowCollection.toJSON
- uid: excel.Excel.TableRowCollection.add
  summary: >-
    Adiciona uma ou mais linhas à tabela. O objeto de retorno será a parte superior das linhas adicionadas recentemente.


    Observe que, ao contrário de intervalos ou colunas, que irá ajustar se novas linhas/colunas são adicionadas antes-los, um objeto TableRow representa a localização física de linha da tabela, mas não os dados. Ou seja, se os dados são classificados ou novas linhas são adicionadas, uma linha da tabela continuarão ao ponto no índice para o qual ele foi criado.


    \[[Conjunto de APIs: ExcelApi 1.1 para adicionar uma única linha; 1,4 permite a adição de várias linhas.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
  name: add(index, values)
  fullName: add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var values = [[\"Sample\", \"Values\", \"For\", \"New\", \"Row\"]];\n    var row = tables.getItem(\"Table1\").rows.add(null, values);\n    row.load('index');\n    return ctx.sync().then(function() {\n        console.log(row.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Opcional. Especifica a posição relativa da nova linha. Se for null ou -1, a adição ocorre no final. Todas as linhas abaixo da linha inserida serão deslocadas para baixo. Indexado com zero.
      type:
      - number
    - id: values
      description: Opcional. Uma matriz bidimensional de valores não formatados da linha da tabela.
      type:
      - Array<Array<boolean | string | number>> | boolean | string | number
- uid: excel.Excel.TableRowCollection.context
  summary: O contexto de solicitação associado ao objeto. Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.TableRowCollection.count
  summary: >-
    Retorna a quantidade de linhas na tabela. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableRowCollection.getCount
  summary: >-
    Obtém a quantidade de linhas na tabela.


    \[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.TableRowCollection.getItemAt
  summary: >-
    Obtém uma linha com base em sua posição na coleção.


    Observe que, ao contrário de intervalos ou colunas, que irá ajustar se novas linhas/colunas são adicionadas antes-los, um objeto TableRow representa a localização física de linha da tabela, mas não os dados. Ou seja, se os dados são classificados ou novas linhas são adicionadas, uma linha da tabela continuarão ao ponto no índice para o qual ele foi criado.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);\n    tablerow.load('name');\n    return ctx.sync().then(function() {\n            console.log(tablerow.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Valor de índice do objeto a ser recuperado. Indexados com zero.
      type:
      - number
- uid: excel.Excel.TableRowCollection.items
  summary: Obtém o filho carregado itens nesta coleção.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.TableRow[];'
    return:
      type:
      - Excel.TableRow[]
- uid: excel.Excel.TableRowCollection.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: "Além dessa assinatura, esse método tem as seguintes assinaturas:\n\n`load(option?: { select?: string; expand?: string; }): Excel.TableRowCollection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRowCollection`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tablerows = ctx.workbook.tables.getItem('Table1').rows;\n    tablerows.load('items');\n    return ctx.sync().then(function() {\n        console.log(\"tablerows Count: \" + tablerows.count);\n        for (var i = 0; i < tablerows.items.length; i++)\n        {\n            console.log(tablerows.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// In the example, we'll select the top 100 rows of the table.\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItem(\"Table1\");\n    var tableRows = table.rows.load({\"select\" : \"index, values\",\"top\": 100, \"skip\": 0 })\n    return ctx.sync().then(function() {\n        for (var i = 0; i < tableRows.items.length; i++)\n        {\n            console.log(tableRows.items[i].index);\n            console.log(tableRows.items[i].values);\n        }\n    });\n}).catch(function(error) {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableRowCollection;'
    return:
      type:
      - excel.Excel.TableRowCollection
      description: ''
    parameters:
    - id: option
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: excel.Excel.TableRowCollection.toJSON
  summary: Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o original `Excel.TableRowCollection` é um objeto de API, o `toJSON` método retorna um objeto de JavaScript sem formatação (digitado como `Excel.Interfaces.TableRowCollectionData` <!-- -->) que contém uma matriz de "itens" com superficiais cópias de todas as propriedades de itens da coleção carregadas.
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableRowCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.TableRowCollectionData
      description: ''
