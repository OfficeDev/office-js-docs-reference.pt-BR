### YamlMime:UniversalReference
ms.openlocfilehash: f8c5862a3c4f3c17e9a812790a4e49d7b5b94d7d
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 11/09/2018
ms.locfileid: "26223618"
items:
- uid: excel.Excel.WorksheetProtection
  summary: >-
    Representa a proteção de um objeto sheet.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.WorksheetProtection
  fullName: Excel.WorksheetProtection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetProtection.load
  - excel.Excel.WorksheetProtection.options
  - excel.Excel.WorksheetProtection.protect
  - excel.Excel.WorksheetProtection.protected
  - excel.Excel.WorksheetProtection.toJSON
  - excel.Excel.WorksheetProtection.unprotect
- uid: excel.Excel.WorksheetProtection.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, esse método tem as seguintes assinaturas:


    `load(option?: { select?: string; expand?: string; }): Excel.WorksheetProtection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetProtection`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
      description: ''
    parameters:
    - id: option
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: excel.Excel.WorksheetProtection.options
  summary: >-
    Opções de proteção da planilha. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: options
  fullName: options
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly options: Excel.WorksheetProtectionOptions;'
    return:
      type:
      - excel.Excel.WorksheetProtectionOptions
- uid: excel.Excel.WorksheetProtection.protect
  summary: >-
    Protege uma planilha. Falha se a planilha já foi protegida.


    \[[Conjunto de APIs: ExcelApi 1.2 para opções; 1.7 por senha](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: protect(options, password)
  fullName: protect
  langs:
  - typeScript
  type: method
  syntax:
    content: 'protect(options?: Excel.WorksheetProtectionOptions, password?: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Protect inserting or deleting rows in Sheet1\n  sheet.protection.protect({\n    allowInsertRows: false,\n    allowDeleteRows: false\n  });\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.load(\"protection/protected\");\n\n    await context.sync();\n\n    if (!activeSheet.protection.protected) {\n        activeSheet.protection.protect();\n    }\n});\n```\n```typescript\nlet password = await passwordHandler();\npasswordHelper(password);\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.load(\"protection/protected\");\n\n    await context.sync();\n\n    if (!activeSheet.protection.protected) {\n        activeSheet.protection.protect(null, password);\n    }\n});\n```"
    parameters:
    - id: options
      description: Opcional. Opções de proteção da planilha.
      type:
      - excel.Excel.WorksheetProtectionOptions
    - id: password
      description: Opcional. Senha de proteção da planilha.
      type:
      - string
- uid: excel.Excel.WorksheetProtection.protected
  summary: >-
    Indica se a planilha for protegida. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: protected
  fullName: protected
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protected: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.WorksheetProtection.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetProtectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetProtectionData
      description: ''
- uid: excel.Excel.WorksheetProtection.unprotect
  summary: >-
    Desprotege uma planilha.


    \[[Conjunto de APIs: ExcelApi 1.7 por senha](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: unprotect(password)
  fullName: unprotect
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unprotect(password?: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Remove all protects applied to Sheet1\n  sheet.protection.unprotect();\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Unprotecting a worksheet with unprotect() will remove all \n// WorksheetProtectionOptions options applied to a worksheet.\n// To remove only a subset of WorksheetProtectionOptions use the \n// protect() method and set the options you wish to remove to true.\nExcel.run(function(ctx) {\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n  sheet.protection.protect({\n    allowInsertRows: false, // Protect row insertion\n    allowDeleteRows: true // Unprotect row deletion\n  });\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.protection.unprotect();\n});\n```\n```typescript\nlet password = await passwordHandler();\npasswordHelper(password);\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.protection.unprotect(password);\n});\n```"
    parameters:
    - id: password
      description: senha de proteção da planilha.
      type:
      - string
