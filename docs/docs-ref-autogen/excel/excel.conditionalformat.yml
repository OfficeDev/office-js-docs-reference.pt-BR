### YamlMime:UniversalReference
ms.openlocfilehash: 0f978eecaa431539ca42923817eef15ddc3c2980
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 11/09/2018
ms.locfileid: "26223842"
items:
- uid: excel.Excel.ConditionalFormat
  summary: >-
    <span data-ttu-id="7ce10-101">Um objeto que encapsula o intervalo, o formato, a regra e outras propriedades de um formato condicional.</span><span class="sxs-lookup"><span data-stu-id="7ce10-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span>


    <span data-ttu-id="7ce10-102">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormat
  fullName: Excel.ConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ConditionalFormat.cellValue
  - excel.Excel.ConditionalFormat.cellValueOrNullObject
  - excel.Excel.ConditionalFormat.colorScale
  - excel.Excel.ConditionalFormat.colorScaleOrNullObject
  - excel.Excel.ConditionalFormat.custom
  - excel.Excel.ConditionalFormat.customOrNullObject
  - excel.Excel.ConditionalFormat.dataBar
  - excel.Excel.ConditionalFormat.dataBarOrNullObject
  - excel.Excel.ConditionalFormat.delete
  - excel.Excel.ConditionalFormat.getRange
  - excel.Excel.ConditionalFormat.getRangeOrNullObject
  - excel.Excel.ConditionalFormat.iconSet
  - excel.Excel.ConditionalFormat.iconSetOrNullObject
  - excel.Excel.ConditionalFormat.id
  - excel.Excel.ConditionalFormat.load
  - excel.Excel.ConditionalFormat.preset
  - excel.Excel.ConditionalFormat.presetOrNullObject
  - excel.Excel.ConditionalFormat.priority
  - excel.Excel.ConditionalFormat.stopIfTrue
  - excel.Excel.ConditionalFormat.textComparison
  - excel.Excel.ConditionalFormat.textComparisonOrNullObject
  - excel.Excel.ConditionalFormat.toJSON
  - excel.Excel.ConditionalFormat.topBottom
  - excel.Excel.ConditionalFormat.topBottomOrNullObject
  - excel.Excel.ConditionalFormat.type
- uid: excel.Excel.ConditionalFormat.cellValue
  summary: >-
    <span data-ttu-id="7ce10-103">Retorna a célula propriedades do formato condicional valor se o formato condicional atual é um tipo de CellValue.</span><span class="sxs-lookup"><span data-stu-id="7ce10-103">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="7ce10-104">Por exemplo formatar todas as células entre 5 e 10.</span><span class="sxs-lookup"><span data-stu-id="7ce10-104">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="7ce10-105">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-105">Read-only.</span></span>


    <span data-ttu-id="7ce10-106">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValue
  fullName: cellValue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-107\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-107\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-108">Retorna a célula propriedades do formato condicional valor se o formato condicional atual é um tipo de CellValue.</span><span class="sxs-lookup"><span data-stu-id="7ce10-108">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="7ce10-109">Por exemplo formatar todas as células entre 5 e 10.</span><span class="sxs-lookup"><span data-stu-id="7ce10-109">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="7ce10-110">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-110">Read-only.</span></span>


    <span data-ttu-id="7ce10-111">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValueOrNullObject
  fullName: cellValueOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
- uid: excel.Excel.ConditionalFormat.colorScale
  summary: >-
    <span data-ttu-id="7ce10-p103">Retornará as propriedades de formato condicional de ColorScale se o formato condicional atual for um tipo de ColorScale. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p103">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="7ce10-114">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-114">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScale
  fullName: colorScale
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-115\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-115\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-p104">Retornará as propriedades de formato condicional de ColorScale se o formato condicional atual for um tipo de ColorScale. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p104">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="7ce10-118">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-118">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScaleOrNullObject
  fullName: colorScaleOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
- uid: excel.Excel.ConditionalFormat.custom
  summary: >-
    <span data-ttu-id="7ce10-p105">Retornará as propriedades personalizadas do formato condicional se o formato condicional atual for um tipo personalizado. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p105">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="7ce10-121">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-121">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: custom
  fullName: custom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly custom: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-122\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-122\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.customOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-p106">Retornará as propriedades personalizadas do formato condicional se o formato condicional atual for um tipo personalizado. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p106">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="7ce10-125">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-125">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: customOrNullObject
  fullName: customOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
- uid: excel.Excel.ConditionalFormat.dataBar
  summary: >-
    <span data-ttu-id="7ce10-p107">Retornará as propriedades da barra de dados se o formato condicional atual for uma barra de dados. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p107">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="7ce10-128">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-128">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBar
  fullName: dataBar
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-129\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-129\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-p108">Retornará as propriedades da barra de dados se o formato condicional atual for uma barra de dados. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p108">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="7ce10-132">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-132">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBarOrNullObject
  fullName: dataBarOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
- uid: excel.Excel.ConditionalFormat.delete
  summary: >-
    <span data-ttu-id="7ce10-133">Exclui esse formato condicional.</span><span class="sxs-lookup"><span data-stu-id="7ce10-133">Deletes this conditional format.</span></span>


    <span data-ttu-id="7ce10-134">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.ConditionalFormat.getRange
  summary: >-
    <span data-ttu-id="7ce10-135">Retorna o intervalo ao qual a formatação condicional é aplicada.</span><span class="sxs-lookup"><span data-stu-id="7ce10-135">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="7ce10-136">Gera um erro se o formato condicional for aplicado a vários intervalos.</span><span class="sxs-lookup"><span data-stu-id="7ce10-136">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="7ce10-137">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-137">Read-only.</span></span>


    <span data-ttu-id="7ce10-138">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-138">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-139\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-139\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    $(\"#conditional-formats li\").remove();\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            let $p = $(\"<p></p>\").text(\n                `${item.cf.type}`)\n            let $li = $(`<li></li>`);\n            $li.append($p);\n            $(\"#conditional-formats\").append($li);\n            $(\".conditional-formats\").show()[0].scrollIntoView();\n        })\n    }\n    else {\n        OfficeHelpers.UI.notify(\"None to display\", \"No conditional formats in workbook\", \"warning\");\n    }\n});\n```"
- uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-140">Retorna o formato de conditonal é aplicado ao intervalo ou um objeto nulo se o formato condicional for aplicado a vários intervalos.</span><span class="sxs-lookup"><span data-stu-id="7ce10-140">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="7ce10-141">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-141">Read-only.</span></span>


    <span data-ttu-id="7ce10-142">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-142">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeOrNullObject()
  fullName: getRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.ConditionalFormat.iconSet
  summary: >-
    <span data-ttu-id="7ce10-p111">Retornará as propriedades do formato condicional de IconSet se o formato condicional atual for um tipo de IconSet. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p111">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="7ce10-145">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-145">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSet
  fullName: iconSet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-146\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-146\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-p112">Retornará as propriedades do formato condicional de IconSet se o formato condicional atual for um tipo de IconSet. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-p112">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="7ce10-149">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-149">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSetOrNullObject
  fullName: iconSetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
- uid: excel.Excel.ConditionalFormat.id
  summary: >-
    <span data-ttu-id="7ce10-150">A prioridade do formato condicional dentro do ConditionalFormatCollection atual.</span><span class="sxs-lookup"><span data-stu-id="7ce10-150">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="7ce10-151">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-151">Read-only.</span></span>


    <span data-ttu-id="7ce10-152">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-152">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.ConditionalFormat.load
  summary: <span data-ttu-id="7ce10-153">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="7ce10-153">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="7ce10-154">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="7ce10-154">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="7ce10-155">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="7ce10-155">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="7ce10-156">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class="sxs-lookup"><span data-stu-id="7ce10-156">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="7ce10-157">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-Só está disponível em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="7ce10-157">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="7ce10-158">Ele é semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="7ce10-158">It is similar to the preceding signature.</span></span> <span data-ttu-id="7ce10-159">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class="sxs-lookup"><span data-stu-id="7ce10-159">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="7ce10-160">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="7ce10-160">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="7ce10-161">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="7ce10-161">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="7ce10-162">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="7ce10-162">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.ConditionalFormat.preset
  summary: >-
    <span data-ttu-id="7ce10-163">Retorna o formato condicional de critérios predefinido.</span><span class="sxs-lookup"><span data-stu-id="7ce10-163">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="7ce10-164">Consulte Excel.PresetCriteriaConditionalFormat para obter mais detalhes.</span><span class="sxs-lookup"><span data-stu-id="7ce10-164">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="7ce10-165">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-165">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: preset
  fullName: preset
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-166\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-166\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.presetOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-167">Retorna o formato condicional de critérios predefinido.</span><span class="sxs-lookup"><span data-stu-id="7ce10-167">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="7ce10-168">Consulte Excel.PresetCriteriaConditionalFormat para obter mais detalhes.</span><span class="sxs-lookup"><span data-stu-id="7ce10-168">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="7ce10-169">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-169">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: presetOrNullObject
  fullName: presetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
- uid: excel.Excel.ConditionalFormat.priority
  summary: >-
    <span data-ttu-id="7ce10-170">A prioridade (ou índice) dentro da coleção de formatação condicional que este condicional Formatar atualmente existe no.</span><span class="sxs-lookup"><span data-stu-id="7ce10-170">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="7ce10-171">Essa alteração também muda a prioridades dos outros formatos condicionais, para permitir uma ordem de prioridade contíguos.</span><span class="sxs-lookup"><span data-stu-id="7ce10-171">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="7ce10-172">Use uma prioridade negativa para começar de trás para frente.</span><span class="sxs-lookup"><span data-stu-id="7ce10-172">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="7ce10-173">Maiores que limites de prioridades irá obter e definir à prioridade máxima (ou mínima se negativo).</span><span class="sxs-lookup"><span data-stu-id="7ce10-173">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="7ce10-174">Também Observe que, se você alterar a prioridade, você precisa buscar novamente uma nova cópia do objeto nesse novo local prioridade se desejar tornar mais altera a ela.</span><span class="sxs-lookup"><span data-stu-id="7ce10-174">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="7ce10-175">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-175">Read-only.</span></span>


    <span data-ttu-id="7ce10-176">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-176">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: priority
  fullName: priority
  langs:
  - typeScript
  type: property
  syntax:
    content: 'priority: number;'
    return:
      type:
      - number
- uid: excel.Excel.ConditionalFormat.stopIfTrue
  summary: >-
    <span data-ttu-id="7ce10-177">Se as condições desse formato condicional forem atendidas, nenhum formato de prioridade mais baixa terá efeito nessa célula.</span><span class="sxs-lookup"><span data-stu-id="7ce10-177">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="7ce10-178">NULL em databars, conjuntos de ícones e colorscales, pois não há nenhum conceito de StopIfTrue para esses</span><span class="sxs-lookup"><span data-stu-id="7ce10-178">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>


    <span data-ttu-id="7ce10-179">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-179">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: stopIfTrue
  fullName: stopIfTrue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'stopIfTrue: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.ConditionalFormat.textComparison
  summary: >-
    <span data-ttu-id="7ce10-180">Retorna o texto específico propriedades do formato condicional se o formato condicional atual é um tipo de texto.</span><span class="sxs-lookup"><span data-stu-id="7ce10-180">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="7ce10-181">Por exemplo, para formatar células correspondentes a palavra "Text".</span><span class="sxs-lookup"><span data-stu-id="7ce10-181">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="7ce10-182">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-182">Read-only.</span></span>


    <span data-ttu-id="7ce10-183">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-183">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparison
  fullName: textComparison
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparison: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-184\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-184\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-185">Retorna o texto específico propriedades do formato condicional se o formato condicional atual é um tipo de texto.</span><span class="sxs-lookup"><span data-stu-id="7ce10-185">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="7ce10-186">Por exemplo, para formatar células correspondentes a palavra "Text".</span><span class="sxs-lookup"><span data-stu-id="7ce10-186">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="7ce10-187">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-187">Read-only.</span></span>


    <span data-ttu-id="7ce10-188">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-188">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparisonOrNullObject
  fullName: textComparisonOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
- uid: excel.Excel.ConditionalFormat.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatData
      description: ''
- uid: excel.Excel.ConditionalFormat.topBottom
  summary: >-
    <span data-ttu-id="7ce10-189">Retorna as propriedades de formatação condicional de superior/inferior, se o formato condicional atual é um tipo de TopBottom.</span><span class="sxs-lookup"><span data-stu-id="7ce10-189">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="7ce10-190">Por exemplo formatar os primeiros 10% ou últimos 10 itens.</span><span class="sxs-lookup"><span data-stu-id="7ce10-190">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="7ce10-191">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-191">Read-only.</span></span>


    <span data-ttu-id="7ce10-192">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-192">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottom
  fullName: topBottom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
  summary: >-
    <span data-ttu-id="7ce10-193">Retorna as propriedades de formatação condicional de superior/inferior, se o formato condicional atual é um tipo de TopBottom.</span><span class="sxs-lookup"><span data-stu-id="7ce10-193">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="7ce10-194">Por exemplo formatar os primeiros 10% ou últimos 10 itens.</span><span class="sxs-lookup"><span data-stu-id="7ce10-194">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="7ce10-195">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-195">Read-only.</span></span>


    <span data-ttu-id="7ce10-196">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-196">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottomOrNullObject
  fullName: topBottomOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel.Excel.ConditionalFormat.type
  summary: >-
    <span data-ttu-id="7ce10-197">Um tipo de formatação condicional.</span><span class="sxs-lookup"><span data-stu-id="7ce10-197">A type of conditional format.</span></span> <span data-ttu-id="7ce10-198">Pode ser definido apenas um por vez.</span><span class="sxs-lookup"><span data-stu-id="7ce10-198">Only one can be set at a time.</span></span> <span data-ttu-id="7ce10-199">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="7ce10-199">Read-only.</span></span>


    <span data-ttu-id="7ce10-200">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7ce10-200">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
    return:
      type:
      - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7ce10-201\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ce10-201\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    $(\"#conditional-formats li\").remove();\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            let $p = $(\"<p></p>\").text(\n                `${item.cf.type}`)\n            let $li = $(`<li></li>`);\n            $li.append($p);\n            $(\"#conditional-formats\").append($li);\n            $(\".conditional-formats\").show()[0].scrollIntoView();\n        })\n    }\n    else {\n        OfficeHelpers.UI.notify(\"None to display\", \"No conditional formats in workbook\", \"warning\");\n    }\n});\n```"
