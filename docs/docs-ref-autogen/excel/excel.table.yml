### YamlMime:UniversalReference
ms.openlocfilehash: a5fb3f4975900e0b332201d217c1fc1f28f3616c
ms.sourcegitcommit: 3f4a320fa860d05d348c8bdec2295e046a45a34f
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 02/07/2019
ms.locfileid: "29769957"
items:
- uid: excel.Excel.Table
  summary: >-
    Representa uma tabela do Excel.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.Table
  fullName: Excel.Table
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Table.clearFilters
  - excel.Excel.Table.columns
  - excel.Excel.Table.context
  - excel.Excel.Table.convertToRange
  - excel.Excel.Table.delete
  - excel.Excel.Table.getDataBodyRange
  - excel.Excel.Table.getHeaderRowRange
  - excel.Excel.Table.getRange
  - excel.Excel.Table.getTotalRowRange
  - excel.Excel.Table.highlightFirstColumn
  - excel.Excel.Table.highlightLastColumn
  - excel.Excel.Table.id
  - excel.Excel.Table.legacyId
  - excel.Excel.Table.load
  - excel.Excel.Table.name
  - excel.Excel.Table.onChanged
  - excel.Excel.Table.onSelectionChanged
  - excel.Excel.Table.reapplyFilters
  - excel.Excel.Table.rows
  - excel.Excel.Table.set
  - excel.Excel.Table.showBandedColumns
  - excel.Excel.Table.showBandedRows
  - excel.Excel.Table.showFilterButton
  - excel.Excel.Table.showHeaders
  - excel.Excel.Table.showTotals
  - excel.Excel.Table.sort
  - excel.Excel.Table.style
  - excel.Excel.Table.toJSON
  - excel.Excel.Table.worksheet
- uid: excel.Excel.Table.clearFilters
  summary: >-
    Limpa todos os filtros aplicados à tabela no momento.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: clearFilters()
  fullName: clearFilters
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFilters(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Table.columns
  summary: >-
    Representa uma coleção de todas as colunas na tabela. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: columns
  fullName: columns
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columns: Excel.TableColumnCollection;'
    return:
      type:
      - excel.Excel.TableColumnCollection
- uid: excel.Excel.Table.context
  summary: O contexto de solicitação associado ao objeto. Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Table.convertToRange
  summary: >-
    Converte a tabela em um intervalo de células normal. Todos os dados são preservados.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: convertToRange()
  fullName: convertToRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'convertToRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.convertToRange();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Table.delete
  summary: >-
    Exclui a tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Table.getDataBodyRange
  summary: >-
    Obtém o objeto de intervalo associado ao corpo de dados da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getDataBodyRange()
  fullName: getDataBodyRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataBodyRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableDataRange = table.getDataBodyRange();\n    tableDataRange.load('address')\n    return ctx.sync().then(function() {\n            console.log(tableDataRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Table.getHeaderRowRange
  summary: >-
    Obtém o objeto de intervalo associado à linha de cabeçalho da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getHeaderRowRange()
  fullName: getHeaderRowRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHeaderRowRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableHeaderRange = table.getHeaderRowRange();\n    tableHeaderRange.load('address');\n    return ctx.sync().then(function() {\n        console.log(tableHeaderRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Table.getRange
  summary: >-
    Obtém o objeto de intervalo associado a toda a tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getRange()
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableRange = table.getRange();\n    tableRange.load('address');    \n    return ctx.sync().then(function() {\n            console.log(tableRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Table.getTotalRowRange
  summary: >-
    Obtém o objeto de intervalo associado à linha de totais da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getTotalRowRange()
  fullName: getTotalRowRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTotalRowRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableTotalsRange = table.getTotalRowRange();\n    tableTotalsRange.load('address');    \n    return ctx.sync().then(function() {\n            console.log(tableTotalsRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Table.highlightFirstColumn
  summary: >-
    Indica se a primeira coluna contém uma formatação especial.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: highlightFirstColumn
  fullName: highlightFirstColumn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'highlightFirstColumn: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.highlightLastColumn
  summary: >-
    Indica se a última coluna contém uma formatação especial.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: highlightLastColumn
  fullName: highlightLastColumn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'highlightLastColumn: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.id
  summary: >-
    Retorna um valor que identifica de forma exclusiva a tabela em uma determinada pasta de trabalho. O valor do identificador permanece o mesmo, ainda que a tabela seja renomeada. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Table.legacyId
  summary: >-
    Retorna uma id numérica.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: legacyId
  fullName: legacyId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly legacyId: string;'
    return:
      type:
      - string
- uid: excel.Excel.Table.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: "Além dessa assinatura, esse método tem as seguintes assinaturas:\n\n`load(option?: { select?: string; expand?: string; }): Excel.Table`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Table`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Get a table by name. \nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('index')\n    return ctx.sync().then(function() {\n            console.log(table.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get a table by index.\nExcel.run(function (ctx) { \n    var index = 0;\n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('id')\n    return ctx.sync().then(function() {\n            console.log(table.id);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set table style. \nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.name = 'Table1-Renamed';\n    table.showTotals = false;\n    table.style = 'TableStyleMedium2';\n    table.load('tableStyle');\n    return ctx.sync().then(function() {\n            console.log(table.style);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: ''
    parameters:
    - id: option
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: excel.Excel.Table.name
  summary: >-
    Nome da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Table.onChanged
  summary: >-
    Ocorre quando os dados nas células é alterada em uma tabela específica.


    \[[Conjunto de APIs: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nawait Excel.run(async (context) => {\n    let table = context.workbook.tables.getItemAt(0);\n    table.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event\");\n});\n```"
- uid: excel.Excel.Table.onSelectionChanged
  summary: >-
    Ocorre quando a seleção é alterada em uma tabela específica.


    \[[Conjunto de APIs: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.TableSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.TableSelectionChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nawait Excel.run(async (context) => {\n    let table = context.workbook.tables.getItemAt(0);\n    table.onSelectionChanged.add(onSelectionChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for table onSelectionChanged event\");\n});\n```"
- uid: excel.Excel.Table.reapplyFilters
  summary: >-
    Aplica novamente todos os filtros à tabela.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: reapplyFilters()
  fullName: reapplyFilters
  langs:
  - typeScript
  type: method
  syntax:
    content: 'reapplyFilters(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Table.rows
  summary: >-
    Representa uma coleção de todas as linhas na tabela. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rows
  fullName: rows
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rows: Excel.TableRowCollection;'
    return:
      type:
      - excel.Excel.TableRowCollection
- uid: excel.Excel.Table.set
  summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto sem formatação com as propriedades adequadas ou outro objeto API do mesmo tipo.
  remarks: >-
    Esse método tem a seguinte assinatura adicional:


    `set(properties: Excel.Table): void`
  name: set(properties, options)
  fullName: set
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Um objeto de JavaScript com propriedades que são estruturadas isomorphically às propriedades do objeto no qual o método é chamado.
      type:
      - Interfaces.TableUpdateData
    - id: options
      description: Fornece uma opção para suprimir erros se o objeto properties tenta definir todas as propriedades somente leitura.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Table.showBandedColumns
  summary: >-
    Indica se as colunas mostram formatação em faixas nas quais as colunas ímpares são realçadas de modo diferente das colunas pares, tornando a leitura da tabela mais fácil.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: showBandedColumns
  fullName: showBandedColumns
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showBandedColumns: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.showBandedRows
  summary: >-
    Indica se as linhas mostram formatação em faixas nas quais as linhas ímpares são realçadas de modo diferente das colunas pares, tornando a leitura da tabela mais fácil.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: showBandedRows
  fullName: showBandedRows
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showBandedRows: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.showFilterButton
  summary: >-
    Indica se os botões de filtro estão visíveis na parte superior de cada cabeçalho da coluna. Essa configuração só será permitida se a tabela tiver uma linha de cabeçalho.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: showFilterButton
  fullName: showFilterButton
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showFilterButton: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.showHeaders
  summary: >-
    Indica se a linha do cabeçalho está visível ou não. Esse valor pode ser definido para mostrar ou remover a linha do cabeçalho.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: showHeaders
  fullName: showHeaders
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeaders: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.showTotals
  summary: >-
    Indica se a linha do total está visível ou não. Esse valor pode ser definido para mostrar ou remover a linha do total.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: showTotals
  fullName: showTotals
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showTotals: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Table.sort
  summary: >-
    Representa a classificação da tabela. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: sort
  fullName: sort
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sort: Excel.TableSort;'
    return:
      type:
      - excel.Excel.TableSort
- uid: excel.Excel.Table.style
  summary: >-
    Valor da constante que representa o estilo de Tabela. Os valores possíveis são: TableStyleLight1 a TableStyleLight21, TableStyleMedium1 a TableStyleMedium28, TableStyleStyleDark1 a TableStyleStyleDark11. Também é possível usar um estilo definido pelo usuário que esteja presente na planilha.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
- uid: excel.Excel.Table.toJSON
  summary: Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto Excel.Table original é um objeto de API, o `toJSON` método retorna um objeto de JavaScript simples (digitado como `Excel.Interfaces.TableData` <!-- -->) que contém superficiais cópias de todas as propriedades do objeto original filho carregado.
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableData;'
    return:
      type:
      - excel.Excel.Interfaces.TableData
      description: ''
- uid: excel.Excel.Table.worksheet
  summary: >-
    A planilha que contém a tabela atual. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
