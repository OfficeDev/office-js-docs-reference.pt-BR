### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomConditionalFormat:class'
    summary: |-
      <span data-ttu-id="6d6ae-101">Representa um tipo de formato condicional personalizado.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-101">Represents a custom conditional format type.</span></span>

      <span data-ttu-id="6d6ae-102">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6d6ae-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomConditionalFormat
    fullName: Excel.CustomConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomConditionalFormat#context:member'
      - 'excel!Excel.CustomConditionalFormat#format:member'
      - 'excel!Excel.CustomConditionalFormat#load:member(1)'
      - 'excel!Excel.CustomConditionalFormat#load:member(2)'
      - 'excel!Excel.CustomConditionalFormat#load:member(3)'
      - 'excel!Excel.CustomConditionalFormat#rule:member'
      - 'excel!Excel.CustomConditionalFormat#set:member(1)'
      - 'excel!Excel.CustomConditionalFormat#set:member(2)'
      - 'excel!Excel.CustomConditionalFormat#toJSON:member(1)'
  - uid: 'excel!Excel.CustomConditionalFormat#context:member'
    summary: <span data-ttu-id="6d6ae-103">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-103">The request context associated with the object.</span></span> <span data-ttu-id="6d6ae-104">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomConditionalFormat#format:member'
    summary: |-
      <span data-ttu-id="6d6ae-105">Retorna um objeto Format, encapsulando a fonte, o preenchimento, as bordas e outras propriedades de formatos condicionais.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-105">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.</span></span> <span data-ttu-id="6d6ae-106">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-106">Read-only.</span></span>

      <span data-ttu-id="6d6ae-107">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6d6ae-107">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalRangeFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6d6ae-108">Exemplos</span><span class="sxs-lookup"><span data-stu-id="6d6ae-108">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomConditionalFormat#load:member(1)'
    summary: <span data-ttu-id="6d6ae-109">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-109">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6d6ae-110">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-110">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.CustomConditionalFormatLoadOptions): Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="6d6ae-111">Fornece opções para as propriedades do objeto a ser carregado.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-111">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.CustomConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.CustomConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="6d6ae-112">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-112">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6d6ae-113">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-113">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="6d6ae-114">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-114">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="6d6ae-115">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6d6ae-116">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-116">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.CustomConditionalFormat;
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="6d6ae-117">`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-117">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.CustomConditionalFormat#rule:member'
    summary: |-
      <span data-ttu-id="6d6ae-118">Representa o objeto Regra neste formato condicional.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-118">Represents the Rule object on this conditional format.</span></span> <span data-ttu-id="6d6ae-119">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-119">Read-only.</span></span>

      <span data-ttu-id="6d6ae-120">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6d6ae-120">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rule: Excel.ConditionalFormatRule;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatRule:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6d6ae-121">Exemplos</span><span class="sxs-lookup"><span data-stu-id="6d6ae-121">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheet = ctx.workbook.worksheets.getActiveWorksheet();
              var range = sheet.getRange("A1:A5");
              range.values = [[1], [20], [""], [5], ["test"]];
              var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              var cfCustom = cf.customOrNullObject;
              cfCustom.rule.formula = "=ISBLANK(A1)";
              cfCustom.format.fill.color = "#00FF00";
              return ctx.sync().then(function () {
                  console.log("Added new custom conditional format highlighting all blank cells.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.CustomConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="6d6ae-122">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-122">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="6d6ae-123">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-123">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="6d6ae-124">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="6d6ae-124">This method has the following additional signature:</span></span>

      `set(properties: Excel.CustomConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.CustomConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="6d6ae-125">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-125">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.CustomConditionalFormatUpdateData:interface'
        - id: options
          description: <span data-ttu-id="6d6ae-126">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-126">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.CustomConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="6d6ae-127">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-127">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.CustomConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.CustomConditionalFormat:class'
  - uid: 'excel!Excel.CustomConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="6d6ae-128">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="6d6ae-128">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="6d6ae-129">.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-129"></span></span> <span data-ttu-id="6d6ae-130">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="6d6ae-130"></span></span><!-- --><span data-ttu-id="6d6ae-131">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. CustomConditionalFormat original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.CustomConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="6d6ae-131">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomConditionalFormatData`</span></span><!-- --><span data-ttu-id="6d6ae-132">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="6d6ae-132">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomConditionalFormatData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalRangeFormat:class'
    name: Excel.ConditionalRangeFormat
  - uid: 'excel!Excel.CustomConditionalFormat:class'
    name: Excel.CustomConditionalFormat
  - uid: 'excel!Excel.Interfaces.CustomConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.CustomConditionalFormatLoadOptions
  - uid: 'excel!Excel.ConditionalFormatRule:class'
    name: Excel.ConditionalFormatRule
  - uid: 'excel!Excel.Interfaces.CustomConditionalFormatUpdateData:interface'
    name: Interfaces.CustomConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.CustomConditionalFormatData:interface'
    name: Excel.Interfaces.CustomConditionalFormatData