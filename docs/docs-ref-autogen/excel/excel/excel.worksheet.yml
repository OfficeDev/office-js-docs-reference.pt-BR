### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: |-
      <span data-ttu-id="63dc2-101">Uma planilha do Excel é uma grade de células.</span><span class="sxs-lookup"><span data-stu-id="63dc2-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="63dc2-102">Ele pode conter dados, tabelas, gráficos, etc. Para saber mais sobre o modelo de objeto de planilha, leia [trabalhar com planilhas usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="63dc2-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="63dc2-103">.</span><span class="sxs-lookup"><span data-stu-id="63dc2-103"></span></span>

      <span data-ttu-id="63dc2-104">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onCalculated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onColumnSorted:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onFiltered:member'
      - 'excel!Excel.Worksheet#onFormatChanged:member'
      - 'excel!Excel.Worksheet#onRowHiddenChanged:member'
      - 'excel!Excel.Worksheet#onRowSorted:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#onSingleClicked:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-105">Ative a planilha na interface do usuário do Excel.</span><span class="sxs-lookup"><span data-stu-id="63dc2-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="63dc2-106">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-107">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: |-
      <span data-ttu-id="63dc2-108">Representa o objeto AutoFilter da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-108">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="63dc2-109">Somente Leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-109">Read-Only.</span></span>

      <span data-ttu-id="63dc2-110">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-110">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: Excel.AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-111">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-112">Calcula todas as células em uma planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-112">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="63dc2-113">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="63dc2-114">True, para marcar tudo como sujo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-114">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: |-
      <span data-ttu-id="63dc2-115">Retorna uma coleção de gráficos que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-115">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="63dc2-116">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-116">Read-only.</span></span>

      <span data-ttu-id="63dc2-117">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: |-
      <span data-ttu-id="63dc2-118">Retorna um conjunto de todos os objetos Comments na planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-118">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="63dc2-119">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-119">Read-only.</span></span>

      <span data-ttu-id="63dc2-120">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-120">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: Excel.CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: <span data-ttu-id="63dc2-121">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="63dc2-121">The request context associated with the object.</span></span> <span data-ttu-id="63dc2-122">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="63dc2-122">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-123">Copia uma planilha e a coloca na posição especificada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-123">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="63dc2-124">Retorna à planilha copiada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-124">Return the copied worksheet.</span></span>

      <span data-ttu-id="63dc2-125">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-125">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-126">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="63dc2-127">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-127">Optional.</span></span>
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: <span data-ttu-id="63dc2-128">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-128">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: |-
      <span data-ttu-id="63dc2-129">Copia uma planilha e a coloca na posição especificada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-129">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="63dc2-130">Retorna à planilha copiada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-130">Return the copied worksheet.</span></span>

      <span data-ttu-id="63dc2-131">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-131">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="63dc2-132">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-132">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="63dc2-133">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-133">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-134">Exclui a planilha da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="63dc2-134">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="63dc2-135">Observe que, se a visibilidade da planilha estiver definida como "VeryHidden", a operação de exclusão falhará `InvalidOperation` com uma exceção.</span><span class="sxs-lookup"><span data-stu-id="63dc2-135">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with an `InvalidOperation` exception.</span></span> <span data-ttu-id="63dc2-136">Você deve primeiro alterar sua visibilidade para oculto ou visível antes de excluí-lo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-136">You should first change its visibility to hidden or visible before deleting it.</span></span>

      <span data-ttu-id="63dc2-137">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-137">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-138">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-138">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: |-
      <span data-ttu-id="63dc2-139">Obtém ou define a propriedade enableCalculation da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-139">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="63dc2-140">True se o Excel recalcular a planilha quando necessário.</span><span class="sxs-lookup"><span data-stu-id="63dc2-140">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="63dc2-141">False se o Excel não recalcular a planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-141">False if Excel doesn't recalculate the sheet.</span></span>

      <span data-ttu-id="63dc2-142">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-142">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-143">Encontra todas as ocorrências de determinada cadeia de caracteres com base nos critérios especificados e as retorna como um objeto RangeAreas, compreendendo um ou mais intervalos retangulares.</span><span class="sxs-lookup"><span data-stu-id="63dc2-143">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="63dc2-144">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-144">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: '<span data-ttu-id="63dc2-145">Um objeto RangeArea, incluindo um ou mais intervalos retangulares, que corresponde aos critérios de pesquisa.</span><span class="sxs-lookup"><span data-stu-id="63dc2-145">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="63dc2-146">Se nenhuma célula atender a esses critérios, um erro ItemNotFound será gerado.</span><span class="sxs-lookup"><span data-stu-id="63dc2-146">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>'
      parameters:
        - id: text
          description: <span data-ttu-id="63dc2-147">A cadeia de caracteres a ser localizada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-147">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="63dc2-148">Critérios de pesquisa adicionais, incluindo se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-148">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-149">Encontra todas as ocorrências de determinada cadeia de caracteres com base nos critérios especificados e as retorna como um objeto RangeAreas, compreendendo um ou mais intervalos retangulares.</span><span class="sxs-lookup"><span data-stu-id="63dc2-149">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="63dc2-150">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-150">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-
          <span data-ttu-id="63dc2-151">Um objeto RangeArea, incluindo um ou mais intervalos retangulares, que corresponde aos critérios de pesquisa.</span><span class="sxs-lookup"><span data-stu-id="63dc2-151">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="63dc2-152">Se não houver nenhuma correspondência, esta função retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="63dc2-152">If there are no matches, this function will return a null object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="63dc2-153">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-153">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="63dc2-154">A cadeia de caracteres a ser localizada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-154">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="63dc2-155">Critérios de pesquisa adicionais, incluindo se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-155">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: |-
      <span data-ttu-id="63dc2-156">Obtém um objeto que pode ser usado para manipular painéis congelados na planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-156">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="63dc2-157">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-157">Read-only.</span></span>

      <span data-ttu-id="63dc2-158">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-158">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-159">Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna.</span><span class="sxs-lookup"><span data-stu-id="63dc2-159">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="63dc2-160">A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-160">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="63dc2-161">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-161">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-162">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-162">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="63dc2-163">O número da linha da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-163">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="63dc2-164">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="63dc2-164">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="63dc2-165">O número da coluna da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-165">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="63dc2-166">Indexado com zero.</span><span class="sxs-lookup"><span data-stu-id="63dc2-166">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-167">Obtém a planilha que segue esta.</span><span class="sxs-lookup"><span data-stu-id="63dc2-167">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="63dc2-168">Se não houver planilhas após esta, este método gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="63dc2-168">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="63dc2-169">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-169">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-170">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-170">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="63dc2-171">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-171">Optional.</span></span> <span data-ttu-id="63dc2-172">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-172">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-173">Obtém a planilha que segue esta.</span><span class="sxs-lookup"><span data-stu-id="63dc2-173">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="63dc2-174">Se não houver planilhas após esta, este método retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="63dc2-174">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="63dc2-175">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-175">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="63dc2-176">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-176">Optional.</span></span> <span data-ttu-id="63dc2-177">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-177">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-178">Obtém a planilha que precede esta.</span><span class="sxs-lookup"><span data-stu-id="63dc2-178">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="63dc2-179">Se não houver planilhas anteriores, este método gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="63dc2-179">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="63dc2-180">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-180">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-181">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-181">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="63dc2-182">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-182">Optional.</span></span> <span data-ttu-id="63dc2-183">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-183">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-184">Obtém a planilha que precede esta.</span><span class="sxs-lookup"><span data-stu-id="63dc2-184">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="63dc2-185">Se não houver planilhas anteriores, este método retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="63dc2-185">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="63dc2-186">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-186">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="63dc2-187">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-187">Optional.</span></span> <span data-ttu-id="63dc2-188">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-188">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-189">Obtém o objeto Range, representando um único bloco retangular de células, especificado pelo endereço ou nome.</span><span class="sxs-lookup"><span data-stu-id="63dc2-189">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="63dc2-190">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-190">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-191">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-191">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="63dc2-192">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-192">Optional.</span></span> <span data-ttu-id="63dc2-193">A cadeia de caracteres que representa o endereço ou o nome do intervalo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-193">The string representing the address or name of the range.</span></span> <span data-ttu-id="63dc2-194">Por exemplo, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="63dc2-194">For example, "A1:B2".</span></span> <span data-ttu-id="63dc2-195">Caso não seja especificado, todo o intervalo da planilha será retornado.</span><span class="sxs-lookup"><span data-stu-id="63dc2-195">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-196">Obtém o objeto Range que começa em um determinado índice de linha e índice de coluna e que abrange um determinado número de linhas e colunas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-196">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="63dc2-197">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-197">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="63dc2-198">Linha inicial (indexada por zero).</span><span class="sxs-lookup"><span data-stu-id="63dc2-198">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="63dc2-199">Coluna inicial (indexada por zero).</span><span class="sxs-lookup"><span data-stu-id="63dc2-199">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: <span data-ttu-id="63dc2-200">Número de linhas a serem incluídas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-200">Number of rows to include in the range.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="63dc2-201">Número de colunas a serem incluídas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-201">Number of columns to include in the range.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-202">Obtém o objeto RangeAreas que representa um ou mais blocos de intervalos retangulares especificados pelo endereço ou nome.</span><span class="sxs-lookup"><span data-stu-id="63dc2-202">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>

      <span data-ttu-id="63dc2-203">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-203">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-204">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-204">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="63dc2-205">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-205">Optional.</span></span> <span data-ttu-id="63dc2-206">Uma cadeia de caracteres que contém os endereços ou nomes separados por vírgulas de intervalos individuais.</span><span class="sxs-lookup"><span data-stu-id="63dc2-206">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="63dc2-207">Por exemplo, "a1: B2, A5: B5".</span><span class="sxs-lookup"><span data-stu-id="63dc2-207">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="63dc2-208">Se não for especificado, será retornado um objeto RangeArea para a planilha inteira.</span><span class="sxs-lookup"><span data-stu-id="63dc2-208">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-209">O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-209">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="63dc2-210">Se a planilha inteira estiver em branco, essa função retornará a célula superior esquerda (ou seja, *não* gerará um erro).</span><span class="sxs-lookup"><span data-stu-id="63dc2-210">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="63dc2-211">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-211">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-212">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-212">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="63dc2-213">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-213">Optional.</span></span> <span data-ttu-id="63dc2-214">Se true, considera apenas as células com valores como células usadas (ignorando a formatação).</span><span class="sxs-lookup"><span data-stu-id="63dc2-214">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="63dc2-215">\[Conjunto de APIs: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-215">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-p128">O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas. Se a planilha inteira estiver em branco, esta função retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="63dc2-p128">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="63dc2-218">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-218">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="63dc2-219">Opcional.</span><span class="sxs-lookup"><span data-stu-id="63dc2-219">Optional.</span></span> <span data-ttu-id="63dc2-220">Considera apenas as células com valores como células usadas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-220">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: |-
      <span data-ttu-id="63dc2-221">Obtém a coleção de quebra de página horizontal da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-221">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="63dc2-222">Esta coleção contém apenas quebras de página manuais.</span><span class="sxs-lookup"><span data-stu-id="63dc2-222">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="63dc2-223">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-223">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: |-
      <span data-ttu-id="63dc2-p131">Retorna um valor que identifica de forma exclusiva a planilha em uma determinada pasta de trabalho. O valor do identificador permanece o mesmo, ainda que a planilha seja renomeada ou movida. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-p131">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="63dc2-227">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-227">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: <span data-ttu-id="63dc2-228">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="63dc2-228">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="63dc2-229">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="63dc2-229">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="63dc2-230">Fornece opções para as propriedades do objeto a ser carregado.</span><span class="sxs-lookup"><span data-stu-id="63dc2-230">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: <span data-ttu-id="63dc2-231">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="63dc2-231">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="63dc2-232">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="63dc2-232">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-233">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-233">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="63dc2-234">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-234">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: <span data-ttu-id="63dc2-235">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="63dc2-235">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="63dc2-236">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="63dc2-236">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="63dc2-237">`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-237">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: |-
      <span data-ttu-id="63dc2-238">O nome de exibição da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-238">The display name of the worksheet.</span></span>

      <span data-ttu-id="63dc2-239">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-239">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: |-
      <span data-ttu-id="63dc2-240">Coleção de nomes com escopo para a planilha atual.</span><span class="sxs-lookup"><span data-stu-id="63dc2-240">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="63dc2-241">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-241">Read-only.</span></span>

      <span data-ttu-id="63dc2-242">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-242">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: |-
      <span data-ttu-id="63dc2-243">Ocorre quando a planilha é ativada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-243">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="63dc2-244">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-244">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-245">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-245">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onCalculated:member'
    summary: |-
      <span data-ttu-id="63dc2-246">Ocorre quando a planilha é calculada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-246">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="63dc2-247">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-247">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onCalculated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-248">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-248">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: |-
      <span data-ttu-id="63dc2-249">Ocorre quando os dados são alterados em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="63dc2-249">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="63dc2-250">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-250">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-251">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-251">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onColumnSorted:member'
    summary: |-
      <span data-ttu-id="63dc2-252">Ocorre quando uma ou mais colunas foram classificadas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-252">Occurs when one or more columns have been sorted.</span></span> <span data-ttu-id="63dc2-253">Isso acontece como resultado de uma operação de classificação da esquerda para a direita.</span><span class="sxs-lookup"><span data-stu-id="63dc2-253">This happens as the result of a left-to-right sort operation.</span></span>

      <span data-ttu-id="63dc2-254">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-254">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onColumnSorted~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-255">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-255">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding column handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a column has been moved as the result of a sort action.
              sheet.onColumnSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Column sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: |-
      <span data-ttu-id="63dc2-256">Ocorre quando a planilha é desativada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-256">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="63dc2-257">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-257">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-258">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-258">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onFiltered:member'
    summary: |-
      <span data-ttu-id="63dc2-259">Ocorre quando o filtro é aplicado em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="63dc2-259">Occurs when filter is applied on a specific worksheet.</span></span>

      <span data-ttu-id="63dc2-260">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-260">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onFiltered
    fullName: onFiltered
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFiltered~0:complex'
  - uid: 'excel!Excel.Worksheet#onFormatChanged:member'
    summary: |-
      <span data-ttu-id="63dc2-261">Ocorre quando o formato é alterado em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="63dc2-261">Occurs when format changed on a specific worksheet.</span></span>

      <span data-ttu-id="63dc2-262">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-262">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFormatChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowHiddenChanged:member'
    summary: |-
      <span data-ttu-id="63dc2-263">Ocorre quando o estado oculto de uma ou mais linhas é alterado em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="63dc2-263">Occurs when the hidden state of one or more rows has changed on a specific worksheet.</span></span>

      <span data-ttu-id="63dc2-264">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-264">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowHiddenChanged
    fullName: onRowHiddenChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowHiddenChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowSorted:member'
    summary: |-
      <span data-ttu-id="63dc2-265">Ocorre quando uma ou mais linhas foram classificadas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-265">Occurs when one or more rows have been sorted.</span></span> <span data-ttu-id="63dc2-266">Isso acontece como resultado de uma operação de classificação de cima para baixo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-266">This happens as the result of a top-to-bottom sort operation.</span></span>

      <span data-ttu-id="63dc2-267">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-267">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowSorted~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-268">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-268">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding row handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a row has been moved as the result of a sort action.
              sheet.onRowSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Row sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: |-
      <span data-ttu-id="63dc2-269">Ocorre quando a seleção é alterada em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="63dc2-269">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="63dc2-270">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-270">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-271">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-271">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSingleClicked:member'
    summary: |-
      <span data-ttu-id="63dc2-272">Ocorre quando a operação clicada/pressionada à esquerda ocorre na planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-272">Occurs when left-clicked/tapped operation happens in the worksheet.</span></span> <span data-ttu-id="63dc2-273">Esse evento não será acionado quando você clicar nos seguintes casos:</span><span class="sxs-lookup"><span data-stu-id="63dc2-273">This event will not be fired when clicking in the following cases:</span></span>

      - <span data-ttu-id="63dc2-274">O usuário arrasta o mouse para várias seleções.</span><span class="sxs-lookup"><span data-stu-id="63dc2-274">The user drags the mouse for multi-selection.</span></span>

      - <span data-ttu-id="63dc2-275">O usuário seleciona uma célula no modo quando os argumentos de célula são selecionados para referências de fórmula.</span><span class="sxs-lookup"><span data-stu-id="63dc2-275">The user selects a cell in the mode when cell arguments are selected for formula references.</span></span>

      <span data-ttu-id="63dc2-276">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-276">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSingleClicked~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-277">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-277">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.onSingleClicked.add((event) => {
                  return Excel.run((context) => {
                      console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                      return context.sync();
                  });
              });

              console.log("The worksheet click handler is registered.");

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: |-
      <span data-ttu-id="63dc2-278">Obtém o objeto PageLayout da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-278">Gets the PageLayout object of the worksheet.</span></span>

      <span data-ttu-id="63dc2-279">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-279">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: Excel.PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:class'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: |-
      <span data-ttu-id="63dc2-280">Coleção de Tabelas Dinâmicas que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-280">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="63dc2-281">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-281">Read-only.</span></span>

      <span data-ttu-id="63dc2-282">\[[Conjunto de APIs: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-282">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: |-
      <span data-ttu-id="63dc2-283">A posição baseada em zero da planilha na pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="63dc2-283">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="63dc2-284">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: |-
      <span data-ttu-id="63dc2-285">Retorna o objeto de proteção da planilha para uma planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-285">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="63dc2-286">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-286">Read-only.</span></span>

      <span data-ttu-id="63dc2-287">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-287">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-288">Localiza e substitui a cadeia de caracteres fornecida com base nos critérios especificados na planilha atual.</span><span class="sxs-lookup"><span data-stu-id="63dc2-288">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>

      <span data-ttu-id="63dc2-289">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-289">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: <span data-ttu-id="63dc2-290">O número de substituições realizadas.</span><span class="sxs-lookup"><span data-stu-id="63dc2-290">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="63dc2-291">Cadeia de caracteres a ser localizada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-291">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="63dc2-292">Cadeia de caracteres para substituir o original por.</span><span class="sxs-lookup"><span data-stu-id="63dc2-292">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="63dc2-293">Critérios adicionais de substituição.</span><span class="sxs-lookup"><span data-stu-id="63dc2-293">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: '<span data-ttu-id="63dc2-294">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-294">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="63dc2-295">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="63dc2-295">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="63dc2-296">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="63dc2-296">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="63dc2-297">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="63dc2-297">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: <span data-ttu-id="63dc2-298">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-298">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: '<span data-ttu-id="63dc2-299">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="63dc2-299">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: |-
      <span data-ttu-id="63dc2-300">Retorna a coleção de todos os objetos Shape na planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-300">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="63dc2-301">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-301">Read-only.</span></span>

      <span data-ttu-id="63dc2-302">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-302">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: |-
      <span data-ttu-id="63dc2-303">Obtém ou define um sinalizador de linhas de grade da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-303">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="63dc2-304">Este sinalizador determina se as linhas de grade são visíveis para o usuário.</span><span class="sxs-lookup"><span data-stu-id="63dc2-304">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="63dc2-305">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-305">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-306">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-306">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: |-
      <span data-ttu-id="63dc2-307">É ou define um sinalizador de cabeçalhos da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-307">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="63dc2-308">Esse sinalizador determina se os títulos são visíveis para o usuário.</span><span class="sxs-lookup"><span data-stu-id="63dc2-308">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="63dc2-309">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-309">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: |-
      <span data-ttu-id="63dc2-310">Mostra grupos de linhas ou colunas por seus níveis de estrutura de tópicos.</span><span class="sxs-lookup"><span data-stu-id="63dc2-310">Shows row or column groups by their outline levels.</span></span> <span data-ttu-id="63dc2-311">Descreve o grupo e resume uma lista de dados na planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-311">Outlines group and summarize a list of data in the worksheet.</span></span> <span data-ttu-id="63dc2-312">Os `rowLevels` parâmetros `columnLevels` e especificam quantos níveis do contorno serão exibidos.</span><span class="sxs-lookup"><span data-stu-id="63dc2-312">The `rowLevels` and `columnLevels` parameters specify how many levels of the outline will be displayed.</span></span> <span data-ttu-id="63dc2-313">O intervalo de argumentos aceitável está entre 0 e 8.</span><span class="sxs-lookup"><span data-stu-id="63dc2-313">The acceptable argument range is between 0 and 8.</span></span> <span data-ttu-id="63dc2-314">O valor 0 não altera a exibição atual.</span><span class="sxs-lookup"><span data-stu-id="63dc2-314">A value of 0 does not change the current display.</span></span> <span data-ttu-id="63dc2-315">Um valor maior do que o número atual de níveis exibe todos os níveis.</span><span class="sxs-lookup"><span data-stu-id="63dc2-315">A value greater than the current number of levels displays all the levels.</span></span>

      <span data-ttu-id="63dc2-316">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-316">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowLevels
          description: <span data-ttu-id="63dc2-317">O número de níveis de linha de uma estrutura de tópicos a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="63dc2-317">The number of row levels of an outline to display.</span></span>
          type:
            - number
        - id: columnLevels
          description: <span data-ttu-id="63dc2-318">O número de níveis de coluna de uma estrutura de tópicos a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="63dc2-318">The number of column levels of an outline to display.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: |-
      <span data-ttu-id="63dc2-319">Retorna uma coleção de segmentações de dados que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-319">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="63dc2-320">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-320">Read-only.</span></span>

      <span data-ttu-id="63dc2-321">\[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-321">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-322">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-322">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: |-
      <span data-ttu-id="63dc2-323">Retorna a altura padrão de todas as linhas na planilha, em pontos.</span><span class="sxs-lookup"><span data-stu-id="63dc2-323">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="63dc2-324">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-324">Read-only.</span></span>

      <span data-ttu-id="63dc2-325">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-325">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: |-
      <span data-ttu-id="63dc2-326">Retorna ou define a largura padrão de todas as colunas na planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-326">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="63dc2-327">Uma unidade de largura de coluna equivale à largura de um caractere no estilo Normal.</span><span class="sxs-lookup"><span data-stu-id="63dc2-327">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="63dc2-328">Para fontes proporcionais, será usada a largura do caractere 0 (zero).</span><span class="sxs-lookup"><span data-stu-id="63dc2-328">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="63dc2-329">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-329">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: |-
      <span data-ttu-id="63dc2-330">Obtém ou define a cor da guia de planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-330">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="63dc2-331">Ao recuperar a cor de tabulação, se a planilha estiver invisível, o valor será NULL.</span><span class="sxs-lookup"><span data-stu-id="63dc2-331">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="63dc2-332">Se a planilha estiver visível, mas a cor da guia estiver definida como auto, uma cadeia de caracteres vazia será retornada.</span><span class="sxs-lookup"><span data-stu-id="63dc2-332">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="63dc2-333">Caso contrário, a propriedade será definida como uma cor, no formato "\#123456" ao definir a cor, usar uma cadeia de caracteres vazia para definir uma cor "auto" ou uma cor real caso contrário.</span><span class="sxs-lookup"><span data-stu-id="63dc2-333">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="63dc2-334">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-334">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63dc2-335">Exemplos</span><span class="sxs-lookup"><span data-stu-id="63dc2-335">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: |-
      <span data-ttu-id="63dc2-336">Coleção de tabelas que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-336">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="63dc2-337">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="63dc2-337">Read-only.</span></span>

      <span data-ttu-id="63dc2-338">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-338">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: '<span data-ttu-id="63dc2-339">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="63dc2-339">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="63dc2-340">.</span><span class="sxs-lookup"><span data-stu-id="63dc2-340"></span></span> <span data-ttu-id="63dc2-341">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="63dc2-341"></span></span><!-- --><span data-ttu-id="63dc2-342">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. Worksheet original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="63dc2-342">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="63dc2-343">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="63dc2-343">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: |-
      <span data-ttu-id="63dc2-344">Obtém a coleção de quebra de página vertical da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-344">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="63dc2-345">Esta coleção contém apenas quebras de página manuais.</span><span class="sxs-lookup"><span data-stu-id="63dc2-345">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="63dc2-346">\[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-346">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: |-
      <span data-ttu-id="63dc2-347">A visibilidade da planilha.</span><span class="sxs-lookup"><span data-stu-id="63dc2-347">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="63dc2-348">\[[Conjunto de APIs: ExcelApi 1,1 para ler a visibilidade; 1,2 para configurá-la.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="63dc2-348">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="63dc2-349">\]</span><span class="sxs-lookup"><span data-stu-id="63dc2-349"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.AutoFilter:class'
    name: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:class'
    name: Excel.CommentCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:class'
    name: Excel.PageBreakCollection
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onColumnSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetColumnSortedEventArgs:interface'
        name: Excel.WorksheetColumnSortedEventArgs
        fullName: Excel.WorksheetColumnSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFiltered~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFilteredEventArgs:interface'
        name: Excel.WorksheetFilteredEventArgs
        fullName: Excel.WorksheetFilteredEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowHiddenChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowHiddenChangedEventArgs:interface'
        name: Excel.WorksheetRowHiddenChangedEventArgs
        fullName: Excel.WorksheetRowHiddenChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowSortedEventArgs:interface'
        name: Excel.WorksheetRowSortedEventArgs
        fullName: Excel.WorksheetRowSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSingleClicked~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSingleClickedEventArgs:interface'
        name: Excel.WorksheetSingleClickedEventArgs
        fullName: Excel.WorksheetSingleClickedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PageLayout:class'
    name: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.ShapeCollection:class'
    name: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'