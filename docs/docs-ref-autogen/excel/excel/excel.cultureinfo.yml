### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CultureInfo:class'
    summary: |-
      Fornece informações com base nas configurações de cultura do sistema atual. Isso inclui os nomes de cultura, a formatação de números e outras configurações dependentes de cultura.

      \[[Conjunto de APIs: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.CultureInfo
    fullName: Excel.CultureInfo
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CultureInfo#context:member'
      - 'excel!Excel.CultureInfo#datetimeFormat:member'
      - 'excel!Excel.CultureInfo#load:member(1)'
      - 'excel!Excel.CultureInfo#load:member(2)'
      - 'excel!Excel.CultureInfo#load:member(3)'
      - 'excel!Excel.CultureInfo#name:member'
      - 'excel!Excel.CultureInfo#numberFormat:member'
      - 'excel!Excel.CultureInfo#toJSON:member(1)'
  - uid: 'excel!Excel.CultureInfo#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CultureInfo#datetimeFormat:member'
    summary: |-
      Define o formato culturalmente apropriado para exibir data e hora. Isso é baseado nas configurações atuais de cultura do sistema.

      \[[Conjunto de APIs: ExcelApi 1,12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: datetimeFormat
    fullName: datetimeFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly datetimeFormat: Excel.DatetimeFormatInfo;'
      return:
        type:
          - 'excel!Excel.DatetimeFormatInfo:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info-date-time.yaml
          await Excel.run(async (context) => {
            context.application.cultureInfo.datetimeFormat.load([
              "longDatePattern",
              "shortDatePattern",
              "dateSeparator",
              "longTimePattern",
              "timeSeparator"
            ]);
            await context.sync();

            // Use the cultural settings API to retrieve the user's system date and time settings.
            const systemLongDatePattern = context.application.cultureInfo.datetimeFormat.longDatePattern;
            const systemShortDatePattern = context.application.cultureInfo.datetimeFormat.shortDatePattern;
            const systemDateSeparator = context.application.cultureInfo.datetimeFormat.dateSeparator;
            const systemLongTimePattern = context.application.cultureInfo.datetimeFormat.longTimePattern;
            const systemTimeSeparator = context.application.cultureInfo.datetimeFormat.timeSeparator;

            // Write the date and time settings in your table. 
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const dateTimeData = sheet.getRange("A2:B6");
            dateTimeData.values = [
              ["Long date", systemLongDatePattern], 
              ["Short date", systemShortDatePattern], 
              ["Date separator", systemDateSeparator], 
              ["Long time format", systemLongTimePattern],
              ["Time separator", systemTimeSeparator]
            ];

            sheet.tables
              .getItemAt(0)
              .getRange()
              .format.autofitColumns();

            await context.sync();
          });
          ```
  - uid: 'excel!Excel.CultureInfo#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.CultureInfoLoadOptions): Excel.CultureInfo;'
      return:
        type:
          - 'excel!Excel.CultureInfo:class'
        description: ''
      parameters:
        - id: options
          description: Fornece opções para as propriedades do objeto a ser carregado.
          type:
            - 'excel!Excel.Interfaces.CultureInfoLoadOptions:interface'
  - uid: 'excel!Excel.CultureInfo#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CultureInfo;'
      return:
        type:
          - 'excel!Excel.CultureInfo:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CultureInfo#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.CultureInfo;
      return:
        type:
          - 'excel!Excel.CultureInfo:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select` é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e `propertyNamesAndPaths.expand` é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.CultureInfo#name:member'
    summary: |-
      Obtém o nome da cultura no formato languagecode2-Country/regioncode2 (por exemplo, "zh-CN" ou "en-US"). Isso é baseado nas configurações atuais do sistema.

      \[[Conjunto de APIs: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.CultureInfo#numberFormat:member'
    summary: |-
      Define o formato culturalmente apropriado para exibir números. Isso é baseado nas configurações atuais de cultura do sistema.

      \[[Conjunto de APIs: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly numberFormat: Excel.NumberFormatInfo;'
      return:
        type:
          - 'excel!Excel.NumberFormatInfo:class'
  - uid: 'excel!Excel.CultureInfo#toJSON:member(1)'
    summary: 'Substitui o `toJSON()` método JavaScript para fornecer uma saída mais útil quando um objeto API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto Excel. CultureInfo original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como `Excel.Interfaces.CultureInfoData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CultureInfoData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CultureInfoData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.DatetimeFormatInfo:class'
    name: Excel.DatetimeFormatInfo
  - uid: 'excel!Excel.CultureInfo:class'
    name: Excel.CultureInfo
  - uid: 'excel!Excel.Interfaces.CultureInfoLoadOptions:interface'
    name: Excel.Interfaces.CultureInfoLoadOptions
  - uid: 'excel!Excel.NumberFormatInfo:class'
    name: Excel.NumberFormatInfo
  - uid: 'excel!Excel.Interfaces.CultureInfoData:interface'
    name: Excel.Interfaces.CultureInfoData