### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ShapeCollection:class'
    summary: |-
      Representa uma coleção de todas as formas na planilha.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.ShapeCollection
    fullName: Excel.ShapeCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.ShapeCollection#addGeometricShape:member(1)'
      - 'excel!Excel.ShapeCollection#addGeometricShape:member(2)'
      - 'excel!Excel.ShapeCollection#addGroup:member(1)'
      - 'excel!Excel.ShapeCollection#addImage:member(1)'
      - 'excel!Excel.ShapeCollection#addLine:member(1)'
      - 'excel!Excel.ShapeCollection#addLine:member(2)'
      - 'excel!Excel.ShapeCollection#addSvg:member(1)'
      - 'excel!Excel.ShapeCollection#addTextBox:member(1)'
      - 'excel!Excel.ShapeCollection#context:member'
      - 'excel!Excel.ShapeCollection#getCount:member(1)'
      - 'excel!Excel.ShapeCollection#getItem:member(1)'
      - 'excel!Excel.ShapeCollection#getItemAt:member(1)'
      - 'excel!Excel.ShapeCollection#items:member'
      - 'excel!Excel.ShapeCollection#load:member(1)'
      - 'excel!Excel.ShapeCollection#load:member(2)'
      - 'excel!Excel.ShapeCollection#load:member(3)'
      - 'excel!Excel.ShapeCollection#toJSON:member(1)'
  - uid: 'excel!Excel.ShapeCollection#addGeometricShape:member(1)'
    summary: |-
      Adiciona uma forma geométrica à planilha. Retorna um objeto Shape que representa a nova forma.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addGeometricShape(geometricShapeType)
    fullName: addGeometricShape(geometricShapeType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGeometricShape(geometricShapeType: Excel.GeometricShapeType): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Shapes");
              const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
              shape.left = 5;
              shape.top = 5;
              shape.height = 175;
              shape.width = 200;
              await context.sync();
          });
          ```
      parameters:
        - id: geometricShapeType
          description: 'Representa o tipo da forma geométrica. Para saber detalhes, confira Excel.GeometricShapeType.'
          type:
            - 'excel!Excel.GeometricShapeType:enum'
  - uid: 'excel!Excel.ShapeCollection#addGeometricShape:member(2)'
    summary: |-
      Adiciona uma forma geométrica à planilha. Retorna um objeto Shape que representa a nova forma.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addGeometricShape(geometricShapeTypeString)
    fullName: addGeometricShape(geometricShapeTypeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGeometricShape(geometricShapeTypeString: "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus"): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: ''
      parameters:
        - id: geometricShapeTypeString
          description: 'Representa o tipo da forma geométrica. Para saber detalhes, confira Excel.GeometricShapeType.'
          type:
            - '"LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus"'
  - uid: 'excel!Excel.ShapeCollection#addGroup:member(1)'
    summary: |-
      Um subconjunto de formas na planilha do conjunto de grupos. Retorna um objeto Shape que representa o novo grupo de formas.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addGroup(values)
    fullName: addGroup(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGroup(values: Array<string | Shape>): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Shapes");
              const square = sheet.shapes.getItem("Square");
              const pentagon = sheet.shapes.getItem("Pentagon");
              const octagon = sheet.shapes.getItem("Octagon");

              const shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
              shapeGroup.name = "Group";
              console.log("Shapes grouped");

              await context.sync();
          });
          ```
      parameters:
        - id: values
          description: Uma matriz de ID da forma ou objetos Shape.
          type:
            - 'excel!Excel.ShapeCollection#addGroup~0:complex'
  - uid: 'excel!Excel.ShapeCollection#addImage:member(1)'
    summary: |-
      Cria uma imagem de uma cadeia de caracteres na base 64 e a adiciona à planilha. Retorna o objeto Shape que representa a nova imagem.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addImage(base64ImageString)
    fullName: addImage(base64ImageString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addImage(base64ImageString: string): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          const myFile = <HTMLInputElement>document.getElementById("selectedFile");
          const reader = new FileReader();

          reader.onload = (event) => {
              Excel.run((context) => {
                  const startIndex = reader.result.toString().indexOf("base64,");
                  const mybase64 = reader.result.toString().substr(startIndex + 7);
                  const sheet = context.workbook.worksheets.getItem("Shapes");
                  const image = sheet.shapes.addImage(mybase64);
                  image.name = "Image";
                  return context.sync();
              });
          };

          // Read in the image file as a data URL.
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64ImageString
          description: Uma cadeia de caracteres codificada em base64 que representa uma imagem no formato JPEG ou PNG.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#addLine:member(1)'
    summary: |-
      Adiciona uma linha à planilha. Retorna um objeto Shape que representa a nova linha.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    fullName: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addLine(startLeft: number, startTop: number, endLeft: number, endTop: number, connectorType?: Excel.ConnectorType): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          await Excel.run(async (context) => {
              const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              const line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
              line.name = "StraightLine";
              await context.sync();
          });
          ```
      parameters:
        - id: startLeft
          description: 'A distância, em pontos, desde o início da linha até o lado esquerdo da planilha.'
          type:
            - number
        - id: startTop
          description: 'A distância, em pontos, desde o início da linha até a parte superior da planilha.'
          type:
            - number
        - id: endLeft
          description: 'A distância, em pontos, do final da linha à esquerda da planilha.'
          type:
            - number
        - id: endTop
          description: 'A distância, em pontos, do final da linha até a parte superior da planilha.'
          type:
            - number
        - id: connectorType
          description: Representa o tipo de conector. Confira Excel. ConnectorType para obter detalhes.
          type:
            - 'excel!Excel.ConnectorType:enum'
  - uid: 'excel!Excel.ShapeCollection#addLine:member(2)'
    summary: |-
      Adiciona uma linha à planilha. Retorna um objeto Shape que representa a nova linha.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addLine(startLeft, startTop, endLeft, endTop, connectorTypeString)'
    fullName: 'addLine(startLeft, startTop, endLeft, endTop, connectorTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addLine(startLeft: number, startTop: number, endLeft: number, endTop: number, connectorTypeString?: "Straight" | "Elbow" | "Curve"): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: ''
      parameters:
        - id: startLeft
          description: 'A distância, em pontos, desde o início da linha até o lado esquerdo da planilha.'
          type:
            - number
        - id: startTop
          description: 'A distância, em pontos, desde o início da linha até a parte superior da planilha.'
          type:
            - number
        - id: endLeft
          description: 'A distância, em pontos, do final da linha à esquerda da planilha.'
          type:
            - number
        - id: endTop
          description: 'A distância, em pontos, do final da linha até a parte superior da planilha.'
          type:
            - number
        - id: connectorTypeString
          description: Representa o tipo de conector. Confira Excel. ConnectorType para obter detalhes.
          type:
            - '"Straight" | "Elbow" | "Curve"'
  - uid: 'excel!Excel.ShapeCollection#addSvg:member(1)'
    summary: |-
      Cria um gráfico vetorial escalável (SVG) de uma cadeia de caracteres XML e a adiciona à planilha. Retorna um objeto Shape que representa a nova imagem.

      \[[Conjunto de APIs: EXCELAPI beta (apenas para visualização)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: addSvg(xml)
    fullName: addSvg(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSvg(xml: string): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: ''
      parameters:
        - id: xml
          description: Uma sequência de caracteres XML que representa o SVG.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#addTextBox:member(1)'
    summary: |-
      Adiciona uma caixa de texto na planilha com o texto fornecido como conteúdo. Retorna um objeto Shape que representa a nova caixa de texto.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addTextBox(text)
    fullName: addTextBox(text)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTextBox(text?: string): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          await Excel.run(async (context) => {
              const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              const textbox = shapes.addTextBox("A box with text");
              textbox.left = 100;
              textbox.top = 100;
              textbox.height = 20;
              textbox.width = 175;
              textbox.name = "Textbox";
              await context.sync();
          });
          ```
      parameters:
        - id: text
          description: Representa o texto que será mostrado na caixa de texto criado.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ShapeCollection#getCount:member(1)'
    summary: |-
      Retorna o número de formas da planilha. Somente leitura.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.ShapeCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.ShapeCollection#getItem:member(1)'
    summary: |-
      Obtém uma forma usando seu nome ou ID.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: ''
      parameters:
        - id: key
          description: Nome ou ID da forma a ser recuperada.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#getItemAt:member(1)'
    summary: |-
      Obtém uma forma usando sua posição na coleção.

      \[[Conjunto de APIs: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Shape;'
      return:
        type:
          - 'excel!Excel.Shape:class'
        description: ''
      parameters:
        - id: index
          description: O índice com base em zero da forma a ser recuperada.
          type:
            - number
  - uid: 'excel!Excel.ShapeCollection#items:member'
    summary: Obtém os itens filhos carregados nesta coleção.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Shape[];'
      return:
        type:
          - 'excel!Excel.ShapeCollection#items~0:complex'
  - uid: 'excel!Excel.ShapeCollection#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.ShapeCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
        description: ''
      parameters:
        - id: options
          description: Fornece opções para as propriedades do objeto a ser carregado.
          type:
            - 'excel!Excel.ShapeCollection#load~0:complex'
  - uid: 'excel!Excel.ShapeCollection#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ShapeCollection#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.ShapeCollection#toJSON:member(1)'
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.ShapeCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.ShapeCollectionData`<!-- -->) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ShapeCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ShapeCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Shape:class'
    name: Excel.Shape
  - uid: 'excel!Excel.GeometricShapeType:enum'
    name: Excel.GeometricShapeType
  - uid: 'excel!Excel.ShapeCollection#addGroup~0:complex'
    name: Array<string | Shape>
    fullName: Array<string | Excel.Shape>
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: '<string | '
        fullName: '<string | '
      - uid: 'excel!Excel.Shape:class'
        name: Shape
        fullName: Excel.Shape
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.ConnectorType:enum'
    name: Excel.ConnectorType
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ShapeCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ShapeCollection#items~0:complex'
    name: 'Excel.Shape[]'
    fullName: 'Excel.Shape[]'
    spec.typeScript:
      - uid: 'excel!Excel.Shape:class'
        name: Excel.Shape
        fullName: Excel.Shape
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.ShapeCollection:class'
    name: Excel.ShapeCollection
  - uid: 'excel!Excel.ShapeCollection#load~0:complex'
    name: Excel.Interfaces.ShapeCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.ShapeCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.ShapeCollectionLoadOptions:interface'
        name: Excel.Interfaces.ShapeCollectionLoadOptions
        fullName: Excel.Interfaces.ShapeCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.ShapeCollectionData:interface'
    name: Excel.Interfaces.ShapeCollectionData