### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SlicerCollection:class'
    summary: |-
      Representa uma coleção de todos os objetos slicery na pasta de trabalho ou em uma planilha.

      \[[Conjunto de APIs: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.SlicerCollection
    fullName: Excel.SlicerCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.SlicerCollection#add:member(1)'
      - 'excel!Excel.SlicerCollection#context:member'
      - 'excel!Excel.SlicerCollection#getCount:member(1)'
      - 'excel!Excel.SlicerCollection#getItem:member(1)'
      - 'excel!Excel.SlicerCollection#getItemAt:member(1)'
      - 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SlicerCollection#items:member'
      - 'excel!Excel.SlicerCollection#load:member(1)'
      - 'excel!Excel.SlicerCollection#load:member(2)'
      - 'excel!Excel.SlicerCollection#load:member(3)'
      - 'excel!Excel.SlicerCollection#toJSON:member(1)'
  - uid: 'excel!Excel.SlicerCollection#add:member(1)'
    summary: |-
      Adiciona uma nova segmentação de dados à pasta de trabalho.

      \[[Conjunto de APIs: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(slicerSource, sourceField, slicerDestination)'
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-
          A nova segmentação de,.

          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
      parameters:
        - id: slicerSource
          description: 'A fonte de dados na qual o novo slicer será baseado. Pode ser um objeto PivotTable, um objeto Table ou uma cadeia de caracteres. Quando um objeto PivotTable é passado, a fonte de dados é a fonte do objeto PivotTable. Quando um objeto Table é passado, a fonte de dados é o objeto Table. Quando uma cadeia de caracteres é passada, ela é interpretada como o nome/ID de uma tabela dinâmica.'
          type:
            - 'excel!Excel.SlicerCollection#add~0:complex'
        - id: sourceField
          description: 'O campo na fonte de dados a ser filtrado. Pode ser um objeto PivotField, um objeto TableColumn, a ID de um PivotField ou a ID/nome de TableColumn.'
          type:
            - 'excel!Excel.SlicerCollection#add~1:complex'
        - id: slicerDestination
          description: Opcional. A planilha na qual a nova segmentação de trabalho será criada. Pode ser um objeto Worksheet ou o nome/ID de uma planilha. Esse parâmetro pode ser omitido se a coleção slicer for recuperada da planilha.
          type:
            - 'excel!Excel.SlicerCollection#add~2:complex'
  - uid: 'excel!Excel.SlicerCollection#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.SlicerCollection#getCount:member(1)'
    summary: |-
      Retorna o número de segmentações de dados na coleção.

      \[[Conjunto de APIs: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.SlicerCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.SlicerCollection#getItem:member(1)'
    summary: |-
      Obtém um objeto de segmentação de dados usando seu respectivo nome ou ID.

      \[[Conjunto de APIs: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-slicer.yaml
          await Excel.run(async (context) => {
              const slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.caption = "Fruit Types";
              slicer.left = 395;
              slicer.top = 15;
              slicer.height = 135;
              slicer.width = 150;
              await context.sync();
          });
          ```
      parameters:
        - id: key
          description: 'O nome ou a ID da segmentação de,.'
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#getItemAt:member(1)'
    summary: |-
      Obtém uma segmentação de dados com base em sua posição na coleção.

      \[[Conjunto de APIs: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: index
          description: Valor de índice do objeto a ser recuperado. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    summary: |-
      Obtém uma segmentação de dados usando seu nome ou id. Se a ela não existir, retornará um objeto null.

      \[[Conjunto de APIs: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: key
          description: 'Nome ou ID da segmentação de, a ser recuperada.'
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#items:member'
    summary: Obtém os itens filhos carregados nesta coleção.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type:
          - 'excel!Excel.SlicerCollection#items~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: options
          description: Fornece opções para as propriedades do objeto a ser carregado.
          type:
            - 'excel!Excel.SlicerCollection#load~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.SlicerCollection#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.SlicerCollection#toJSON:member(1)'
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.SlicerCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.SlicerCollectionData`<!-- -->) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.SlicerCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Slicer:class'
    name: Excel.Slicer
  - uid: 'excel!Excel.SlicerCollection#add~0:complex'
    name: string | PivotTable | Table
    fullName: string | Excel.PivotTable | Excel.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotTable:class'
        name: PivotTable
        fullName: Excel.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.Table:class'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.SlicerCollection#add~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | Excel.PivotField | number | Excel.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotField:class'
        name: PivotField
        fullName: Excel.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!Excel.TableColumn:class'
        name: TableColumn
        fullName: Excel.TableColumn
  - uid: 'excel!Excel.SlicerCollection#add~2:complex'
    name: string | Worksheet
    fullName: string | Excel.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.SlicerCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.SlicerCollection#items~0:complex'
    name: 'Excel.Slicer[]'
    fullName: 'Excel.Slicer[]'
    spec.typeScript:
      - uid: 'excel!Excel.Slicer:class'
        name: Excel.Slicer
        fullName: Excel.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.SlicerCollection#load~0:complex'
    name: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.SlicerCollectionLoadOptions:interface'
        name: Excel.Interfaces.SlicerCollectionLoadOptions
        fullName: Excel.Interfaces.SlicerCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.SlicerCollectionData:interface'
    name: Excel.Interfaces.SlicerCollectionData