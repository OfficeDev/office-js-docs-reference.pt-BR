### YamlMime:TSType
name: Excel.ConditionalFormatCollection
uid: excel!Excel.ConditionalFormatCollection:class
package: excel!
fullName: Excel.ConditionalFormatCollection
summary: >-
  Representa uma coleção de todos os formatos condicionais que se sobrepõem ao intervalo.


  \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.ConditionalFormatCollection#context:member
  package: excel!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do complemento ao processo do aplicativo host do Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: items
  uid: excel!Excel.ConditionalFormatCollection#items:member
  package: excel!
  fullName: items
  summary: Obtém os itens filhos carregados nesta coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.ConditionalFormat[];'
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />[]
methods:
- name: add(type)
  uid: excel!Excel.ConditionalFormatCollection#add:member(1)
  package: excel!
  fullName: add(type)
  summary: >-
    Adiciona um novo formato condicional à coleção na prioridade primeiro/superior.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
    parameters:
    - id: type
      description: O tipo de formato condicional que está sendo adicionado. Confira Excel.ConditionalFormatType para obter detalhes.
      type: <xref uid="excel!Excel.ConditionalFormatType:enum" />
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- name: add(typeString)
  uid: excel!Excel.ConditionalFormatCollection#add:member(2)
  package: excel!
  fullName: add(typeString)
  summary: >-
    Adiciona um novo formato condicional à coleção na prioridade primeiro/superior.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
    parameters:
    - id: typeString
      description: O tipo de formato condicional que está sendo adicionado. Confira Excel.ConditionalFormatType para obter detalhes.
      type: "\"Custom\" | \"DataBar\" | \"ColorScale\" | \"IconSet\" | \"TopBottom\" | \"PresetCriteria\" | \"ContainsText\" | \"CellValue\""
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: clearAll()
  uid: excel!Excel.ConditionalFormatCollection#clearAll:member(1)
  package: excel!
  fullName: clearAll()
  summary: >-
    Limpa todos os formatos condicionais ativos no intervalo atual especificado.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearAll(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n});\n```"
- name: getCount()
  uid: excel!Excel.ConditionalFormatCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    Retorna o número de formatos condicionais na agenda.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;\n    var cfCount = range.conditionalFormats.getCount(); \n\n    return ctx.sync().then(function () {\n        console.log(\"Count: \" + cfCount.value);\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItem(id)
  uid: excel!Excel.ConditionalFormatCollection#getItem:member(1)
  package: excel!
  fullName: getItem(id)
  summary: >-
    Retorna um formato condicional para o ID fornecido.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(id: string): Excel.ConditionalFormat;'
    parameters:
    - id: id
      description: A id do formato condicional.
      type: string
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: >-
        Objeto Conditional Format.


        #### <a name="examples"></a>Exemplos


        ```javascript

        Excel.run(function (ctx) {
            var sheetName = "Sheet1";
            var rangeAddress = "A1:C3";
            var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
            var conditionalFormats = range.conditionalFormats;
            var conditionalFormat = conditionalFormats.getItemAt(3);
            return ctx.sync().then(function () {
                console.log("Conditional Format at Item 3 Loaded");
            });
        }).catch(function (error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });

        ```
- name: getItemAt(index)
  uid: excel!Excel.ConditionalFormatCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Retorna um formato condicional no índice fornecido.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.ConditionalFormat;'
    parameters:
    - id: index
      description: Índice dos formatos condicionais a serem recuperados.
      type: number
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.ConditionalFormatCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
    parameters:
    - id: options
      description: Fornece opções para quais propriedades do objeto carregar.
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ConditionalFormatCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ConditionalFormatCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a carregar.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ConditionalFormatCollection:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ConditionalFormatCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades a carregar e é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades de navegação `propertyNamesAndPaths.expand` a carregar.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.ConditionalFormatCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.ConditionalFormatCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Substitui o método JavaScript para fornecer uma saída mais útil quando um objeto `toJSON()` de API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto original é um objeto API, o método retorna um objeto `Excel.ConditionalFormatCollection` `toJSON` JavaScript simples (digitado como `Excel.Interfaces.ConditionalFormatCollectionData`<!-- -->) que contém uma matriz de "itens" com cópias rasas de quaisquer propriedades carregadas dos itens da coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 24fd27a229cd782a068aed69098d3975203da76d
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49851274"
