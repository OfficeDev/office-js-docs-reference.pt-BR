### YamlMime:UniversalReference
ms.openlocfilehash: 0f757bb304e374f0513ab4d460afb46048b66bbf
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 01/17/2019
ms.locfileid: "28725344"
items:
- uid: excel.Excel.IconSetConditionalFormat
  summary: >-
    <span data-ttu-id="b8879-101">Representa critérios IconSet para formatação condicional.</span><span class="sxs-lookup"><span data-stu-id="b8879-101">Represents an IconSet criteria for conditional formatting.</span></span>


    <span data-ttu-id="b8879-102">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8879-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.IconSetConditionalFormat
  fullName: Excel.IconSetConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.IconSetConditionalFormat.context
  - excel.Excel.IconSetConditionalFormat.criteria
  - excel.Excel.IconSetConditionalFormat.load
  - excel.Excel.IconSetConditionalFormat.reverseIconOrder
  - excel.Excel.IconSetConditionalFormat.showIconOnly
  - excel.Excel.IconSetConditionalFormat.style
  - excel.Excel.IconSetConditionalFormat.toJSON
- uid: excel.Excel.IconSetConditionalFormat.context
  summary: <span data-ttu-id="b8879-103">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="b8879-103">The request context associated with the object.</span></span> <span data-ttu-id="b8879-104">Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="b8879-104">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.IconSetConditionalFormat.criteria
  summary: >-
    <span data-ttu-id="b8879-105">Uma matriz de critérios e IconSets para as regras e possíveis ícones personalizados para ícones condicionais.</span><span class="sxs-lookup"><span data-stu-id="b8879-105">An array of Criteria and IconSets for the rules and potential custom icons for conditional icons.</span></span> <span data-ttu-id="b8879-106">Observe que para o primeiro critério somente o ícone personalizado pode ser modificado, enquanto o tipo de fórmula, e o operador será ignorada quando definido.</span><span class="sxs-lookup"><span data-stu-id="b8879-106">Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.</span></span>


    <span data-ttu-id="b8879-107">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8879-107">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: criteria
  fullName: criteria
  langs:
  - typeScript
  type: property
  syntax:
    content: 'criteria: Excel.ConditionalIconCriterion[];'
    return:
      type:
      - Excel.ConditionalIconCriterion[]
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8879-108\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8879-108\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.IconSetConditionalFormat.load
  summary: <span data-ttu-id="b8879-109">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="b8879-109">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8879-110">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="b8879-110">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="b8879-111">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="b8879-111">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="b8879-112">`load(option?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class="sxs-lookup"><span data-stu-id="b8879-112">`load(option?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="b8879-113">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.IconSetConditionalFormat`-Só está disponível em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="b8879-113">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.IconSetConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="b8879-114">Ele é semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="b8879-114">It is similar to the preceding signature.</span></span> <span data-ttu-id="b8879-115">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class="sxs-lookup"><span data-stu-id="b8879-115">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="b8879-116">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="b8879-116">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="b8879-117">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="b8879-117">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="b8879-118">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="b8879-118">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.IconSetConditionalFormat.reverseIconOrder
  summary: >-
    <span data-ttu-id="b8879-p105">Caso verdadeiro, inverte as ordens de ícones para IconSet. Observe que não será possível definir isso se ícones personalizados forem usados.</span><span class="sxs-lookup"><span data-stu-id="b8879-p105">If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.</span></span>


    <span data-ttu-id="b8879-121">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8879-121">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: reverseIconOrder
  fullName: reverseIconOrder
  langs:
  - typeScript
  type: property
  syntax:
    content: 'reverseIconOrder: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.IconSetConditionalFormat.showIconOnly
  summary: >-
    <span data-ttu-id="b8879-122">Caso verdadeiro, oculta os valores e mostra somente ícones.</span><span class="sxs-lookup"><span data-stu-id="b8879-122">If true, hides the values and only shows icons.</span></span>


    <span data-ttu-id="b8879-123">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8879-123">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showIconOnly
  fullName: showIconOnly
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showIconOnly: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.IconSetConditionalFormat.style
  summary: >-
    <span data-ttu-id="b8879-124">Se definido, exibe a opção IconSet do formato condicional.</span><span class="sxs-lookup"><span data-stu-id="b8879-124">If set, displays the IconSet option for the conditional format.</span></span>


    <span data-ttu-id="b8879-125">\[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8879-125">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon";'
    return:
      type:
      - Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon"
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8879-126\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8879-126\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.IconSetConditionalFormat.toJSON
  summary: <span data-ttu-id="b8879-127">Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="b8879-127">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="b8879-128">(`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto Excel.IconSetConditionalFormat original é um objeto de API, o `toJSON` método retorna um objeto de JavaScript simples (digitado como `Excel.Interfaces.IconSetConditionalFormatData` <!-- -->) que contém superficiais cópias de todas as propriedades do objeto original filho carregado.</span><span class="sxs-lookup"><span data-stu-id="b8879-128">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.IconSetConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.IconSetConditionalFormatData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.IconSetConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.IconSetConditionalFormatData
      description: ''
