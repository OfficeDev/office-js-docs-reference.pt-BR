### YamlMime:UniversalReference
ms.openlocfilehash: e1b5e15e60e18895588159ee02ae5961c13a0531
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29975561"
items:
- uid: excel.Excel.CellValueConditionalFormat
  summary: >-
    Representa um formato condicional de valor de célula.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.CellValueConditionalFormat
  fullName: Excel.CellValueConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CellValueConditionalFormat.context
  - excel.Excel.CellValueConditionalFormat.format
  - excel.Excel.CellValueConditionalFormat.load
  - excel.Excel.CellValueConditionalFormat.load_1
  - excel.Excel.CellValueConditionalFormat.load_2
  - excel.Excel.CellValueConditionalFormat.rule
  - excel.Excel.CellValueConditionalFormat.set
  - excel.Excel.CellValueConditionalFormat.set_1
  - excel.Excel.CellValueConditionalFormat.toJSON
- uid: excel.Excel.CellValueConditionalFormat.context
  summary: O contexto de solicitação associado ao objeto. Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.CellValueConditionalFormat.format
  summary: >-
    Retorna um objeto de formato, a fonte de formatos condicionais, preenchimento, bordas e outras propriedades de encapsulamento.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CellValueConditionalFormat.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, esse método tem as seguintes assinaturas:


    `load(option?: string | string[]): Excel.CellValueConditionalFormat`-Onde opção é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.


    `load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.CellValueConditionalFormatLoadOptions): Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.CellValueConditionalFormatLoadOptions
- uid: excel.Excel.CellValueConditionalFormat.load_1
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: ''
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: excel.Excel.CellValueConditionalFormat.load_2
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: Onde propertyNamesAndPaths.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e propertyNamesAndPaths.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.CellValueConditionalFormat.rule
  summary: >-
    Representa o objeto Regra neste formato condicional.


    \[[Conjunto de APIs: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rule
  fullName: rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rule: Excel.ConditionalCellValueRule;'
    return:
      type:
      - excel.Excel.ConditionalCellValueRule
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CellValueConditionalFormat.set
  summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto sem formatação com as propriedades adequadas ou outro objeto API do mesmo tipo.
  remarks: >-
    Esse método tem a seguinte assinatura adicional:


    `set(properties: Excel.CellValueConditionalFormat): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.CellValueConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Um objeto de JavaScript com propriedades que são estruturadas isomorphically às propriedades do objeto no qual o método é chamado.
      type:
      - Interfaces.CellValueConditionalFormatUpdateData
    - id: options
      description: Fornece uma opção para suprimir erros se o objeto properties tenta definir todas as propriedades somente leitura.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.CellValueConditionalFormat.set_1
  summary: Define várias propriedades em um objeto ao mesmo tempo, com base em um objeto carregado existente.
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.CellValueConditionalFormat): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.CellValueConditionalFormat
- uid: excel.Excel.CellValueConditionalFormat.toJSON
  summary: Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto Excel.CellValueConditionalFormat original é um objeto de API, o `toJSON` método retorna um objeto de JavaScript simples (digitado como `Excel.Interfaces.CellValueConditionalFormatData` <!-- -->) que contém superficiais cópias de todas as propriedades do objeto original filho carregado.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CellValueConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.CellValueConditionalFormatData
      description: ''
