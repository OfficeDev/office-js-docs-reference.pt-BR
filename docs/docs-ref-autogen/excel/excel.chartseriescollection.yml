### YamlMime:UniversalReference
ms.openlocfilehash: 67e798487f7440346eec7200d1776e0963c03fd7
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29978746"
items:
- uid: excel.Excel.ChartSeriesCollection
  summary: >-
    Representa uma coleção de série do gráfico.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.ChartSeriesCollection
  fullName: Excel.ChartSeriesCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ChartSeriesCollection.add
  - excel.Excel.ChartSeriesCollection.context
  - excel.Excel.ChartSeriesCollection.count
  - excel.Excel.ChartSeriesCollection.getCount
  - excel.Excel.ChartSeriesCollection.getItemAt
  - excel.Excel.ChartSeriesCollection.items
  - excel.Excel.ChartSeriesCollection.load
  - excel.Excel.ChartSeriesCollection.load_1
  - excel.Excel.ChartSeriesCollection.load_2
  - excel.Excel.ChartSeriesCollection.toJSON
- uid: excel.Excel.ChartSeriesCollection.add
  summary: >-
    Adiciona uma nova série para o conjunto. A nova série adicionada não é visível até o conjunto de valores / x tamanhos de valores/bolha do eixo para ele (dependendo do tipo de gráfico).


    \[[Conjunto de APIs: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(name, index)
  fullName: add(name, index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string, index?: number): Excel.ChartSeries;'
    return:
      type:
      - excel.Excel.ChartSeries
      description: ''
    parameters:
    - id: name
      description: Opcional. Nome da série.
      type:
      - string
    - id: index
      description: Opcional. Valor de índice da série a ser adicionado. Zero indexado.
      type:
      - number
- uid: excel.Excel.ChartSeriesCollection.context
  summary: O contexto de solicitação associado ao objeto. Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.ChartSeriesCollection.count
  summary: >-
    Retorna o número de série da coleção. Somente leitura.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.ChartSeriesCollection.getCount
  summary: >-
    Retorna o número de série da coleção.


    \[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.ChartSeriesCollection.getItemAt
  summary: >-
    Recupera uma série com base na respectiva posição na coleção.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.ChartSeries;'
    return:
      type:
      - excel.Excel.ChartSeries
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Get the name of the first series in the series collection.\nExcel.run(function (ctx) { \n    var seriesCollection = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\").series;\n    seriesCollection.load('items');\n    return ctx.sync().then(function() {\n        console.log(seriesCollection.items[0].name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Valor de índice do objeto a ser recuperado. Indexados com zero.
      type:
      - number
- uid: excel.Excel.ChartSeriesCollection.items
  summary: Obtém o filho carregado itens nesta coleção.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.ChartSeries[];'
    return:
      type:
      - Excel.ChartSeries[]
- uid: excel.Excel.ChartSeriesCollection.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, esse método tem as seguintes assinaturas:


    `load(option?: string | string[]): Excel.ChartSeriesCollection`-Onde opção é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.


    `load(option?: { select?: string; expand?: string; }): Excel.ChartSeriesCollection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartSeriesCollection`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.ChartSeriesCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ChartSeriesCollection;'
    return:
      type:
      - excel.Excel.ChartSeriesCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.ChartSeriesCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.ChartSeriesCollection.load_1
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ChartSeriesCollection;'
    return:
      type:
      - excel.Excel.ChartSeriesCollection
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Getting the names of series in the series collection.\nExcel.run(function (ctx) { \n    var seriesCollection = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\").series;\n    seriesCollection.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < seriesCollection.items.length; i++)\n        {\n            console.log(seriesCollection.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of chart series in collection.\nExcel.run(function (ctx) { \n    var seriesCollection = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\").series;\n    seriesCollection.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"series: Count= \" + seriesCollection.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: excel.Excel.ChartSeriesCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.ChartSeriesCollection;'
    return:
      type:
      - excel.Excel.ChartSeriesCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.ChartSeriesCollection.toJSON
  summary: Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o original `Excel.ChartSeriesCollection` é um objeto de API, o `toJSON` método retorna um objeto de JavaScript sem formatação (digitado como `Excel.Interfaces.ChartSeriesCollectionData` <!-- -->) que contém uma matriz de "itens" com superficiais cópias de todas as propriedades de itens da coleção carregadas.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartSeriesCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.ChartSeriesCollectionData
      description: ''
