### YamlMime:UniversalReference
ms.openlocfilehash: 10d6c6259be67660f66d923a8323b5328847945b
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 01/17/2019
ms.locfileid: "28725379"
items:
- uid: excel.Excel.BindingCollection
  summary: >-
    <span data-ttu-id="ccc55-101">Representa a coleção de todos os objetos Binding que fazem parte da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="ccc55-101">Represents the collection of all the binding objects that are part of the workbook.</span></span>


    <span data-ttu-id="ccc55-102">\[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.BindingCollection
  fullName: Excel.BindingCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.BindingCollection.add
  - excel.Excel.BindingCollection.addFromNamedItem
  - excel.Excel.BindingCollection.addFromSelection
  - excel.Excel.BindingCollection.context
  - excel.Excel.BindingCollection.count
  - excel.Excel.BindingCollection.getCount
  - excel.Excel.BindingCollection.getItem
  - excel.Excel.BindingCollection.getItemAt
  - excel.Excel.BindingCollection.getItemOrNullObject
  - excel.Excel.BindingCollection.items
  - excel.Excel.BindingCollection.load
  - excel.Excel.BindingCollection.toJSON
- uid: excel.Excel.BindingCollection.add
  summary: >-
    <span data-ttu-id="ccc55-103">Adiciona uma nova associação a um intervalo específico.</span><span class="sxs-lookup"><span data-stu-id="ccc55-103">Add a new binding to a particular Range.</span></span>


    <span data-ttu-id="ccc55-104">\[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-104">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(range, bindingType, id)
  fullName: add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: range
      description: <span data-ttu-id="ccc55-p101">Intervalo para vincular a associação. Pode ser um objeto Range do Excel ou uma cadeia de caracteres. Se for uma cadeia de caracteres, deve conter o endereço completo, incluindo o nome da planilha</span><span class="sxs-lookup"><span data-stu-id="ccc55-p101">Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name</span></span>
      type:
      - Range | string
    - id: bindingType
      description: <span data-ttu-id="ccc55-108">Tipo da associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-108">Type of binding.</span></span> <span data-ttu-id="ccc55-109">Consulte Excel.BindingType.</span><span class="sxs-lookup"><span data-stu-id="ccc55-109">See Excel.BindingType.</span></span>
      type:
      - excel.Excel.BindingType
    - id: id
      description: <span data-ttu-id="ccc55-110">Nome da associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-110">Name of binding.</span></span>
      type:
      - string
- uid: excel.Excel.BindingCollection.addFromNamedItem
  summary: >-
    <span data-ttu-id="ccc55-111">Adiciona uma nova associação com base em um item nomeado na pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="ccc55-111">Add a new binding based on a named item in the workbook.</span></span> <span data-ttu-id="ccc55-112">Se o item nomeado referencia a várias áreas, será retornado o erro "InvalidReference".</span><span class="sxs-lookup"><span data-stu-id="ccc55-112">If the named item references to multiple areas, the "InvalidReference" error will be returned.</span></span>


    <span data-ttu-id="ccc55-113">\[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-113">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: addFromNamedItem(name, bindingType, id)
  fullName: addFromNamedItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: name
      description: <span data-ttu-id="ccc55-114">Nome do qual deseja criar a associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-114">Name from which to create binding.</span></span>
      type:
      - string
    - id: bindingType
      description: <span data-ttu-id="ccc55-115">Tipo da associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-115">Type of binding.</span></span> <span data-ttu-id="ccc55-116">Consulte Excel.BindingType.</span><span class="sxs-lookup"><span data-stu-id="ccc55-116">See Excel.BindingType.</span></span>
      type:
      - excel.Excel.BindingType
    - id: id
      description: <span data-ttu-id="ccc55-117">Nome da associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-117">Name of binding.</span></span>
      type:
      - string
- uid: excel.Excel.BindingCollection.addFromSelection
  summary: >-
    <span data-ttu-id="ccc55-118">Adiciona uma nova associação com base na seleção atual.</span><span class="sxs-lookup"><span data-stu-id="ccc55-118">Add a new binding based on the current selection.</span></span> <span data-ttu-id="ccc55-119">Se a seleção tiver várias áreas, será retornado o erro "InvalidReference".</span><span class="sxs-lookup"><span data-stu-id="ccc55-119">If the selection has multiple areas, the "InvalidReference" error will be returned.</span></span>


    <span data-ttu-id="ccc55-120">\[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-120">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: addFromSelection(bindingType, id)
  fullName: addFromSelection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: bindingType
      description: <span data-ttu-id="ccc55-121">Tipo da associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-121">Type of binding.</span></span> <span data-ttu-id="ccc55-122">Consulte Excel.BindingType.</span><span class="sxs-lookup"><span data-stu-id="ccc55-122">See Excel.BindingType.</span></span>
      type:
      - excel.Excel.BindingType
    - id: id
      description: <span data-ttu-id="ccc55-123">Nome da associação.</span><span class="sxs-lookup"><span data-stu-id="ccc55-123">Name of binding.</span></span>
      type:
      - string
- uid: excel.Excel.BindingCollection.context
  summary: <span data-ttu-id="ccc55-124">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="ccc55-124">The request context associated with the object.</span></span> <span data-ttu-id="ccc55-125">Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="ccc55-125">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.BindingCollection.count
  summary: >-
    <span data-ttu-id="ccc55-p108">Retorna o número de associações da coleção. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="ccc55-p108">Returns the number of bindings in the collection. Read-only.</span></span>


    <span data-ttu-id="ccc55-128">\[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.BindingCollection.getCount
  summary: >-
    <span data-ttu-id="ccc55-129">Obtém o número de associações da coleção.</span><span class="sxs-lookup"><span data-stu-id="ccc55-129">Gets the number of bindings in the collection.</span></span>


    <span data-ttu-id="ccc55-130">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-130">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.BindingCollection.getItem
  summary: >-
    <span data-ttu-id="ccc55-131">Obtém um objeto de associação pela ID.</span><span class="sxs-lookup"><span data-stu-id="ccc55-131">Gets a binding object by ID.</span></span>


    <span data-ttu-id="ccc55-132">\[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-132">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ccc55-133\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-133\">Examples</span></span>\n\n```javascript\n// Create a table binding to monitor data changes in the table. \n// When data is changed, the background color of the table will be changed to orange.\nfunction addEventHandler() {\n    //Create Table1\nExcel.run(function (ctx) { \n    ctx.workbook.tables.add(\"Sheet1!A1:C4\", true);\n    return ctx.sync().then(function() {\n             console.log(\"My Diet Data Inserted!\");\n    })\n    .catch(function (error) {\n             console.log(JSON.stringify(error));\n    });\n});\n    //Create a new table binding for Table1\nOffice.context.document.bindings.addFromNamedItemAsync(\n    \"Table1\", Office.CoercionType.Table, { id: \"myBinding\" }, function (asyncResult) {\n    if (asyncResult.status == \"failed\") {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    }\n    else {\n        // If succeeded, then add event handler to the table binding.\n        Office.select(\"bindings#myBinding\").addHandlerAsync(\n            Office.EventType.BindingDataChanged, onBindingDataChanged);\n    }\n});\n}\n    \n// when data in the table is changed, this event will be triggered.\nfunction onBindingDataChanged(eventArgs) {\nExcel.run(function (ctx) { \n    // highlight the table in orange to indicate data has been changed.\n    ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = \"Orange\";\n    return ctx.sync().then(function() {\n            console.log(\"The value in this table got changed!\");\n    })\n    .catch(function (error) {\n            console.log(JSON.stringify(error));\n    });\n});\n}\n```\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="ccc55-134">ID do objeto de associação a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="ccc55-134">Id of the binding object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.BindingCollection.getItemAt
  summary: >-
    <span data-ttu-id="ccc55-135">Obtém um objeto de associação com base em sua posição na matriz dos itens.</span><span class="sxs-lookup"><span data-stu-id="ccc55-135">Gets a binding object based on its position in the items array.</span></span>


    <span data-ttu-id="ccc55-136">\[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-136">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ccc55-137\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-137\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="ccc55-p109">Valor de índice do objeto a ser recuperado. Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="ccc55-p109">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.BindingCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="ccc55-p110">Obtém um objeto binding pela ID. Se o objeto binding não existir, retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="ccc55-p110">Gets a binding object by ID. If the binding object does not exist, will return a null object.</span></span>


    <span data-ttu-id="ccc55-142">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ccc55-142">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: id
      description: <span data-ttu-id="ccc55-143">ID do objeto de associação a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="ccc55-143">Id of the binding object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.BindingCollection.items
  summary: <span data-ttu-id="ccc55-144">Obtém o filho carregado itens nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="ccc55-144">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Binding[];'
    return:
      type:
      - Excel.Binding[]
- uid: excel.Excel.BindingCollection.load
  summary: <span data-ttu-id="ccc55-145">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="ccc55-145">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ccc55-146">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="ccc55-146">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"ccc55-147\">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-147\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"ccc55-148\">`load(option?: { select?: string; expand?: string; }): Excel.BindingCollection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-148\">`load(option?: { select?: string; expand?: string; }): Excel.BindingCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"ccc55-149\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection`-Só está disponível em tipos de coleção.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-149\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"ccc55-150\">Ele é semelhante à assinatura anterior.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-150\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"ccc55-151\">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-151\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"ccc55-152\">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-152\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"ccc55-153\">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-153\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"ccc55-154\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ccc55-154\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < bindings.items.length; i++)\n        {\n            console.log(bindings.items[i].id);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of bindings\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"Bindings: Count= \" + bindings.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.BindingCollection;'
    return:
      type:
      - excel.Excel.BindingCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="ccc55-155">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="ccc55-155">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.BindingCollection.toJSON
  summary: <span data-ttu-id="ccc55-156">Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="ccc55-156">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="ccc55-157">(`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o original `Excel.BindingCollection` é um objeto de API, o `toJSON` método retorna um objeto de JavaScript sem formatação (digitado como `Excel.Interfaces.BindingCollectionData` <!-- -->) que contém uma matriz de "itens" com superficiais cópias de todas as propriedades de itens da coleção carregadas.</span><span class="sxs-lookup"><span data-stu-id="ccc55-157">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.BindingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.BindingCollectionData
      description: ''
