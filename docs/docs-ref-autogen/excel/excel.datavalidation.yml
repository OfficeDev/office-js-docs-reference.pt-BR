### YamlMime:UniversalReference
ms.openlocfilehash: 304d358c1d4c6cbeb86eec30e5f5500c432d82c9
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29980762"
items:
- uid: excel.Excel.DataValidation
  summary: >-
    Representa a validação de dados aplicada ao intervalo atual.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.DataValidation
  fullName: Excel.DataValidation
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.DataValidation.clear
  - excel.Excel.DataValidation.context
  - excel.Excel.DataValidation.errorAlert
  - excel.Excel.DataValidation.ignoreBlanks
  - excel.Excel.DataValidation.load
  - excel.Excel.DataValidation.load_1
  - excel.Excel.DataValidation.load_2
  - excel.Excel.DataValidation.prompt
  - excel.Excel.DataValidation.rule
  - excel.Excel.DataValidation.set
  - excel.Excel.DataValidation.set_1
  - excel.Excel.DataValidation.toJSON
  - excel.Excel.DataValidation.type
  - excel.Excel.DataValidation.valid
- uid: excel.Excel.DataValidation.clear
  summary: >-
    Desfazer a validação de dados do intervalo atual.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: clear()
  fullName: clear()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.DataValidation.context
  summary: O contexto de solicitação associado ao objeto. Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.DataValidation.errorAlert
  summary: >-
    Alerta de erro quando o usuário insere dados inválidos.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: errorAlert
  fullName: errorAlert
  langs:
  - typeScript
  type: property
  syntax:
    content: 'errorAlert: Excel.DataValidationErrorAlert;'
    return:
      type:
      - excel.Excel.DataValidationErrorAlert
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const commentsRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Comments\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    commentsRange.dataValidation.clear();   \n\n    // If the value of A2 is contained in the value of C2, then \n    // SEARCH(A2,C2) returns the number where it begins. Otherwise,\n    // it does not return a number.\n    let redundantStringRule = {\n        custom: {\n            formula: \"=NOT(ISNUMBER(SEARCH(A2,C2)))\"\n        }\n    };\n    commentsRange.dataValidation.rule = redundantStringRule;\n    commentsRange.dataValidation.errorAlert = {\n        message: \"It is redundant to include the baby name in the comment.\",\n        showAlert: true,\n        style: \"Information\",\n        title: \"Baby Name in Comment\"\n    };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.DataValidation.ignoreBlanks
  summary: >-
    Ignora espaços em branco: nenhuma validação de dados será executada em células vazias, o padrão será definido como verdadeiro.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: ignoreBlanks
  fullName: ignoreBlanks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'ignoreBlanks: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.DataValidation.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, esse método tem as seguintes assinaturas:


    `load(option?: string | string[]): Excel.DataValidation`-Onde opção é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.


    `load(option?: { select?: string; expand?: string; }): Excel.DataValidation`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.DataValidationLoadOptions
- uid: excel.Excel.DataValidation.load_1
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
      description: ''
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: excel.Excel.DataValidation.load_2
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: Onde propertyNamesAndPaths.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e propertyNamesAndPaths.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.DataValidation.prompt
  summary: >-
    Avisar quando os usuários selecionam uma célula.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: prompt
  fullName: prompt
  langs:
  - typeScript
  type: property
  syntax:
    content: 'prompt: Excel.DataValidationPrompt;'
    return:
      type:
      - excel.Excel.DataValidationPrompt
- uid: excel.Excel.DataValidation.rule
  summary: >-
    Regra de validação de dados que contém os diferentes tipos de critérios de validação de dados.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rule
  fullName: rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rule: Excel.DataValidationRule;'
    return:
      type:
      - excel.Excel.DataValidationRule
- uid: excel.Excel.DataValidation.set
  summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto sem formatação com as propriedades adequadas ou outro objeto API do mesmo tipo.
  remarks: >-
    Esse método tem a seguinte assinatura adicional:


    `set(properties: Excel.DataValidation): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Um objeto de JavaScript com propriedades que são estruturadas isomorphically às propriedades do objeto no qual o método é chamado.
      type:
      - Interfaces.DataValidationUpdateData
    - id: options
      description: Fornece uma opção para suprimir erros se o objeto properties tenta definir todas as propriedades somente leitura.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.DataValidation.set_1
  summary: Define várias propriedades em um objeto ao mesmo tempo, com base em um objeto carregado existente.
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.DataValidation): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.DataValidation
- uid: excel.Excel.DataValidation.toJSON
  summary: Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto Excel.DataValidation original é um objeto de API, o `toJSON` método retorna um objeto de JavaScript simples (digitado como `Excel.Interfaces.DataValidationData` <!-- -->) que contém superficiais cópias de todas as propriedades do objeto original filho carregado.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.DataValidationData;'
    return:
      type:
      - excel.Excel.Interfaces.DataValidationData
      description: ''
- uid: excel.Excel.DataValidation.type
  summary: >-
    Tipo de validação de dados, confira Excel.DataValidationType para obter detalhes.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
    return:
      type:
      - Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
- uid: excel.Excel.DataValidation.valid
  summary: >-
    Representa se todos os valores de célula são válidos de acordo com as regras de validação de dados. Retorna true se todos os valores de célula são válidos, ou false se todos os valores de célula são inválidos. Retorna null se existem em ambos os valores das células válidas e inválidas dentro do intervalo.


    \[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: valid
  fullName: valid
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly valid: boolean;'
    return:
      type:
      - boolean
