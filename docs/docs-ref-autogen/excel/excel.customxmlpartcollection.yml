### YamlMime:UniversalReference
ms.openlocfilehash: ddb5e3ab5990ec33d169d01228b3b915d3438c3b
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29981161"
items:
- uid: excel.Excel.CustomXmlPartCollection
  summary: >-
    <span data-ttu-id="78f3b-101">Uma coleção de partes XML personalizadas.</span><span class="sxs-lookup"><span data-stu-id="78f3b-101">A collection of custom XML parts.</span></span>


    <span data-ttu-id="78f3b-102">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="78f3b-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomXmlPartCollection
  fullName: Excel.CustomXmlPartCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomXmlPartCollection.add
  - excel.Excel.CustomXmlPartCollection.context
  - excel.Excel.CustomXmlPartCollection.getByNamespace
  - excel.Excel.CustomXmlPartCollection.getCount
  - excel.Excel.CustomXmlPartCollection.getItem
  - excel.Excel.CustomXmlPartCollection.getItemOrNullObject
  - excel.Excel.CustomXmlPartCollection.items
  - excel.Excel.CustomXmlPartCollection.load
  - excel.Excel.CustomXmlPartCollection.load_1
  - excel.Excel.CustomXmlPartCollection.load_2
  - excel.Excel.CustomXmlPartCollection.toJSON
- uid: excel.Excel.CustomXmlPartCollection.add
  summary: >-
    <span data-ttu-id="78f3b-103">Adiciona uma nova parte XML personalizada à pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="78f3b-103">Adds a new custom XML part to the workbook.</span></span>


    <span data-ttu-id="78f3b-104">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="78f3b-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(xml)
  fullName: add(xml)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(xml: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"78f3b-105\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78f3b-105\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    // You must have the xmlns attribute to populate the \n    // CustomXml.namespaceUri property.\n    const originalXml = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    const customXmlPart = context.workbook.customXmlParts.add(originalXml);\n    customXmlPart.load(\"id\");\n    const xmlBlob = customXmlPart.getXml();\n\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    $(\"#display-xml\").text(readableXml);\n\n    // Store the XML part's ID in a setting.\n    const settings = context.workbook.settings;\n    settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n    await context.sync();\n});\n```"
    parameters:
    - id: xml
      description: <span data-ttu-id="78f3b-p101">Conteúdo XML. Deve ser um fragmento XML válido.</span><span class="sxs-lookup"><span data-stu-id="78f3b-p101">XML content. Must be a valid XML fragment.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartCollection.context
  summary: <span data-ttu-id="78f3b-108">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="78f3b-108">The request context associated with the object.</span></span> <span data-ttu-id="78f3b-109">Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="78f3b-109">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.CustomXmlPartCollection.getByNamespace
  summary: >-
    <span data-ttu-id="78f3b-110">Obtém uma nova coleção com escopo de partes XML personalizadas cujos namespaces correspondem ao namespace especificado.</span><span class="sxs-lookup"><span data-stu-id="78f3b-110">Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.</span></span>


    <span data-ttu-id="78f3b-111">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="78f3b-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getByNamespace(namespaceUri)
  fullName: getByNamespace(namespaceUri)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"78f3b-112\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78f3b-112\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
    parameters:
    - id: namespaceUri
      description: <span data-ttu-id="78f3b-113">Este valor deve ser um URI; totalmente qualificado do esquema Por exemplo, "http://schemas.contoso.com/review/1.0".</span><span class="sxs-lookup"><span data-stu-id="78f3b-113">This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartCollection.getCount
  summary: >-
    <span data-ttu-id="78f3b-114">Obtém o número de partes CustomXml na coleção.</span><span class="sxs-lookup"><span data-stu-id="78f3b-114">Gets the number of CustomXml parts in the collection.</span></span>


    <span data-ttu-id="78f3b-115">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="78f3b-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.CustomXmlPartCollection.getItem
  summary: >-
    <span data-ttu-id="78f3b-116">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="78f3b-116">Gets a custom XML part based on its ID.</span></span>


    <span data-ttu-id="78f3b-117">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="78f3b-117">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"78f3b-118\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78f3b-118\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n\n        // The setXml method does a whole-for-whole replacement \n        // of the entire XML.\n        customXmlPart.setXml(\"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>\");\n        const xmlBlob = customXmlPart.getXml();\n        await context.sync();\n\n        const readableXml = addLineBreaksToXML(xmlBlob.value);\n        $(\"#display-xml\").text(readableXml);\n        await context.sync();\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="78f3b-119">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="78f3b-119">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="78f3b-120">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="78f3b-120">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="78f3b-121">Se o CustomXmlPart não existir, a propriedade isNull de retorno do objeto será true.</span><span class="sxs-lookup"><span data-stu-id="78f3b-121">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>


    <span data-ttu-id="78f3b-122">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="78f3b-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
    parameters:
    - id: id
      description: <span data-ttu-id="78f3b-123">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="78f3b-123">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartCollection.items
  summary: <span data-ttu-id="78f3b-124">Obtém o filho carregado itens nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="78f3b-124">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.CustomXmlPart[];'
    return:
      type:
      - Excel.CustomXmlPart[]
- uid: excel.Excel.CustomXmlPartCollection.load
  summary: <span data-ttu-id="78f3b-125">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="78f3b-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="78f3b-126">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="78f3b-126">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="78f3b-127">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="78f3b-127">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="78f3b-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection`-Onde opção é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="78f3b-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="78f3b-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class="sxs-lookup"><span data-stu-id="78f3b-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="78f3b-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection`-Só está disponível em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="78f3b-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection` - Only available on collection types.</span></span> <span data-ttu-id="78f3b-131">Ele é semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="78f3b-131">It is similar to the preceding signature.</span></span> <span data-ttu-id="78f3b-132">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class="sxs-lookup"><span data-stu-id="78f3b-132">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="78f3b-133">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="78f3b-133">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="78f3b-134">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="78f3b-134">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.CustomXmlPartCollection.load_1
  summary: <span data-ttu-id="78f3b-135">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="78f3b-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="78f3b-136">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="78f3b-136">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartCollection
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="78f3b-137">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="78f3b-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomXmlPartCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.CustomXmlPartCollection.toJSON
  summary: <span data-ttu-id="78f3b-138">Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78f3b-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="78f3b-139">(`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o original `Excel.CustomXmlPartCollection` é um objeto de API, o `toJSON` método retorna um objeto de JavaScript sem formatação (digitado como `Excel.Interfaces.CustomXmlPartCollectionData` <!-- -->) que contém uma matriz de "itens" com superficiais cópias de todas as propriedades de itens da coleção carregadas.</span><span class="sxs-lookup"><span data-stu-id="78f3b-139">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomXmlPartCollectionData
      description: ''
