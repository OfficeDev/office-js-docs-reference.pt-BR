### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartScopedCollection
    summary: |-
      <span data-ttu-id="f4f09-101">Uma coleção com escopo de partes XML personalizadas.</span><span class="sxs-lookup"><span data-stu-id="f4f09-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="f4f09-102">Uma coleção com escopo é o resultado de alguma operação, por exemplo, filtragem por namespace.</span><span class="sxs-lookup"><span data-stu-id="f4f09-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="f4f09-103">Uma coleção com escopo não pode ser mais delimitada.</span><span class="sxs-lookup"><span data-stu-id="f4f09-103">A scoped collection cannot be scoped any further.</span></span>

      <span data-ttu-id="f4f09-104">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f4f09-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.CustomXmlPartScopedCollection.context
      - excel.Excel.CustomXmlPartScopedCollection.getCount
      - excel.Excel.CustomXmlPartScopedCollection.getItem
      - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.items
      - excel.Excel.CustomXmlPartScopedCollection.load
      - excel.Excel.CustomXmlPartScopedCollection.load_1
      - excel.Excel.CustomXmlPartScopedCollection.load_2
      - excel.Excel.CustomXmlPartScopedCollection.toJSON
  - uid: excel.Excel.CustomXmlPartScopedCollection.context
    summary: <span data-ttu-id="f4f09-105">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="f4f09-105">The request context associated with the object.</span></span> <span data-ttu-id="f4f09-106">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="f4f09-106">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.CustomXmlPartScopedCollection.getCount
    summary: |-
      <span data-ttu-id="f4f09-107">Obtém o número de partes CustomXML nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="f4f09-107">Gets the number of CustomXML parts in this collection.</span></span>

      <span data-ttu-id="f4f09-108">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f4f09-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f4f09-109">Exemplos</span><span class="sxs-lookup"><span data-stu-id="f4f09-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItem
    summary: |-
      <span data-ttu-id="f4f09-110">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="f4f09-110">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="f4f09-111">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f4f09-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="f4f09-112">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="f4f09-112">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="f4f09-113">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="f4f09-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="f4f09-114">Se o CustomXmlPart não existir, a propriedade isNull do objeto Return será true.</span><span class="sxs-lookup"><span data-stu-id="f4f09-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="f4f09-115">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f4f09-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f4f09-116">Exemplos</span><span class="sxs-lookup"><span data-stu-id="f4f09-116">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="f4f09-117">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="f4f09-117">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    summary: |-
      <span data-ttu-id="f4f09-118">Se o conjunto contiver exatamente um item, esse método o retornará.</span><span class="sxs-lookup"><span data-stu-id="f4f09-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="f4f09-119">Caso contrário, esse método gera um erro.</span><span class="sxs-lookup"><span data-stu-id="f4f09-119">Otherwise, this method produces an error.</span></span>

      <span data-ttu-id="f4f09-120">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f4f09-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f4f09-121">Exemplos</span><span class="sxs-lookup"><span data-stu-id="f4f09-121">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    summary: |-
      <span data-ttu-id="f4f09-122">Se o conjunto contiver exatamente um item, esse método o retornará.</span><span class="sxs-lookup"><span data-stu-id="f4f09-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="f4f09-123">Caso contrário, esse método retornará NULL.</span><span class="sxs-lookup"><span data-stu-id="f4f09-123">Otherwise, this method returns Null.</span></span>

      <span data-ttu-id="f4f09-124">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f4f09-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.items
    summary: <span data-ttu-id="f4f09-125">Obtém os itens filhos carregados nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="f4f09-125">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load
    summary: <span data-ttu-id="f4f09-126">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="f4f09-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f4f09-127">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="f4f09-127">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="f4f09-128">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="f4f09-128">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="f4f09-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="f4f09-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="f4f09-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="f4f09-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="f4f09-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="f4f09-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="f4f09-132">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="f4f09-132">It is similar to the preceding signature.</span></span> <span data-ttu-id="f4f09-133">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="f4f09-133">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="f4f09-134">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="f4f09-134">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="f4f09-135">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="f4f09-135">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.CustomXmlPartScopedCollection.load_1
    summary: <span data-ttu-id="f4f09-136">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="f4f09-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f4f09-137">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="f4f09-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="f4f09-138">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="f4f09-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
    summary: '<span data-ttu-id="f4f09-139">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="f4f09-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="f4f09-140">.</span><span class="sxs-lookup"><span data-stu-id="f4f09-140"></span></span> <span data-ttu-id="f4f09-141">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="f4f09-141"></span></span><!-- --><span data-ttu-id="f4f09-142">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.CustomXmlPartScopedCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.CustomXmlPartScopedCollectionData`</span><span class="sxs-lookup"><span data-stu-id="f4f09-142">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`</span></span><!-- --><span data-ttu-id="f4f09-143">) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.</span><span class="sxs-lookup"><span data-stu-id="f4f09-143">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
        description: ''