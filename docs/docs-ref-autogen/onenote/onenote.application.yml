### YamlMime:UniversalReference
ms.openlocfilehash: c36a6965d8e1fa929bf48e64acb708a0fb250240
ms.sourcegitcommit: 2dcedf6deec4167dca476a42dad411e28cc92a97
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 01/23/2019
ms.locfileid: "29385277"
items:
- uid: onenote.OneNote.Application
  summary: >-
    <span data-ttu-id="d6bfd-101">Representa o objeto de nível superior que contém todos os objetos do OneNote globalmente endereçados, como blocos de anotações, o bloco de anotações ativo e a sessão ativa.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-101">Represents the top-level object that contains all globally addressable OneNote objects such as notebooks, the active notebook, and the active section.</span></span>


    <span data-ttu-id="d6bfd-102">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: OneNote.Application
  fullName: OneNote.Application
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Application.context
  - onenote.OneNote.Application.getActiveNotebook
  - onenote.OneNote.Application.getActiveNotebookOrNull
  - onenote.OneNote.Application.getActiveOutline
  - onenote.OneNote.Application.getActiveOutlineOrNull
  - onenote.OneNote.Application.getActivePage
  - onenote.OneNote.Application.getActivePageOrNull
  - onenote.OneNote.Application.getActiveParagraph
  - onenote.OneNote.Application.getActiveParagraphOrNull
  - onenote.OneNote.Application.getActiveSection
  - onenote.OneNote.Application.getActiveSectionOrNull
  - onenote.OneNote.Application.getWindowSize
  - onenote.OneNote.Application.insertHtmlAtCurrentPosition
  - onenote.OneNote.Application.isViewingDeletedNotes
  - onenote.OneNote.Application.load
  - onenote.OneNote.Application.navigateToPage
  - onenote.OneNote.Application.navigateToPageWithClientUrl
  - onenote.OneNote.Application.notebooks
  - onenote.OneNote.Application.toJSON
- uid: onenote.OneNote.Application.context
  summary: <span data-ttu-id="d6bfd-103">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-103">The request context associated with the object.</span></span> <span data-ttu-id="d6bfd-104">Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-104">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.Application.getActiveNotebook
  summary: >-
    <span data-ttu-id="d6bfd-p102">Obtém o bloco de anotações ativo, se houver um. Se não houver nenhum bloco de anotações ativo, gera ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p102">Gets the active notebook if one exists. If no notebook is active, throws ItemNotFound.</span></span>


    <span data-ttu-id="d6bfd-107">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveNotebook()
  fullName: getActiveNotebook
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveNotebook(): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-108\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-108\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active notebook.\n    var notebook = context.application.getActiveNotebook();\n            \n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id,name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Notebook name: \" + notebook.name);\n            console.log(\"Notebook ID: \" + notebook.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveNotebookOrNull
  summary: >-
    <span data-ttu-id="d6bfd-p103">Obtém o bloco de anotações ativo, se houver um. Se não houver nenhum bloco de anotações ativo, retorna nulo.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p103">Gets the active notebook if one exists. If no notebook is active, returns null.</span></span>


    <span data-ttu-id="d6bfd-111">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-111">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveNotebookOrNull()
  fullName: getActiveNotebookOrNull
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-112\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-112\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active notebook.\n    var notebook = context.application.getActiveNotebookOrNull();\n\n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id,name');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // check if active notebook is set.\n            if (!notebook.isNull) {\n                console.log(\"Notebook name: \" + notebook.name);\n                console.log(\"Notebook ID: \" + notebook.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveOutline
  summary: >-
    <span data-ttu-id="d6bfd-113">Obtém a estrutura de tópicos ativa, se houver uma. Caso contrário, gera ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-113">Gets the active outline if one exists, If no outline is active, throws ItemNotFound.</span></span>


    <span data-ttu-id="d6bfd-114">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-114">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveOutline()
  fullName: getActiveOutline
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveOutline(): OneNote.Outline;'
    return:
      type:
      - onenote.OneNote.Outline
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-115\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-115\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // get active outline.\n    var outline = context.application.getActiveOutline();\n\n    // Queue a command to load the id of the outline.         \n    outline.load('id');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Show some properties.\n            console.log(\"outline id: \" + outline.id);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveOutlineOrNull
  summary: >-
    <span data-ttu-id="d6bfd-116">Obtém a estrutura de tópicos ativa, se houver uma; caso contrário, retorna nulo.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-116">Gets the active outline if one exists, otherwise returns null.</span></span>


    <span data-ttu-id="d6bfd-117">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-117">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveOutlineOrNull()
  fullName: getActiveOutlineOrNull
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveOutlineOrNull(): OneNote.Outline;'
    return:
      type:
      - onenote.OneNote.Outline
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-118\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-118\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // get active outline.\n    var outline = context.application.getActiveOutlineOrNull();\n\n    // Queue a command to load the id of the outline.         \n    outline.load('id');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            if (!outline.isNull) {\n                console.log(\"outline id: \" + outline.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActivePage
  summary: >-
    <span data-ttu-id="d6bfd-p104">Obtém a página ativa, se houver uma. Se não houver nenhuma página ativa, gera ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p104">Gets the active page if one exists. If no page is active, throws ItemNotFound.</span></span>


    <span data-ttu-id="d6bfd-121">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-121">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActivePage()
  fullName: getActivePage
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActivePage(): OneNote.Page;'
    return:
      type:
      - onenote.OneNote.Page
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-122\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-122\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active page.\n    var page = context.application.getActivePage();\n            \n    // Queue a command to load the page. \n    // For best performance, request specific properties.           \n    page.load('id,title');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Page title: \" + page.title);\n            console.log(\"Page ID: \" + page.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActivePageOrNull
  summary: >-
    <span data-ttu-id="d6bfd-p105">Obtém a página ativa, se houver uma. Se não houver nenhuma página ativa, retorna nulo.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p105">Gets the active page if one exists. If no page is active, returns null.</span></span>


    <span data-ttu-id="d6bfd-125">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-125">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActivePageOrNull()
  fullName: getActivePageOrNull
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActivePageOrNull(): OneNote.Page;'
    return:
      type:
      - onenote.OneNote.Page
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-126\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-126\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active page.\n    var page = context.application.getActivePageOrNull();\n\n    // Queue a command to load the page. \n    // For best performance, request specific properties.           \n    page.load('id,title');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            if (!page.isNull) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Page ID: \" + page.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveParagraph
  summary: >-
    <span data-ttu-id="d6bfd-127">Obtém o parágrafo ativo se houver um, se nenhum parágrafo estiver ativo, lança ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-127">Gets the active Paragraph if one exists, If no Paragraph is active, throws ItemNotFound.</span></span>


    <span data-ttu-id="d6bfd-128">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-128">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveParagraph()
  fullName: getActiveParagraph
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveParagraph(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
- uid: onenote.OneNote.Application.getActiveParagraphOrNull
  summary: >-
    <span data-ttu-id="d6bfd-129">Obtém o parágrafo ativo se houver um, caso contrário, retornará null.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-129">Gets the active Paragraph if one exists, otherwise returns null.</span></span>


    <span data-ttu-id="d6bfd-130">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-130">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveParagraphOrNull()
  fullName: getActiveParagraphOrNull
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveParagraphOrNull(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
- uid: onenote.OneNote.Application.getActiveSection
  summary: >-
    <span data-ttu-id="d6bfd-p106">Obtém a seção ativa, se houver uma. Se não houver nenhuma seção ativa, gera ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p106">Gets the active section if one exists. If no section is active, throws ItemNotFound.</span></span>


    <span data-ttu-id="d6bfd-133">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-133">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveSection()
  fullName: getActiveSection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveSection(): OneNote.Section;'
    return:
      type:
      - onenote.OneNote.Section
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-134\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-134\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active section.\n    var section = context.application.getActiveSection();\n            \n    // Queue a command to load the section. \n    // For best performance, request specific properties.           \n    section.load('id,name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Section name: \" + section.name);\n            console.log(\"Section ID: \" + section.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveSectionOrNull
  summary: >-
    <span data-ttu-id="d6bfd-p107">Obtém a seção ativa, se houver uma. Se não houver nenhuma seção ativa, retorna nulo.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p107">Gets the active section if one exists. If no section is active, returns null.</span></span>


    <span data-ttu-id="d6bfd-137">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-137">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getActiveSectionOrNull()
  fullName: getActiveSectionOrNull
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveSectionOrNull(): OneNote.Section;'
    return:
      type:
      - onenote.OneNote.Section
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-138\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-138\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active section.\n    var section = context.application.getActiveSectionOrNull();\n\n    // Queue a command to load the section. \n    // For best performance, request specific properties.           \n    section.load('id,name');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            if (!section.isNull) {\n                // Show some properties.\n                console.log(\"Section name: \" + section.name);\n                console.log(\"Section ID: \" + section.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getWindowSize
  name: getWindowSize()
  fullName: getWindowSize
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getWindowSize(): OfficeExtension.ClientResult<number[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<number[]>
      description: ''
- uid: onenote.OneNote.Application.insertHtmlAtCurrentPosition
  name: insertHtmlAtCurrentPosition(html)
  fullName: insertHtmlAtCurrentPosition
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtmlAtCurrentPosition(html: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: html
      description: ''
      type:
      - string
- uid: onenote.OneNote.Application.isViewingDeletedNotes
  name: isViewingDeletedNotes()
  fullName: isViewingDeletedNotes
  langs:
  - typeScript
  type: method
  syntax:
    content: 'isViewingDeletedNotes(): OfficeExtension.ClientResult<boolean>;'
    return:
      type:
      - OfficeExtension.ClientResult<boolean>
      description: ''
- uid: onenote.OneNote.Application.load
  summary: <span data-ttu-id="d6bfd-139">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d6bfd-140">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-140">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="d6bfd-141">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="d6bfd-141">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="d6bfd-142">`load(option?: { select?: string; expand?: string; }): OneNote.Application`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-142">`load(option?: { select?: string; expand?: string; }): OneNote.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="d6bfd-143">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application`-Só está disponível em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-143">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application` - Only available on collection types.</span></span> <span data-ttu-id="d6bfd-144">Ele é semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-144">It is similar to the preceding signature.</span></span> <span data-ttu-id="d6bfd-145">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-145">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="d6bfd-146">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-146">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d6bfd-147">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-147">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.Application;'
    return:
      type:
      - OneNote.Application
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="d6bfd-148">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-148">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: onenote.OneNote.Application.navigateToPage
  summary: >-
    <span data-ttu-id="d6bfd-149">Abre a página especificada na instância do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-149">Opens the specified page in the application instance.</span></span>


    <span data-ttu-id="d6bfd-150">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-150">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: navigateToPage(page)
  fullName: navigateToPage
  langs:
  - typeScript
  type: method
  syntax:
    content: 'navigateToPage(page: OneNote.Page): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-151\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-151\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n            \n    // Queue a command to load the pages. \n    // For best performance, request specific properties.           \n    pages.load('id');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // This example loads the first page in the section.\n            var page = pages.items[0];\n                        \n            // Open the page in the application.                    \n            context.application.navigateToPage(page);\n                    \n            // Run the queued command.\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: page
      description: <span data-ttu-id="d6bfd-152">A página a ser aberta.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-152">The page to open.</span></span>
      type:
      - onenote.OneNote.Page
- uid: onenote.OneNote.Application.navigateToPageWithClientUrl
  summary: >-
    <span data-ttu-id="d6bfd-153">Obtém a página especificada e a abre na instância do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-153">Gets the specified page, and opens it in the application instance.</span></span>


    <span data-ttu-id="d6bfd-154">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-154">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: navigateToPageWithClientUrl(url)
  fullName: navigateToPageWithClientUrl
  langs:
  - typeScript
  type: method
  syntax:
    content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
    return:
      type:
      - onenote.OneNote.Page
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d6bfd-155\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6bfd-155\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages. \n    // For best performance, request specific properties.           \n    pages.load('clientUrl');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // This example loads the first page in the section.\n            var page = pages.items[0];\n\n            // Open the page in the application.                    \n            context.application.navigateToPageWithClientUrl(page.clientUrl);\n\n            // Run the queued command.\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: url
      description: <span data-ttu-id="d6bfd-156">A URL do cliente da página a ser aberta.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-156">The client url of the page to open.</span></span>
      type:
      - string
- uid: onenote.OneNote.Application.notebooks
  summary: >-
    <span data-ttu-id="d6bfd-p110">Obtém a coleção de blocos de notas abertos na instância do aplicativo OneNote. No OneNote Online, apenas um bloco de anotações de cada vez é aberto na instância do aplicativo. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-p110">Gets the collection of notebooks that are open in the OneNote application instance. In OneNote Online, only one notebook at a time is open in the application instance. Read-only.</span></span>


    <span data-ttu-id="d6bfd-160">\[[Conjunto de APIs: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d6bfd-160">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: notebooks
  fullName: notebooks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly notebooks: OneNote.NotebookCollection;'
    return:
      type:
      - onenote.OneNote.NotebookCollection
- uid: onenote.OneNote.Application.toJSON
  summary: <span data-ttu-id="d6bfd-161">Substitui o JavaScript `toJSON()` método para fornecer a saída mais úteis quando um objeto API é passado para `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-161">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="d6bfd-162">(`JSON.stringify`<!-- -->, em seguida, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto OneNote.Application original é um objeto de API, o `toJSON` método retorna um objeto de JavaScript simples (digitado como `OneNote.Interfaces.ApplicationData` <!-- -->) que contém superficiais cópias de todas as propriedades do objeto original filho carregado.</span><span class="sxs-lookup"><span data-stu-id="d6bfd-162">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original OneNote.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ApplicationData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ApplicationData;'
    return:
      type:
      - OneNote.Interfaces.ApplicationData
      description: ''
