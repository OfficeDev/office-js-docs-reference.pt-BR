### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.SectionGroup
    summary: |-
      Representa um grupo de seção do OneNote. Grupos de seções podem conter seções e outros grupos de seções.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.SectionGroup
    fullName: OneNote.SectionGroup
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.SectionGroup.addSection
      - onenote.OneNote.SectionGroup.addSectionGroup
      - onenote.OneNote.SectionGroup.clientUrl
      - onenote.OneNote.SectionGroup.context
      - onenote.OneNote.SectionGroup.getRestApiId
      - onenote.OneNote.SectionGroup.id
      - onenote.OneNote.SectionGroup.load
      - onenote.OneNote.SectionGroup.load_1
      - onenote.OneNote.SectionGroup.load_2
      - onenote.OneNote.SectionGroup.name
      - onenote.OneNote.SectionGroup.notebook
      - onenote.OneNote.SectionGroup.parentSectionGroup
      - onenote.OneNote.SectionGroup.parentSectionGroupOrNull
      - onenote.OneNote.SectionGroup.sectionGroups
      - onenote.OneNote.SectionGroup.sections
      - onenote.OneNote.SectionGroup.toJSON
      - onenote.OneNote.SectionGroup.track
      - onenote.OneNote.SectionGroup.untrack
  - uid: onenote.OneNote.SectionGroup.addSection
    summary: |-
      Adiciona uma nova seção ao final do grupo de seção.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addSection(title)
    fullName: addSection(title)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSection(title: string): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the section groups that are direct children of the current notebook.
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;
              
              // Queue a command to load the section groups.
              // For best performance, request specific properties.
              sectionGroups.load("id");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      
                      // Add a section to each section group.
                      $.each(sectionGroups.items, function(index, sectionGroup) {
                          sectionGroup.addSection("Agenda");
                      });
                      
                      // Run the queued commands.
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: title
          description: O nome da nova seção.
          type:
            - string
  - uid: onenote.OneNote.SectionGroup.addSectionGroup
    summary: |-
      Adiciona um novo grupo de seção ao final deste sectionGroup.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addSectionGroup(name)
    fullName: addSectionGroup(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {
              var sectionGroup;
              var nestedSectionGroup;

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section group.
              var sectionGroups = notebook.sectionGroups;

              // Queue a command to load the new section group.
              sectionGroups.load();

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function(){
                      sectionGroup = sectionGroups.items[0];
                      sectionGroup.load();
                      return context.sync();
                  })
                  .then(function(){
                      nestedSectionGroup = sectionGroup.addSectionGroup("Sample nested section group");
                      nestedSectionGroup.load();
                      return context.sync();
                  })
                  .then(function() {
                      console.log("New nested section group name is " + nestedSectionGroup.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: O nome da nova seção.
          type:
            - string
  - uid: onenote.OneNote.SectionGroup.clientUrl
    summary: |-
      A URL do cliente do grupo de seções. Somente leitura

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clientUrl
    fullName: clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.SectionGroup.context
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: onenote.OneNote.SectionGroup.getRestApiId
    summary: |-
      Obtém a ID da API REST.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getRestApiId()
    fullName: getRestApiId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: onenote.OneNote.SectionGroup.id
    summary: |-
      Obtém o ID do grupo de seção. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.SectionGroup.load
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
    remarks: |-
      Além dessa assinatura, este método tem as seguintes assinaturas:

      `load(option?: string | string[]): OneNote.SectionGroup`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.

      `load(option?: { select?: string; expand?: string; }): OneNote.SectionGroup`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.SectionGroup`– Disponível somente nos tipos de coleção. É semelhante à assinatura anterior. Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado. Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado. Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.SectionGroupLoadOptions): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - onenote.OneNote.Interfaces.SectionGroupLoadOptions
  - uid: onenote.OneNote.SectionGroup.load_1
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the parent section group that contains the current section.
              var sectionGroup = context.application.getActiveSection().parentSectionGroup;
                      
              // Queue a command to load the section group. 
              // For best performance, request specific properties.           
              sectionGroup.load("id,name");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Write the properties.
                      console.log("Section group name: " + sectionGroup.name);
                      console.log("Section group ID: " + sectionGroup.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the parent section group that contains the current section.
              var sectionGroup = context.application.getActiveSection().parentSectionGroup;
                      
              // Queue a command to load the section group with the specified properties.           
              sectionGroup.load("name,notebook/name"); 
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Write the properties.
                      console.log("Section group name: " + sectionGroup.name);
                      console.log("Parent notebook name: " + sectionGroup.notebook.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the section groups that are direct children of the current notebook.
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;

              // Queue a command to load the section groups.
              // For best performance, request specific properties.
              sectionGroups.load("name");
              
              // Get the child section groups of the first section group in the notebook.
              var nestedSectionGroups = sectionGroups._GetItem(0).sectionGroups;
              
              // Queue a command to load the ID and name properties of the child section groups.
              nestedSectionGroups.load("id,name");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      
                      // Write the properties for each child section group.
                      $.each(nestedSectionGroups.items, function(index, sectionGroup) {
                          console.log("Section group name: " + sectionGroup.name);  
                          console.log("Section group ID: " + sectionGroup.id);  
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the sections that are siblings of the current section.
              var sections = context.application.getActiveSection().parentSectionGroup.sections;

              // Queue a command to load the section groups.
              // For best performance, request specific properties.
              sections.load("id,name");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      
                      // Write the properties for each section.
                      $.each(sections.items, function(index, section) {
                          console.log("Section name: " + section.name);  
                          console.log("Section ID: " + section.id);  
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.SectionGroup.load_2
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: onenote.OneNote.SectionGroup.name
    summary: |-
      Obtém o nome do grupo da seção. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.SectionGroup.notebook
    summary: |-
      Obtém o bloco de anotações que contém o grupo da seção. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: notebook
    fullName: notebook
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly notebook: OneNote.Notebook;'
      return:
        type:
          - onenote.OneNote.Notebook
  - uid: onenote.OneNote.SectionGroup.parentSectionGroup
    summary: |-
      Obtém o grupo de seções que contém o grupo de seções. Retorna ItemNotFound se o grupo da seção é um filho direto do bloco de anotações. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentSectionGroup
    fullName: parentSectionGroup
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroup: OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.SectionGroup.parentSectionGroupOrNull
    summary: |-
      Obtém o grupo da seção que contém o grupo da seção. Retorna nulo se a seção de grupo for um filho direto do bloco de anotações. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentSectionGroupOrNull
    fullName: parentSectionGroupOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroupOrNull: OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.SectionGroup.sectionGroups
    summary: |-
      O conjunto de grupos de seção no grupo da seção. Somente leitura

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: sectionGroups
    fullName: sectionGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
      return:
        type:
          - onenote.OneNote.SectionGroupCollection
  - uid: onenote.OneNote.SectionGroup.sections
    summary: |-
      O conjunto de seções no grupo da seção. Somente leitura

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: sections
    fullName: sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: OneNote.SectionCollection;'
      return:
        type:
          - onenote.OneNote.SectionCollection
  - uid: onenote.OneNote.SectionGroup.toJSON
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto OneNote original. Section é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`OneNote.Interfaces.SectionGroupData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.SectionGroupData;'
      return:
        type:
          - onenote.OneNote.Interfaces.SectionGroupData
        description: ''
  - uid: onenote.OneNote.SectionGroup.track
    summary: 'Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação de context.trackedObjects.add(thisObject). Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''
  - uid: onenote.OneNote.SectionGroup.untrack
    summary: 'Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject). Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''