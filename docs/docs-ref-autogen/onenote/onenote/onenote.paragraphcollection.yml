### YamlMime:TSType
name: OneNote.ParagraphCollection
uid: onenote!OneNote.ParagraphCollection:class
package: onenote!
fullName: OneNote.ParagraphCollection
summary: >-
  Representa um conjunto de objetos Paragraph.


  \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: onenote!OneNote.ParagraphCollection#context:member
  package: onenote!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="onenote!OneNote.RequestContext:class" />
- name: count
  uid: onenote!OneNote.ParagraphCollection#count:member
  package: onenote!
  fullName: count
  summary: >-
    Retorna a quantidade de parágrafos na página. Somente leitura.


    \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: onenote!OneNote.ParagraphCollection#items:member
  package: onenote!
  fullName: items
  summary: Obtém os itens filhos carregados nesta coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: OneNote.Paragraph[];'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />[]
methods:
- name: getItem(index)
  uid: onenote!OneNote.ParagraphCollection#getItem:member(1)
  package: onenote!
  fullName: getItem(index)
  summary: >-
    Obtém um objeto Paragraph pela ID ou pelo índice na coleção. Somente leitura.


    \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(index: number | string): OneNote.Paragraph;'
    parameters:
    - id: index
      description: A ID do objeto Paragraph ou o local do índice do objeto Paragraph na coleção.
      type: number | string
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
- name: getItemAt(index)
  uid: onenote!OneNote.ParagraphCollection#getItemAt:member(1)
  package: onenote!
  fullName: getItemAt(index)
  summary: >-
    Obtém um parágrafo na posição dele na coleção.


    \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): OneNote.Paragraph;'
    parameters:
    - id: index
      description: Valor de índice do objeto a ser recuperado. Indexados com zero.
      type: number
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page, and then get its Outline's first paragraph.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the type and richText.text property of this paragraph.\n    firstParagraph.load(\"id,type\");\n\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            // Write text from paragraph to console\n            console.log(\n                \"First Paragraph found with id : \" + \n                firstParagraph.id + \" and type \" + firstParagraph.type);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
- name: load(option)
  uid: onenote!OneNote.ParagraphCollection#load:member(1)
  package: onenote!
  fullName: load(option)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, este método tem as seguintes assinaturas:


    `load(option?: string | string[]): OneNote.ParagraphCollection` -Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.


    `load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection` -Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection` – Disponível somente nos tipos de coleção. É semelhante à assinatura anterior. Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado. Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado. Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="onenote!OneNote.Interfaces.ParagraphCollectionLoadOptions:interface" /> & <xref uid="onenote!OneNote.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: onenote!OneNote.ParagraphCollection#load:member(2)
  package: onenote!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
      type: string | string[]
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page, and then get its Outline's first paragraph.\n    var pageContent = pageContents.getItem(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    \n    // Queue a command to load the id and type of each paragraph.\n    paragraphs.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            var firstParagraph = paragraphs.items[0];\n            // Write text from first paragraph to console\n            console.log(\n                \"First Paragraph found with id : \" + \n                firstParagraph.id + \" and type \" + firstParagraph.type);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page, and then get its outline's paragraphs.\n    var outlinePageContents = ;\n    var paragraphs = ;\n    var richTextParagraphs = ;\n    // Queue a command to load the id and type of each page content in the outline.\n    pageContents.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            // Load all page contents of type Outline\n            $.each(pageContents.items, function(index, pageContent) {\n                if(pageContent.type == 'Outline')\n                {\n                    pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');\n                    outlinePageContents.push(pageContent);\n                }\n            });\n            return context.sync();\n        })\n        .then(function () {\n            // Load all rich text paragraphs across outlines\n            $.each(outlinePageContents, function(index, outlinePageContent) {\n                var outline = outlinePageContent.outline;\n                paragraphs = paragraphs.concat(outline.paragraphs.items);\n            });\n            $.each(paragraphs, function(index, paragraph) {\n                if(paragraph.type == 'RichText')\n                {\n                    richTextParagraphs.push(paragraph);\n                    paragraph.load(\"id,richText/text\");\n                }\n            });\n            return context.sync();\n        })\n        .then(function () {\n            // Display all rich text paragraphs to the console\n            $.each(richTextParagraphs, function(index, richTextParagraph) {\n                var richText = richTextParagraph.richText;\n                console.log(\n                    \"Paragraph found with richtext content : \" + \n                    richText.text + \" and richtext id : \" + richText.id);\n            });\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(option)
  uid: onenote!OneNote.ParagraphCollection#load:member(3)
  package: onenote!
  fullName: load(option)
  summary: ''
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
      description: ''
- name: toJSON()
  uid: onenote!OneNote.ParagraphCollection#toJSON:member(1)
  package: onenote!
  fullName: toJSON()
  summary: Substitui o `toJSON()` método JavaScript para fornecer uma saída mais útil quando um objeto API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o `OneNote.ParagraphCollection` objeto original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como `OneNote.Interfaces.ParagraphCollectionData`<!-- -->) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
    return:
      type: <xref uid="onenote!OneNote.Interfaces.ParagraphCollectionData:interface" />
      description: ''
- name: track()
  uid: onenote!OneNote.ParagraphCollection#track:member(1)
  package: onenote!
  fullName: track()
  summary: Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação de context.trackedObjects.add(thisObject). Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): OneNote.ParagraphCollection;'
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
      description: ''
- name: untrack()
  uid: onenote!OneNote.ParagraphCollection#untrack:member(1)
  package: onenote!
  fullName: untrack()
  summary: Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject). Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): OneNote.ParagraphCollection;'
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 5d1f6c247af7c0cbe5456b208d8af7f06a680f50
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49136656"
