### YamlMime:TSType
name: OneNote.Paragraph
uid: onenote!OneNote.Paragraph:class
package: onenote!
fullName: OneNote.Paragraph
summary: >-
  Um contêiner para o conteúdo visível em uma página. Um parágrafo pode conter qualquer tipo de ParagraphType de conteúdo.


  \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: onenote!OneNote.Paragraph#context:member
  package: onenote!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do complemento ao processo do aplicativo host do Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="onenote!OneNote.RequestContext:class" />
- name: id
  uid: onenote!OneNote.Paragraph#id:member
  package: onenote!
  fullName: id
  summary: >-
    Obtém a ID do objeto Paragraph. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: image
  uid: onenote!OneNote.Paragraph#image:member
  package: onenote!
  fullName: image
  summary: >-
    Obtém o objeto Image em Paragraph. Gerará uma exceção se ParagraphType não for uma imagem. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly image: OneNote.Image;'
    return:
      type: <xref uid="onenote!OneNote.Image:class" />
- name: inkWords
  uid: onenote!OneNote.Paragraph#inkWords:member
  package: onenote!
  fullName: inkWords
  summary: >-
    Obtém a coleção de tinta no Paragraph. Gerará uma exceção se ParagraphType não for um Ink. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly inkWords: OneNote.InkWordCollection;'
    return:
      type: <xref uid="onenote!OneNote.InkWordCollection:class" />
- name: outline
  uid: onenote!OneNote.Paragraph#outline:member
  package: onenote!
  fullName: outline
  summary: >-
    Obtém o objeto Outline que contém Paragraph. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly outline: OneNote.Outline;'
    return:
      type: <xref uid="onenote!OneNote.Outline:class" />
- name: paragraphs
  uid: onenote!OneNote.Paragraph#paragraphs:member
  package: onenote!
  fullName: paragraphs
  summary: >-
    A coleção de parágrafos sob este parágrafo. Somente leitura


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly paragraphs: OneNote.ParagraphCollection;'
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
- name: parentParagraph
  uid: onenote!OneNote.Paragraph#parentParagraph:member
  package: onenote!
  fullName: parentParagraph
  summary: >-
    Obtém o objeto do parágrafo pai. Gerará se um parágrafo pai não existir. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentParagraph: OneNote.Paragraph;'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
- name: parentParagraphOrNull
  uid: onenote!OneNote.Paragraph#parentParagraphOrNull:member
  package: onenote!
  fullName: parentParagraphOrNull
  summary: >-
    Obtém o objeto do parágrafo pai. Retorna nulo se não existir um parágrafo pai. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
- name: parentTableCell
  uid: onenote!OneNote.Paragraph#parentTableCell:member
  package: onenote!
  fullName: parentTableCell
  summary: >-
    Obtém o objeto TableCell que contém o Paragraph se houver. Se o pai não for uma TableCell, gerará ItemNotFound. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTableCell: OneNote.TableCell;'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
- name: parentTableCellOrNull
  uid: onenote!OneNote.Paragraph#parentTableCellOrNull:member
  package: onenote!
  fullName: parentTableCellOrNull
  summary: >-
    Obtém o objeto TableCell que contém o Paragraph se houver. Se o pai não for uma TableCell, retornará nulo. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
- name: richText
  uid: onenote!OneNote.Paragraph#richText:member
  package: onenote!
  fullName: richText
  summary: >-
    Obtém o objeto RichText em Paragraph. Gerará uma exceção se ParagraphType não for um RichText. Somente leitura


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly richText: OneNote.RichText;'
    return:
      type: <xref uid="onenote!OneNote.RichText:class" />
- name: table
  uid: onenote!OneNote.Paragraph#table:member
  package: onenote!
  fullName: table
  summary: >-
    Obtém o objeto Table em Paragraph. Gerará uma exceção se ParagraphType não for um Table. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly table: OneNote.Table;'
    return:
      type: <xref uid="onenote!OneNote.Table:class" />
- name: type
  uid: onenote!OneNote.Paragraph#type:member
  package: onenote!
  fullName: type
  summary: >-
    Obtém o tipo do objeto Paragraph. Somente leitura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other";'
    return:
      type: <xref uid="onenote!OneNote.ParagraphType:enum" /> | "RichText" | "Image" | "Table" | "Ink" | "Other"
methods:
- name: addNoteTag(type, status)
  uid: onenote!OneNote.Paragraph#addNoteTag:member(1)
  package: onenote!
  fullName: addNoteTag(type, status)
  summary: >-
    Adicione NoteTag ao parágrafo.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus): OneNote.NoteTag;'
    parameters:
    - id: type
      description: O tipo do NoteTag.
      type: <xref uid="onenote!OneNote.NoteTagType:enum" />
    - id: status
      description: O status da NoteTag.
      type: <xref uid="onenote!OneNote.NoteTagStatus:enum" />
    return:
      type: <xref uid="onenote!OneNote.NoteTag:class" />
      description: ''
- name: addNoteTag(typeString, status)
  uid: onenote!OneNote.Paragraph#addNoteTag:member(2)
  package: onenote!
  fullName: addNoteTag(typeString, status)
  summary: >-
    Adicione NoteTag ao parágrafo.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addNoteTag(typeString: "Unknown" | "ToDo" | "Important" | "Question" | "Contact" | "Address" | "PhoneNumber" | "Website" | "Idea" | "Critical" | "ToDoPriority1" | "ToDoPriority2", status: "Unknown" | "Normal" | "Completed" | "Disabled" | "OutlookTask" | "TaskNotSyncedYet" | "TaskRemoved"): OneNote.NoteTag;'
    parameters:
    - id: typeString
      description: O tipo do NoteTag.
      type: "\"Unknown\" | \"ToDo\" | \"Important\" | \"Question\" | \"Contact\" | \"Address\" | \"PhoneNumber\" | \"Website\" | \"Idea\" | \"Critical\" | \"ToDoPriority1\" | \"ToDoPriority2\""
    - id: status
      description: O status da NoteTag.
      type: "\"Unknown\" | \"Normal\" | \"Completed\" | \"Disabled\" | \"OutlookTask\" | \"TaskNotSyncedYet\" | \"TaskRemoved\""
    return:
      type: <xref uid="onenote!OneNote.NoteTag:class" />
      description: ''
- name: delete()
  uid: onenote!OneNote.Paragraph#delete:member(1)
  package: onenote!
  fullName: delete()
  summary: >-
    Exclui o parágrafo


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    \n    var paragraphs = pageContent.outline.paragraphs;\n    \n    var firstParagraph = paragraphs.getItemAt(0);\n    \n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            // Queue a command to delete the first paragraph                 \n            firstParagraph.delete();\n            \n            // Run the command to delete it\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getParagraphInfo()
  uid: onenote!OneNote.Paragraph#getParagraphInfo:member(1)
  package: onenote!
  fullName: getParagraphInfo()
  summary: >-
    Obter informações de lista do parágrafo


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="onenote!OneNote.ParagraphInfo:interface" />&gt;
      description: ''
- name: insertHtmlAsSibling(insertLocation, html)
  uid: onenote!OneNote.Paragraph#insertHtmlAsSibling:member(1)
  package: onenote!
  fullName: insertHtmlAsSibling(insertLocation, html)
  summary: >-
    Insere o conteúdo HTML especificado


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html: string): void;'
    parameters:
    - id: insertLocation
      description: O local de novos conteúdos em relação ao Parágrafo atual.
      type: <xref uid="onenote!OneNote.InsertLocation:enum" />
    - id: html
      description: Uma cadeia de caracteres HTML que descreve a apresentação visual do conteúdo. Consulte [HTML com suporte](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) para a API JavaScript de complementos do OneNote.
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertHtmlAsSibling(\"Before\", \"<p>ContentBeforeFirstParagraph</p>\");\n            firstParagraph.insertHtmlAsSibling(\"After\", \"<p>ContentAfterFirstParagraph</p>\");\n            \n            // Run the command to run inserts\n            return context.sync();\n        });\n))\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertHtmlAsSibling(insertLocationString, html)
  uid: onenote!OneNote.Paragraph#insertHtmlAsSibling:member(2)
  package: onenote!
  fullName: insertHtmlAsSibling(insertLocationString, html)
  summary: >-
    Insere o conteúdo HTML especificado


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtmlAsSibling(insertLocationString: "Before" | "After", html: string): void;'
    parameters:
    - id: insertLocationString
      description: O local de novos conteúdos em relação ao Parágrafo atual.
      type: "\"Before\" | \"After\""
    - id: html
      description: Uma cadeia de caracteres HTML que descreve a apresentação visual do conteúdo. Consulte [HTML com suporte](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) para a API JavaScript de complementos do OneNote.
      type: string
    return:
      type: void
      description: ''
- name: insertImageAsSibling(insertLocation, base64EncodedImage, width, height)
  uid: onenote!OneNote.Paragraph#insertImageAsSibling:member(1)
  package: onenote!
  fullName: insertImageAsSibling(insertLocation, base64EncodedImage, width, height)
  summary: >-
    Insere a imagem no local especificado.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertImageAsSibling(insertLocation: OneNote.InsertLocation, base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    parameters:
    - id: insertLocation
      description: O local da tabela em relação ao Paragraph atual.
      type: <xref uid="onenote!OneNote.InsertLocation:enum" />
    - id: base64EncodedImage
      description: Cadeia de caracteres HTML para acrescentar.
      type: string
    - id: width
      description: Opcional. Largura na unidade de pontos. O valor padrão é nulo, e será respeitada a largura da imagem.
      type: number
    - id: height
      description: Opcional. Altura na unidade de pontos. O valor padrão é nulo, e será respeitada a altura da imagem.
      type: number
    return:
      type: <xref uid="onenote!OneNote.Image:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertImageAsSibling(\"Before\", \"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==\");\n            firstParagraph.insertImageAsSibling(\"After\", \"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==\");\n            \n            // Run the command to insert images\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertImageAsSibling(insertLocationString, base64EncodedImage, width, height)
  uid: onenote!OneNote.Paragraph#insertImageAsSibling:member(2)
  package: onenote!
  fullName: insertImageAsSibling(insertLocationString, base64EncodedImage, width, height)
  summary: >-
    Insere a imagem no local especificado.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertImageAsSibling(insertLocationString: "Before" | "After", base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    parameters:
    - id: insertLocationString
      description: O local da tabela em relação ao Paragraph atual.
      type: "\"Before\" | \"After\""
    - id: base64EncodedImage
      description: Cadeia de caracteres HTML para acrescentar.
      type: string
    - id: width
      description: Opcional. Largura na unidade de pontos. O valor padrão é nulo, e será respeitada a largura da imagem.
      type: number
    - id: height
      description: Opcional. Altura na unidade de pontos. O valor padrão é nulo, e será respeitada a altura da imagem.
      type: number
    return:
      type: <xref uid="onenote!OneNote.Image:class" />
      description: ''
- name: insertRichTextAsSibling(insertLocation, paragraphText)
  uid: onenote!OneNote.Paragraph#insertRichTextAsSibling:member(1)
  package: onenote!
  fullName: insertRichTextAsSibling(insertLocation, paragraphText)
  summary: >-
    Insere o texto do parágrafo no local especificado.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertRichTextAsSibling(insertLocation: OneNote.InsertLocation, paragraphText: string): OneNote.RichText;'
    parameters:
    - id: insertLocation
      description: O local da tabela em relação ao Paragraph atual.
      type: <xref uid="onenote!OneNote.InsertLocation:enum" />
    - id: paragraphText
      description: Cadeia de caracteres HTML para acrescentar.
      type: string
    return:
      type: <xref uid="onenote!OneNote.RichText:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertRichTextAsSibling(\"Before\", \"Text Appears Before Paragraph\");\n            firstParagraph.insertRichTextAsSibling(\"After\", \"Text Appears After Paragraph\");\n            \n            // Run the command to insert text contents\n            return context.sync();\n        });\n})    \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
- name: insertRichTextAsSibling(insertLocationString, paragraphText)
  uid: onenote!OneNote.Paragraph#insertRichTextAsSibling:member(2)
  package: onenote!
  fullName: insertRichTextAsSibling(insertLocationString, paragraphText)
  summary: >-
    Insere o texto do parágrafo no local especificado.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertRichTextAsSibling(insertLocationString: "Before" | "After", paragraphText: string): OneNote.RichText;'
    parameters:
    - id: insertLocationString
      description: O local da tabela em relação ao Paragraph atual.
      type: "\"Before\" | \"After\""
    - id: paragraphText
      description: Cadeia de caracteres HTML para acrescentar.
      type: string
    return:
      type: <xref uid="onenote!OneNote.RichText:class" />
      description: ''
- name: insertTableAsSibling(insertLocation, rowCount, columnCount, values)
  uid: onenote!OneNote.Paragraph#insertTableAsSibling:member(1)
  package: onenote!
  fullName: insertTableAsSibling(insertLocation, rowCount, columnCount, values)
  summary: >-
    Adiciona uma tabela com a quantidade especificada de linhas e colunas antes ou depois do parágrafo atual.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    parameters:
    - id: insertLocation
      description: O local da tabela em relação ao Paragraph atual.
      type: <xref uid="onenote!OneNote.InsertLocation:enum" />
    - id: rowCount
      description: O número de linhas na tabela.
      type: number
    - id: columnCount
      description: O número de colunas na tabela.
      type: number
    - id: values
      description: Matriz 2D opcional. As células serão preenchidas se as cadeias de caracteres correspondentes estiverem especificadas na matriz.
      type: string[][]
    return:
      type: <xref uid="onenote!OneNote.Table:class" />
      description: ''
- name: insertTableAsSibling(insertLocationString, rowCount, columnCount, values)
  uid: onenote!OneNote.Paragraph#insertTableAsSibling:member(2)
  package: onenote!
  fullName: insertTableAsSibling(insertLocationString, rowCount, columnCount, values)
  summary: >-
    Adiciona uma tabela com a quantidade especificada de linhas e colunas antes ou depois do parágrafo atual.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertTableAsSibling(insertLocationString: "Before" | "After", rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    parameters:
    - id: insertLocationString
      description: O local da tabela em relação ao Paragraph atual.
      type: "\"Before\" | \"After\""
    - id: rowCount
      description: O número de linhas na tabela.
      type: number
    - id: columnCount
      description: O número de colunas na tabela.
      type: number
    - id: values
      description: Matriz 2D opcional. As células serão preenchidas se as cadeias de caracteres correspondentes estiverem especificadas na matriz.
      type: string[][]
    return:
      type: <xref uid="onenote!OneNote.Table:class" />
      description: ''
- name: load(option)
  uid: onenote!OneNote.Paragraph#load:member(1)
  package: onenote!
  fullName: load(option)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, este método tem as seguintes assinaturas:


    `load(option?: string | string[]): OneNote.Paragraph` - Onde a opção é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a ser carregadas.


    `load(option?: { select?: string; expand?: string; }): OneNote.Paragraph` - Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a ser carregadas.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Paragraph` - Disponível somente em tipos de coleção. É semelhante à assinatura anterior. Option.top especifica o número máximo de itens de coleção que podem ser incluídos no resultado. Option.skip especifica o número de itens que devem ser ignorados e não incluídos no resultado. Se option.top for especificado, o conjunto de resultados começará depois de ignorar o número especificado de itens.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OneNote.Interfaces.ParagraphLoadOptions): OneNote.Paragraph;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="onenote!OneNote.Interfaces.ParagraphLoadOptions:interface" />
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
- name: load(propertyNames)
  uid: onenote!OneNote.Paragraph#load:member(2)
  package: onenote!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.Paragraph;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgulas ou uma matriz de cadeias de caracteres que especificam as propriedades a ser carregadas.
      type: string | string[]
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n    \n    // Queue a command to load the outline property of each pageContent.\n    pageContents.load(\"outline\");\n        \n    // Get the first PageContent on the page, and then get its Outline.\n    var pageContent = pageContents._GetItem(0);\n    var paragraphs = pageContent.outline.paragraphs;\n            \n    // Queue a command to load the id and type of each paragraph.\n    paragraphs.load(\"id,type\");\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            // Write the text.                  \n            $.each(paragraphs.items, function(index, paragraph) {\n                console.log(\"Paragraph type: \" + paragraph.type);\n                console.log(\"Paragraph ID: \" + paragraph.id);\n            });\n        });\n})        \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```\n```javascript\nOneNote.run(function(context) {\n    var app = context.application;\n    \n    // Gets the active outline\n    var outline = app.getActiveOutline();\n    \n    // load nested paragraphs and their types.\n    outline.load(\"paragraphs/type\");\n    \n    return context.sync().then(function () {\n        var paragraphs = outline.paragraphs.items;\n        \n        var promise;\n        // for each nested paragraphs, load tables only\n        for (var i = 0; i < paragraphs.length; i++) {\n            var paragraph = paragraphs[i];\n            if (paragraph.type == \"Table\") {\n                paragraph.load(\"table/id\");\n                promise =  context.sync().then(function() {\n                    console.log(paragraph.table.id);\n                });\n            }\n        }\n        return promise;\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(option)
  uid: onenote!OneNote.Paragraph#load:member(3)
  package: onenote!
  fullName: load(option)
  summary: ''
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(option?: {
                  select?: string;
                  expand?: string;
              }): OneNote.Paragraph;
    parameters:
    - id: option
      description: ''
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
- name: set(properties, options)
  uid: onenote!OneNote.Paragraph#set:member(1)
  package: onenote!
  fullName: set(properties, options)
  summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
  remarks: >-
    Este método tem a seguinte assinatura adicional:


    `set(properties: OneNote.Paragraph): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Um objeto JavaScript com propriedades estruturadas isomorficamente para as propriedades do objeto no qual o método é chamado.
      type: <xref uid="onenote!OneNote.Interfaces.ParagraphUpdateData:interface" />
    - id: options
      description: Fornece uma opção para suprimir erros se o objeto properties tentar definir qualquer propriedade somente leitura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: onenote!OneNote.Paragraph#set:member(2)
  package: onenote!
  fullName: set(properties)
  summary: Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: OneNote.Paragraph): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="onenote!OneNote.Paragraph:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: onenote!OneNote.Paragraph#toJSON:member(1)
  package: onenote!
  fullName: toJSON()
  summary: Substitui o método JavaScript `toJSON()` para fornecer uma saída mais útil quando um objeto API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado a ele.) Enquanto o objeto Original do OneNote.Paragraph é um objeto API, o método retorna um `toJSON` objeto JavaScript simples (digitado como `OneNote.Interfaces.ParagraphData`<!-- -->) que contém cópias rasas de quaisquer propriedades filho carregadas do objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
    return:
      type: <xref uid="onenote!OneNote.Interfaces.ParagraphData:interface" />
      description: ''
- name: track()
  uid: onenote!OneNote.Paragraph#track:member(1)
  package: onenote!
  fullName: track()
  summary: Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação de context.trackedObjects.add(thisObject). Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): OneNote.Paragraph;'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
- name: untrack()
  uid: onenote!OneNote.Paragraph#untrack:member(1)
  package: onenote!
  fullName: untrack()
  summary: Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject). Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): OneNote.Paragraph;'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 4b94e238114adf1df9fc6f5f84664963d891f08b
  ms.sourcegitcommit: 276e655472f82435a4b1227fbbb2feb687b659c0
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 03/08/2021
  ms.locfileid: "50537992"
