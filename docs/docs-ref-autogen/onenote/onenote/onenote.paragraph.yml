### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Paragraph:class'
    summary: |-
      Um contêiner para o conteúdo visível em uma página. Um parágrafo pode conter qualquer tipo de ParagraphType de conteúdo.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Paragraph
    fullName: OneNote.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Paragraph#addNoteTag:member(1)'
      - 'onenote!OneNote.Paragraph#addNoteTag:member(2)'
      - 'onenote!OneNote.Paragraph#context:member'
      - 'onenote!OneNote.Paragraph#delete:member(1)'
      - 'onenote!OneNote.Paragraph#getParagraphInfo:member(1)'
      - 'onenote!OneNote.Paragraph#id:member'
      - 'onenote!OneNote.Paragraph#image:member'
      - 'onenote!OneNote.Paragraph#inkWords:member'
      - 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(1)'
      - 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(2)'
      - 'onenote!OneNote.Paragraph#insertImageAsSibling:member(1)'
      - 'onenote!OneNote.Paragraph#insertImageAsSibling:member(2)'
      - 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(1)'
      - 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(2)'
      - 'onenote!OneNote.Paragraph#insertTableAsSibling:member(1)'
      - 'onenote!OneNote.Paragraph#insertTableAsSibling:member(2)'
      - 'onenote!OneNote.Paragraph#load:member(1)'
      - 'onenote!OneNote.Paragraph#load:member(2)'
      - 'onenote!OneNote.Paragraph#load:member(3)'
      - 'onenote!OneNote.Paragraph#outline:member'
      - 'onenote!OneNote.Paragraph#paragraphs:member'
      - 'onenote!OneNote.Paragraph#parentParagraph:member'
      - 'onenote!OneNote.Paragraph#parentParagraphOrNull:member'
      - 'onenote!OneNote.Paragraph#parentTableCell:member'
      - 'onenote!OneNote.Paragraph#parentTableCellOrNull:member'
      - 'onenote!OneNote.Paragraph#richText:member'
      - 'onenote!OneNote.Paragraph#set:member(1)'
      - 'onenote!OneNote.Paragraph#set:member(2)'
      - 'onenote!OneNote.Paragraph#table:member'
      - 'onenote!OneNote.Paragraph#toJSON:member(1)'
      - 'onenote!OneNote.Paragraph#track:member(1)'
      - 'onenote!OneNote.Paragraph#type:member'
      - 'onenote!OneNote.Paragraph#untrack:member(1)'
  - uid: 'onenote!OneNote.Paragraph#addNoteTag:member(1)'
    summary: |-
      Adicione o não eTag ao parágrafo.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'addNoteTag(type, status)'
    fullName: 'addNoteTag(type, status)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus): OneNote.NoteTag;'
      return:
        type:
          - 'onenote!OneNote.NoteTag:class'
        description: ''
      parameters:
        - id: type
          description: O tipo de não eTag.
          type:
            - 'onenote!OneNote.NoteTagType:enum'
        - id: status
          description: O status de não eTag.
          type:
            - 'onenote!OneNote.NoteTagStatus:enum'
  - uid: 'onenote!OneNote.Paragraph#addNoteTag:member(2)'
    summary: |-
      Adicione o não eTag ao parágrafo.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'addNoteTag(typeString, status)'
    fullName: 'addNoteTag(typeString, status)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addNoteTag(typeString: "Unknown" | "ToDo" | "Important" | "Question" | "Contact" | "Address" | "PhoneNumber" | "Website" | "Idea" | "Critical" | "ToDoPriority1" | "ToDoPriority2", status: "Unknown" | "Normal" | "Completed" | "Disabled" | "OutlookTask" | "TaskNotSyncedYet" | "TaskRemoved"): OneNote.NoteTag;'
      return:
        type:
          - 'onenote!OneNote.NoteTag:class'
        description: ''
      parameters:
        - id: typeString
          description: O tipo de não eTag.
          type:
            - '"Unknown" | "ToDo" | "Important" | "Question" | "Contact" | "Address" | "PhoneNumber" | "Website" | "Idea" | "Critical" | "ToDoPriority1" | "ToDoPriority2"'
        - id: status
          description: O status de não eTag.
          type:
            - '"Unknown" | "Normal" | "Completed" | "Disabled" | "OutlookTask" | "TaskNotSyncedYet" | "TaskRemoved"'
  - uid: 'onenote!OneNote.Paragraph#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Paragraph#delete:member(1)'
    summary: |-
      Exclui o parágrafo

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              
              var paragraphs = pageContent.outline.paragraphs;
              
              var firstParagraph = paragraphs.getItemAt(0);
              
              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Queue a command to delete the first paragraph                 
                      firstParagraph.delete();
                      
                      // Run the command to delete it
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Paragraph#getParagraphInfo:member(1)'
    summary: |-
      Obter informações de lista do parágrafo

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getParagraphInfo()
    fullName: getParagraphInfo()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
      return:
        type:
          - 'onenote!OneNote.Paragraph#getParagraphInfo~0:complex'
        description: ''
  - uid: 'onenote!OneNote.Paragraph#id:member'
    summary: |-
      Obtém a ID do objeto Paragraph. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Paragraph#image:member'
    summary: |-
      Obtém o objeto Image em Paragraph. Gerará uma exceção se ParagraphType não for uma imagem. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: image
    fullName: image
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly image: OneNote.Image;'
      return:
        type:
          - 'onenote!OneNote.Image:class'
  - uid: 'onenote!OneNote.Paragraph#inkWords:member'
    summary: |-
      Obtém a coleção de tinta no Paragraph. Gerará uma exceção se ParagraphType não for um Ink. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: inkWords
    fullName: inkWords
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inkWords: OneNote.InkWordCollection;'
      return:
        type:
          - 'onenote!OneNote.InkWordCollection:class'
  - uid: 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(1)'
    summary: |-
      Insere o conteúdo HTML especificado

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertHtmlAsSibling(insertLocation, html)'
    fullName: 'insertHtmlAsSibling(insertLocation, html)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertHtmlAsSibling("Before", "<p>ContentBeforeFirstParagraph</p>");
                      firstParagraph.insertHtmlAsSibling("After", "<p>ContentAfterFirstParagraph</p>");
                      
                      // Run the command to run inserts
                      return context.sync();
                  });
          ))
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: insertLocation
          description: O local de novos conteúdos em relação ao Parágrafo atual.
          type:
            - 'onenote!OneNote.InsertLocation:enum'
        - id: html
          description: 'Uma cadeia de caracteres HTML que descreve a apresentação visual do conteúdo. Confira [HTML compatível](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) para a API JavaScript de suplementos do OneNote.'
          type:
            - string
  - uid: 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(2)'
    summary: |-
      Insere o conteúdo HTML especificado

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertHtmlAsSibling(insertLocationString, html)'
    fullName: 'insertHtmlAsSibling(insertLocationString, html)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtmlAsSibling(insertLocationString: "Before" | "After", html: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: insertLocationString
          description: O local de novos conteúdos em relação ao Parágrafo atual.
          type:
            - '"Before" | "After"'
        - id: html
          description: 'Uma cadeia de caracteres HTML que descreve a apresentação visual do conteúdo. Confira [HTML compatível](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) para a API JavaScript de suplementos do OneNote.'
          type:
            - string
  - uid: 'onenote!OneNote.Paragraph#insertImageAsSibling:member(1)'
    summary: |-
      Insere a imagem no local especificado.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    fullName: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertImageAsSibling(insertLocation: OneNote.InsertLocation, base64EncodedImage: string, width: number, height: number): OneNote.Image;'
      return:
        type:
          - 'onenote!OneNote.Image:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertImageAsSibling("Before", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
                      firstParagraph.insertImageAsSibling("After", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
                      
                      // Run the command to insert images
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: insertLocation
          description: O local da tabela em relação ao Paragraph atual.
          type:
            - 'onenote!OneNote.InsertLocation:enum'
        - id: base64EncodedImage
          description: Cadeia de caracteres HTML para acrescentar.
          type:
            - string
        - id: width
          description: 'Opcional. Largura na unidade de pontos. O valor padrão é nulo, e será respeitada a largura da imagem.'
          type:
            - number
        - id: height
          description: 'Opcional. Altura na unidade de pontos. O valor padrão é nulo, e será respeitada a altura da imagem.'
          type:
            - number
  - uid: 'onenote!OneNote.Paragraph#insertImageAsSibling:member(2)'
    summary: |-
      Insere a imagem no local especificado.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertImageAsSibling(insertLocationString, base64EncodedImage, width, height)'
    fullName: 'insertImageAsSibling(insertLocationString, base64EncodedImage, width, height)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertImageAsSibling(insertLocationString: "Before" | "After", base64EncodedImage: string, width: number, height: number): OneNote.Image;'
      return:
        type:
          - 'onenote!OneNote.Image:class'
        description: ''
      parameters:
        - id: insertLocationString
          description: O local da tabela em relação ao Paragraph atual.
          type:
            - '"Before" | "After"'
        - id: base64EncodedImage
          description: Cadeia de caracteres HTML para acrescentar.
          type:
            - string
        - id: width
          description: 'Opcional. Largura na unidade de pontos. O valor padrão é nulo, e será respeitada a largura da imagem.'
          type:
            - number
        - id: height
          description: 'Opcional. Altura na unidade de pontos. O valor padrão é nulo, e será respeitada a altura da imagem.'
          type:
            - number
  - uid: 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(1)'
    summary: |-
      Insere o texto do parágrafo no local especificado.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    fullName: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRichTextAsSibling(insertLocation: OneNote.InsertLocation, paragraphText: string): OneNote.RichText;'
      return:
        type:
          - 'onenote!OneNote.RichText:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertRichTextAsSibling("Before", "Text Appears Before Paragraph");
                      firstParagraph.insertRichTextAsSibling("After", "Text Appears After Paragraph");
                      
                      // Run the command to insert text contents
                      return context.sync();
                  });
          })    
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: insertLocation
          description: O local da tabela em relação ao Paragraph atual.
          type:
            - 'onenote!OneNote.InsertLocation:enum'
        - id: paragraphText
          description: Cadeia de caracteres HTML para acrescentar.
          type:
            - string
  - uid: 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(2)'
    summary: |-
      Insere o texto do parágrafo no local especificado.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertRichTextAsSibling(insertLocationString, paragraphText)'
    fullName: 'insertRichTextAsSibling(insertLocationString, paragraphText)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRichTextAsSibling(insertLocationString: "Before" | "After", paragraphText: string): OneNote.RichText;'
      return:
        type:
          - 'onenote!OneNote.RichText:class'
        description: ''
      parameters:
        - id: insertLocationString
          description: O local da tabela em relação ao Paragraph atual.
          type:
            - '"Before" | "After"'
        - id: paragraphText
          description: Cadeia de caracteres HTML para acrescentar.
          type:
            - string
  - uid: 'onenote!OneNote.Paragraph#insertTableAsSibling:member(1)'
    summary: |-
      Adiciona uma tabela com a quantidade especificada de linhas e colunas antes ou depois do parágrafo atual.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    fullName: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
      parameters:
        - id: insertLocation
          description: O local da tabela em relação ao Paragraph atual.
          type:
            - 'onenote!OneNote.InsertLocation:enum'
        - id: rowCount
          description: O número de linhas na tabela.
          type:
            - number
        - id: columnCount
          description: O número de colunas na tabela.
          type:
            - number
        - id: values
          description: Matriz 2D opcional. As células serão preenchidas se as cadeias de caracteres correspondentes estiverem especificadas na matriz.
          type:
            - 'string[][]'
  - uid: 'onenote!OneNote.Paragraph#insertTableAsSibling:member(2)'
    summary: |-
      Adiciona uma tabela com a quantidade especificada de linhas e colunas antes ou depois do parágrafo atual.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertTableAsSibling(insertLocationString, rowCount, columnCount, values)'
    fullName: 'insertTableAsSibling(insertLocationString, rowCount, columnCount, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTableAsSibling(insertLocationString: "Before" | "After", rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
      parameters:
        - id: insertLocationString
          description: O local da tabela em relação ao Paragraph atual.
          type:
            - '"Before" | "After"'
        - id: rowCount
          description: O número de linhas na tabela.
          type:
            - number
        - id: columnCount
          description: O número de colunas na tabela.
          type:
            - number
        - id: values
          description: Matriz 2D opcional. As células serão preenchidas se as cadeias de caracteres correspondentes estiverem especificadas na matriz.
          type:
            - 'string[][]'
  - uid: 'onenote!OneNote.Paragraph#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
    remarks: |-
      Além dessa assinatura, este método tem as seguintes assinaturas:

      `load(option?: string | string[]): OneNote.Paragraph`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.

      `load(option?: { select?: string; expand?: string; }): OneNote.Paragraph`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Paragraph`– Disponível somente nos tipos de coleção. É semelhante à assinatura anterior. Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado. Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado. Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ParagraphLoadOptions): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.ParagraphLoadOptions:interface'
  - uid: 'onenote!OneNote.Paragraph#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;
              
              // Queue a command to load the outline property of each pageContent.
              pageContents.load("outline");
                  
              // Get the first PageContent on the page, and then get its Outline.
              var pageContent = pageContents._GetItem(0);
              var paragraphs = pageContent.outline.paragraphs;
                      
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Write the text.                  
                      $.each(paragraphs.items, function(index, paragraph) {
                          console.log("Paragraph type: " + paragraph.type);
                          console.log("Paragraph ID: " + paragraph.id);
                      });
                  });
          })        
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
          ```javascript
          OneNote.run(function(context) {
              var app = context.application;
              
              // Gets the active outline
              var outline = app.getActiveOutline();
              
              // load nested paragraphs and their types.
              outline.load("paragraphs/type");
              
              return context.sync().then(function () {
                  var paragraphs = outline.paragraphs.items;
                  
                  var promise;
                  // for each nested paragraphs, load tables only
                  for (var i = 0; i < paragraphs.length; i++) {
                      var paragraph = paragraphs[i];
                      if (paragraph.type == "Table") {
                          paragraph.load("table/id");
                          promise =  context.sync().then(function() {
                              console.log(paragraph.table.id);
                          });
                      }
                  }
                  return promise;
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Paragraph#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Paragraph#outline:member'
    summary: |-
      Obtém o objeto Outline que contém Paragraph. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: outline
    fullName: outline
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly outline: OneNote.Outline;'
      return:
        type:
          - 'onenote!OneNote.Outline:class'
  - uid: 'onenote!OneNote.Paragraph#paragraphs:member'
    summary: |-
      A coleção de parágrafos sob este parágrafo. Somente leitura

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
  - uid: 'onenote!OneNote.Paragraph#parentParagraph:member'
    summary: |-
      Obtém o objeto do parágrafo pai. Gerará se um parágrafo pai não existir. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentParagraph
    fullName: parentParagraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentParagraph: OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
  - uid: 'onenote!OneNote.Paragraph#parentParagraphOrNull:member'
    summary: |-
      Obtém o objeto do parágrafo pai. Retorna nulo se não existir um parágrafo pai. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentParagraphOrNull
    fullName: parentParagraphOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
  - uid: 'onenote!OneNote.Paragraph#parentTableCell:member'
    summary: |-
      Obtém o objeto TableCell que contém o Paragraph se houver. Se o pai não for uma TableCell, gerará ItemNotFound. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentTableCell
    fullName: parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
  - uid: 'onenote!OneNote.Paragraph#parentTableCellOrNull:member'
    summary: |-
      Obtém o objeto TableCell que contém o Paragraph se houver. Se o pai não for uma TableCell, retornará nulo. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentTableCellOrNull
    fullName: parentTableCellOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
  - uid: 'onenote!OneNote.Paragraph#richText:member'
    summary: |-
      Obtém o objeto RichText em Paragraph. Gerará uma exceção se ParagraphType não for um RichText. Somente leitura

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: richText
    fullName: richText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly richText: OneNote.RichText;'
      return:
        type:
          - 'onenote!OneNote.RichText:class'
  - uid: 'onenote!OneNote.Paragraph#set:member(1)'
    summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
    remarks: |-
      Este método tem a seguinte assinatura adicional:

      `set(properties: OneNote.Paragraph): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.
          type:
            - 'onenote!OneNote.Interfaces.ParagraphUpdateData:interface'
        - id: options
          description: Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'onenote!OneNote.Paragraph#set:member(2)'
    summary: 'Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: OneNote.Paragraph): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'onenote!OneNote.Paragraph:class'
  - uid: 'onenote!OneNote.Paragraph#table:member'
    summary: |-
      Obtém o objeto Table em Paragraph. Gerará uma exceção se ParagraphType não for um Table. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: table
    fullName: table
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly table: OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
  - uid: 'onenote!OneNote.Paragraph#toJSON:member(1)'
    summary: 'Substitui o `toJSON()` método JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto OneNote. Paragraph original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`OneNote.Interfaces.ParagraphData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.ParagraphData:interface'
        description: ''
  - uid: 'onenote!OneNote.Paragraph#track:member(1)'
    summary: 'Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação de context.trackedObjects.add(thisObject). Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
  - uid: 'onenote!OneNote.Paragraph#type:member'
    summary: |-
      Obtém o tipo do objeto Paragraph. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other";'
      return:
        type:
          - 'onenote!OneNote.Paragraph#type~0:complex'
  - uid: 'onenote!OneNote.Paragraph#untrack:member(1)'
    summary: 'Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject). Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.NoteTag:class'
    name: OneNote.NoteTag
  - uid: 'onenote!OneNote.NoteTagType:enum'
    name: OneNote.NoteTagType
  - uid: 'onenote!OneNote.NoteTagStatus:enum'
    name: OneNote.NoteTagStatus
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Paragraph#getParagraphInfo~0:complex'
    name: OfficeExtension.ClientResult<OneNote.ParagraphInfo>
    fullName: OfficeExtension.ClientResult<OneNote.ParagraphInfo>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'onenote!OneNote.ParagraphInfo:interface'
        name: OneNote.ParagraphInfo
        fullName: OneNote.ParagraphInfo
      - name: '>'
        fullName: '>'
  - uid: 'onenote!OneNote.Image:class'
    name: OneNote.Image
  - uid: 'onenote!OneNote.InkWordCollection:class'
    name: OneNote.InkWordCollection
  - uid: 'onenote!OneNote.InsertLocation:enum'
    name: OneNote.InsertLocation
  - uid: 'onenote!OneNote.RichText:class'
    name: OneNote.RichText
  - uid: 'onenote!OneNote.Table:class'
    name: OneNote.Table
  - uid: 'onenote!OneNote.Paragraph:class'
    name: OneNote.Paragraph
  - uid: 'onenote!OneNote.Interfaces.ParagraphLoadOptions:interface'
    name: OneNote.Interfaces.ParagraphLoadOptions
  - uid: 'onenote!OneNote.Outline:class'
    name: OneNote.Outline
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    name: OneNote.ParagraphCollection
  - uid: 'onenote!OneNote.TableCell:class'
    name: OneNote.TableCell
  - uid: 'onenote!OneNote.Interfaces.ParagraphUpdateData:interface'
    name: Interfaces.ParagraphUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'onenote!OneNote.Interfaces.ParagraphData:interface'
    name: OneNote.Interfaces.ParagraphData
  - uid: 'onenote!OneNote.Paragraph#type~0:complex'
    name: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other"
    fullName: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other"
    spec.typeScript:
      - uid: 'onenote!OneNote.ParagraphType:enum'
        name: OneNote.ParagraphType
        fullName: OneNote.ParagraphType
      - name: ' | "RichText" | "Image" | "Table" | "Ink" | "Other"'
        fullName: ' | "RichText" | "Image" | "Table" | "Ink" | "Other"'