### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Table
    summary: |-
      Representa uma tabela em uma página do OneNote.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Table
    fullName: OneNote.Table
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: onenote
    children:
      - onenote.OneNote.Table.appendColumn
      - onenote.OneNote.Table.appendRow
      - onenote.OneNote.Table.borderVisible
      - onenote.OneNote.Table.clear
      - onenote.OneNote.Table.columnCount
      - onenote.OneNote.Table.context
      - onenote.OneNote.Table.getCell
      - onenote.OneNote.Table.id
      - onenote.OneNote.Table.insertColumn
      - onenote.OneNote.Table.insertRow
      - onenote.OneNote.Table.load
      - onenote.OneNote.Table.load_1
      - onenote.OneNote.Table.load_2
      - onenote.OneNote.Table.paragraph
      - onenote.OneNote.Table.rowCount
      - onenote.OneNote.Table.rows
      - onenote.OneNote.Table.set
      - onenote.OneNote.Table.set_1
      - onenote.OneNote.Table.setShadingColor
      - onenote.OneNote.Table.toJSON
      - onenote.OneNote.Table.track
      - onenote.OneNote.Table.untrack
  - uid: onenote.OneNote.Table.appendColumn
    summary: |-
      Adiciona uma coluna ao final da tabela. Valores, se especificados, são definidos na nova coluna. Caso contrário, a coluna fica vazia.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: appendColumn(values)
    fullName: appendColumn(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendColumn(values?: string[]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.appendColumn(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: values
          description: 'Opcional. Cadeias de caracteres a inserir na nova coluna, especificada como uma matriz. Não pode ter mais valores que linhas na tabela.'
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.appendRow
    summary: |-
      Adiciona uma linha ao final da tabela. Valores, se especificados, são definidos na nova linha. Caso contrário, a linha fica vazia.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: appendRow(values)
    fullName: appendRow(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRow(values?: string[]): OneNote.TableRow;'
      return:
        type:
          - onenote.OneNote.TableRow
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.appendRow(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: values
          description: 'Opcional. Cadeias de caracteres a inserir na nova linha, especificadas como uma matriz. Não pode ter mais valores que colunas na tabela.'
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.borderVisible
    summary: |-
      Obtém ou define se as bordas estão visíveis ou não. True se forem visíveis, false se forem ocultas.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: borderVisible
    fullName: borderVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'borderVisible: boolean;'
      return:
        type:
          - boolean
  - uid: onenote.OneNote.Table.clear
    summary: |-
      Limpa o conteúdo da tabela.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: onenote.OneNote.Table.columnCount
    summary: |-
      Obtém a quantidade de colunas na tabela.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.Table.context
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - onenote.OneNote.RequestContext
  - uid: onenote.OneNote.Table.getCell
    summary: |-
      Obtém a célula da tabela em uma linha e coluna especificada.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'getCell(rowIndex, cellIndex)'
    fullName: 'getCell(rowIndex, cellIndex)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(rowIndex: number, cellIndex: number): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a cell in the second row and third column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(2 /*Row Index*/, 3 /*Column Index*/);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowIndex
          description: O índice da linha.
          type:
            - number
        - id: cellIndex
          description: O índice da célula na linha.
          type:
            - number
  - uid: onenote.OneNote.Table.id
    summary: |-
      Obtém a ID da tabela. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Table.insertColumn
    summary: |-
      Insere uma coluna no índice fornecido na tabela. Valores, se especificados, são definidos na nova coluna. Caso contrário, a coluna fica vazia.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertColumn(index, values)'
    fullName: 'insertColumn(index, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertColumn(index: number, values?: string[]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a column at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.insertColumn(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Índice em que a coluna será inserida na tabela.
          type:
            - number
        - id: values
          description: 'Opcional. Cadeias de caracteres a inserir na nova coluna, especificada como uma matriz. Não pode ter mais valores que linhas na tabela.'
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.insertRow
    summary: |-
      Insere uma linha no índice fornecido na tabela. Valores, se especificados, são definidos na nova linha. Caso contrário, a linha fica vazia.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertRow(index, values)'
    fullName: 'insertRow(index, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRow(index: number, values?: string[]): OneNote.TableRow;'
      return:
        type:
          - onenote.OneNote.TableRow
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a row at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.insertRow(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Índice em que a linha será inserida na tabela.
          type:
            - number
        - id: values
          description: 'Opcional. Cadeias de caracteres a inserir na nova linha, especificadas como uma matriz. Não pode ter mais valores que colunas na tabela.'
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.load
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
    remarks: |-
      Além dessa assinatura, este método tem as seguintes assinaturas:

      `load(option?: string | string[]): OneNote.Table`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.

      `load(option?: { select?: string; expand?: string; }): OneNote.Table`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Table`– Disponível somente nos tipos de coleção. É semelhante à assinatura anterior. Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado. Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado. Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableLoadOptions): OneNote.Table;'
      return:
        type:
          - onenote.OneNote.Table
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - onenote.OneNote.Interfaces.TableLoadOptions
  - uid: onenote.OneNote.Table.load_1
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Table;'
      return:
        type:
          - onenote.OneNote.Table
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // For each table, log properties.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          ctx.load(table);
                          return ctx.sync().then(function() {
                              console.log("Table Id: " + table.id);
                              console.log("Row Count: " + table.rowCount);
                              console.log("Column Count: " + table.columnCount);
                              return ctx.sync();
                          });
                      }
                  }
              });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, log its paragraph id.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          ctx.load(table, "paragraph/id, rows/id");
                          return ctx.sync().then(function() {
                              console.log("Paragraph Id: " + table.paragraph.id);
                              var rows = table.rows;
                              
                              // for each rows in the table, log row index and id.
                              for (var i = 0; i < rows.items.length; i++) {
                                  console.log("Row " + i + " Id: " + rows.items[i].id);
                              }
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.Table.load_2
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Table;'
      return:
        type:
          - onenote.OneNote.Table
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: onenote.OneNote.Table.paragraph
    summary: |-
      Obtém o objeto Paragraph que contém o objeto Table. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: paragraph
    fullName: paragraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraph: OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
  - uid: onenote.OneNote.Table.rowCount
    summary: |-
      Obtém a quantidade de linhas na tabela.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.Table.rows
    summary: |-
      Obtém todas as linhas da tabela. Somente leitura.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: rows
    fullName: rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rows: OneNote.TableRowCollection;'
      return:
        type:
          - onenote.OneNote.TableRowCollection
  - uid: onenote.OneNote.Table.set
    summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
    remarks: |-
      Este método tem a seguinte assinatura adicional:

      `set(properties: OneNote.Table): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.
          type:
            - Interfaces.TableUpdateData
        - id: options
          description: Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.
          type:
            - OfficeExtension.UpdateOptions
  - uid: onenote.OneNote.Table.set_1
    summary: 'Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: OneNote.Table): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - onenote.OneNote.Table
  - uid: onenote.OneNote.Table.setShadingColor
    summary: |-
      Define a cor de sombreamento de todas as células na tabela. O código de cor para o qual definir as células.

      \[[Conjunto de APIs: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: setShadingColor(colorCode)
    fullName: setShadingColor(colorCode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: colorCode
          description: ''
          type:
            - string
  - uid: onenote.OneNote.Table.toJSON
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto OneNote. Table original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`OneNote.Interfaces.TableData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableData;'
      return:
        type:
          - onenote.OneNote.Interfaces.TableData
        description: ''
  - uid: onenote.OneNote.Table.track
    summary: 'Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação de context.trackedObjects.add(thisObject). Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Table;'
      return:
        type:
          - onenote.OneNote.Table
        description: ''
  - uid: onenote.OneNote.Table.untrack
    summary: 'Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject). Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Table;'
      return:
        type:
          - onenote.OneNote.Table
        description: ''