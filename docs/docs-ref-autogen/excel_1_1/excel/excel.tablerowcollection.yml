### YamlMime:TSType
name: Excel.TableRowCollection
uid: excel!Excel.TableRowCollection:class
package: excel!
fullName: Excel.TableRowCollection
summary: >-
  Representa uma coleção de todas as linhas que fazem parte da tabela.


  Observe que, diferentemente de intervalos ou colunas, que se ajustarão se novas linhas ou colunas são adicionadas antes delas, um objeto representa o local físico da linha de tabela, mas não os `TableRow` dados. Ou seja, se os dados são organizados ou se novas linhas são adicionadas, uma linha de tabela continuará a apontar para o índice para o qual foi criado.


  \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.TableRowCollection#context:member
  package: excel!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do complemento ao processo do aplicativo host do Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.TableRowCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    Retorna o número de linhas na tabela.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.TableRowCollection#items:member
  package: excel!
  fullName: items
  summary: Obtém os itens filhos carregados nesta coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.TableRow[];'
    return:
      type: <xref uid="excel!Excel.TableRow:class" />[]
methods:
- name: add(index, values)
  uid: excel!Excel.TableRowCollection#add:member(1)
  package: excel!
  fullName: add(index, values)
  summary: >-
    Adiciona uma ou mais linhas à tabela. O objeto de retorno será a parte superior das linhas adicionadas recentemente.


    Observe que, diferentemente de intervalos ou colunas, que se ajustarão se novas linhas ou colunas são adicionadas antes delas, um objeto representa o local físico da linha de tabela, mas não os `TableRow` dados. Ou seja, se os dados são organizados ou se novas linhas são adicionadas, uma linha de tabela continuará a apontar para o índice para o qual foi criado.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) para adicionar uma única linha; 1.4 permite adicionar várias linhas. \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number): Excel.TableRow;'
    parameters:
    - id: index
      description: Opcional. Especifica a posição relativa da nova linha. Se for null ou -1, a adição ocorre no final. Todas as linhas abaixo da linha inserida serão deslocadas para baixo. Indexado com zero.
      type: number
    - id: values
      description: Opcional. Uma matriz 2D de valores não formatados da linha de tabela.
      type: Array&lt;Array&lt;boolean | string | number&gt;&gt; | boolean | string | number
    return:
      type: <xref uid="excel!Excel.TableRow:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var values = [[\"Sample\", \"Values\", \"For\", \"New\", \"Row\"]];\n    var row = tables.getItem(\"Table1\").rows.add(null, values);\n    row.load('index');\n    return ctx.sync().then(function() {\n        console.log(row.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemAt(index)
  uid: excel!Excel.TableRowCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Obtém uma linha com base em sua posição na coleção.


    Observe que, diferentemente de intervalos ou colunas, que se ajustarão se novas linhas ou colunas são adicionadas antes delas, um objeto representa o local físico da linha de tabela, mas não os `TableRow` dados. Ou seja, se os dados são organizados ou se novas linhas são adicionadas, uma linha de tabela continuará a apontar para o índice para o qual foi criado.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.TableRow;'
    parameters:
    - id: index
      description: Valor de índice do objeto a ser recuperado. Indexados com zero.
      type: number
    return:
      type: <xref uid="excel!Excel.TableRow:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);\n    tablerow.load('name');\n    return ctx.sync().then(function() {\n            console.log(tablerow.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.TableRowCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.TableRowCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableRowCollection;'
    parameters:
    - id: options
      description: Fornece opções para quais propriedades do objeto deve ser carregado.
      type: <xref uid="excel!Excel.Interfaces.TableRowCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.TableRowCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.TableRowCollection;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgulas ou uma matriz de cadeias de caracteres que especificam as propriedades a ser carregadas.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tablerows = ctx.workbook.tables.getItem('Table1').rows;\n    tablerows.load('items');\n    return ctx.sync().then(function() {\n        console.log(\"tablerows Count: \" + tablerows.count);\n        for (var i = 0; i < tablerows.items.length; i++) {\n            console.log(tablerows.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// In the example, we'll select the top 100 rows of the table.\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItem(\"Table1\");\n    var tableRows = table.rows.load({\"select\" : \"index, values\",\"top\": 100, \"skip\": 0 })\n    return ctx.sync().then(function() {\n        for (var i = 0; i < tableRows.items.length; i++) {\n            console.log(tableRows.items[i].index);\n            console.log(tableRows.items[i].values);\n        }\n    });\n}).catch(function(error) {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.TableRowCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableRowCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades a ser carregadas e é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades de navegação a `propertyNamesAndPaths.expand` ser carregadas.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.TableRowCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Substitui o método JavaScript `toJSON()` para fornecer uma saída mais útil quando um objeto API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado a ele.) Enquanto o objeto original `Excel.TableRowCollection` é um objeto API, o método retorna `toJSON` um objeto JavaScript simples (digitado como `Excel.Interfaces.TableRowCollectionData`<!-- -->) que contém uma matriz "items" com cópias rasas de quaisquer propriedades carregadas dos itens da coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableRowCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.TableRowCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 8ac01d349ae1fea4583e30997f8659be10a751b8
  ms.sourcegitcommit: ce09743deb2fc2a879cd63f96c8ff11ec84a42b2
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 04/02/2021
  ms.locfileid: "51555710"
