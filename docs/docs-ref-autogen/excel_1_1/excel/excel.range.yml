### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      <span data-ttu-id="898a9-101">Intervalo representa um conjunto de uma ou mais células contíguas, como uma célula, uma linha, uma coluna, um bloco de células, etc. Para saber mais sobre como os intervalos são usados em toda a API, leia [trabalhar com intervalos usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) e [trabalhe com intervalos usando a API JavaScript do Excel (avançado)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="898a9-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="898a9-102">.</span><span class="sxs-lookup"><span data-stu-id="898a9-102"></span></span>

      <span data-ttu-id="898a9-103">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      <span data-ttu-id="898a9-104">Representa a referência do intervalo no estilo A1.</span><span class="sxs-lookup"><span data-stu-id="898a9-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="898a9-105">O valor de endereço conterá a referência de planilha (por exemplo, "Planilha1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="898a9-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="898a9-106">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-106">Read-only.</span></span>

      <span data-ttu-id="898a9-107">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      <span data-ttu-id="898a9-108">Representa a referência de intervalo para o intervalo especificado no idioma do usuário.</span><span class="sxs-lookup"><span data-stu-id="898a9-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="898a9-109">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-109">Read-only.</span></span>

      <span data-ttu-id="898a9-110">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      <span data-ttu-id="898a9-111">Número de células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-111">Number of cells in the range.</span></span> <span data-ttu-id="898a9-112">Essa API retornará -1 se a contagem de células exceder 2^31-1 (2.147.483.647).</span><span class="sxs-lookup"><span data-stu-id="898a9-112">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="898a9-113">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-113">Read-only.</span></span>

      <span data-ttu-id="898a9-114">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-114">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      <span data-ttu-id="898a9-115">Limpe valores de intervalo, formatação, preenchimento, bordas, etc.</span><span class="sxs-lookup"><span data-stu-id="898a9-115">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="898a9-116">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-117">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-117">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="898a9-118">Opcional.</span><span class="sxs-lookup"><span data-stu-id="898a9-118">Optional.</span></span> <span data-ttu-id="898a9-119">Determina o tipo de ação clara.</span><span class="sxs-lookup"><span data-stu-id="898a9-119">Determines the type of clear action.</span></span> <span data-ttu-id="898a9-120">Consulte Excel. ClearApplyTo para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="898a9-120">See Excel.ClearApplyTo for details.</span></span>
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      <span data-ttu-id="898a9-121">Limpe valores de intervalo, formatação, preenchimento, bordas, etc.</span><span class="sxs-lookup"><span data-stu-id="898a9-121">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="898a9-122">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="898a9-123">Opcional.</span><span class="sxs-lookup"><span data-stu-id="898a9-123">Optional.</span></span> <span data-ttu-id="898a9-124">Determina o tipo de ação clara.</span><span class="sxs-lookup"><span data-stu-id="898a9-124">Determines the type of clear action.</span></span> <span data-ttu-id="898a9-125">Consulte Excel. ClearApplyTo para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="898a9-125">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      <span data-ttu-id="898a9-126">Representa o número total de colunas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-126">Represents the total number of columns in the range.</span></span> <span data-ttu-id="898a9-127">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-127">Read-only.</span></span>

      <span data-ttu-id="898a9-128">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      <span data-ttu-id="898a9-129">Representa o número de colunas da primeira célula no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-129">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="898a9-130">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="898a9-130">Zero-indexed.</span></span> <span data-ttu-id="898a9-131">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-131">Read-only.</span></span>

      <span data-ttu-id="898a9-132">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-132">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#context:member'
    summary: <span data-ttu-id="898a9-133">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="898a9-133">The request context associated with the object.</span></span> <span data-ttu-id="898a9-134">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="898a9-134">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      <span data-ttu-id="898a9-135">Exclui as células associadas ao intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-135">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="898a9-136">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-136">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-137">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-137">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="898a9-138">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="898a9-138">Specifies which way to shift the cells.</span></span> <span data-ttu-id="898a9-139">Consulte Excel. DeleteShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="898a9-139">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      <span data-ttu-id="898a9-140">Exclui as células associadas ao intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-140">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="898a9-141">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-141">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="898a9-142">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="898a9-142">Specifies which way to shift the cells.</span></span> <span data-ttu-id="898a9-143">Consulte Excel. DeleteShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="898a9-143">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      <span data-ttu-id="898a9-144">Retorna um objeto de formato que encapsula a fonte, o preenchimento, as bordas, o alinhamento e outras propriedades do intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-144">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="898a9-145">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-145">Read-only.</span></span>

      <span data-ttu-id="898a9-146">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      <span data-ttu-id="898a9-147">Representa a fórmula em notação A1.</span><span class="sxs-lookup"><span data-stu-id="898a9-147">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="898a9-148">Ao definir fórmulas para um intervalo, o argumento value pode ser um valor único (uma cadeia de caracteres) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="898a9-148">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="898a9-149">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-149">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="898a9-150">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-150">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      <span data-ttu-id="898a9-151">Representa a fórmula em notação A1, na formatação de número da localidade e no idioma do usuário.</span><span class="sxs-lookup"><span data-stu-id="898a9-151">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="898a9-152">Por exemplo, a fórmula "=SUM(A1, 1.5)" em inglês seria "=SOMA(A1; 1,5)" em português.</span><span class="sxs-lookup"><span data-stu-id="898a9-152">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="898a9-153">Ao definir fórmulas para um intervalo, o argumento value pode ser um valor único (uma cadeia de caracteres) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="898a9-153">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="898a9-154">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-154">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="898a9-155">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-155">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      <span data-ttu-id="898a9-156">Obtém o menor objeto Range que engloba os intervalos determinados.</span><span class="sxs-lookup"><span data-stu-id="898a9-156">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="898a9-157">Por exemplo, o GetBoundingRect de "B2:C5" e "D10:E15" é "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="898a9-157">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="898a9-158">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-159">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-159">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="898a9-160">O nome ou endereço do intervalo ou o objeto Range.</span><span class="sxs-lookup"><span data-stu-id="898a9-160">The range object or address or range name.</span></span>
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      <span data-ttu-id="898a9-161">Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna.</span><span class="sxs-lookup"><span data-stu-id="898a9-161">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="898a9-162">A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha.</span><span class="sxs-lookup"><span data-stu-id="898a9-162">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="898a9-163">A localização da célula retornada está relacionada à célula superior esquerda do intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-163">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="898a9-164">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-164">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-165">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-165">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="898a9-166">O número da linha da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="898a9-166">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="898a9-167">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="898a9-167">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="898a9-168">O número da coluna da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="898a9-168">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="898a9-169">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="898a9-169">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      <span data-ttu-id="898a9-170">Obtém uma coluna incluída no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-170">Gets a column contained in the range.</span></span>

      <span data-ttu-id="898a9-171">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-171">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-172">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-172">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="898a9-173">O número da coluna do intervalo a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="898a9-173">Column number of the range to be retrieved.</span></span> <span data-ttu-id="898a9-174">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="898a9-174">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      <span data-ttu-id="898a9-175">Obtém um objeto que representa a coluna inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `getEntireColumn` é um intervalo que representa as colunas "B:E").</span><span class="sxs-lookup"><span data-stu-id="898a9-175">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="898a9-176">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-176">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-177">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-177">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      <span data-ttu-id="898a9-178">Obtém um objeto que representa a linha inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `GetEntireRow` é um intervalo que representa as linhas "4:11").</span><span class="sxs-lookup"><span data-stu-id="898a9-178">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="898a9-179">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-180">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-180">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      <span data-ttu-id="898a9-181">Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados.</span><span class="sxs-lookup"><span data-stu-id="898a9-181">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="898a9-182">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-182">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-183">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-183">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="898a9-184">O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.</span><span class="sxs-lookup"><span data-stu-id="898a9-184">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      <span data-ttu-id="898a9-185">Obtém a última célula do intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-185">Gets the last cell within the range.</span></span> <span data-ttu-id="898a9-186">Por exemplo, a última célula de "B2:D5" é "D5".</span><span class="sxs-lookup"><span data-stu-id="898a9-186">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="898a9-187">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-187">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-188">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-188">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      <span data-ttu-id="898a9-189">Obtém a última coluna do intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-189">Gets the last column within the range.</span></span> <span data-ttu-id="898a9-190">Por exemplo, a última coluna de "B2:D5" é "D2:D5".</span><span class="sxs-lookup"><span data-stu-id="898a9-190">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="898a9-191">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-191">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-192">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-192">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      <span data-ttu-id="898a9-193">Obtém a última linha do intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-193">Gets the last row within the range.</span></span> <span data-ttu-id="898a9-194">Por exemplo, a última linha de "B2:D5" é "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="898a9-194">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="898a9-195">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-195">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-196">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-196">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      <span data-ttu-id="898a9-p122">Obtém um objeto que representa um intervalo deslocado do intervalo especificado. A dimensão do intervalo retornado corresponde a esse intervalo. Se o intervalo resultante for imposto para fora dos limites da grade da planilha, o sistema gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="898a9-p122">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="898a9-200">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-200">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-201">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-201">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="898a9-p123">O número de linhas (positivo, negativo ou 0) com base no qual o intervalo deve ser deslocado. Os valores positivos são deslocados para baixo e os negativos, para cima.</span><span class="sxs-lookup"><span data-stu-id="898a9-p123">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="898a9-p124">O número de colunas (positivo, negativo ou 0) com base no qual o intervalo deve ser deslocado. Os valores positivos são deslocados para a direita e os negativos, para a esquerda.</span><span class="sxs-lookup"><span data-stu-id="898a9-p124">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      <span data-ttu-id="898a9-206">Obtém uma linha contida no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-206">Gets a row contained in the range.</span></span>

      <span data-ttu-id="898a9-207">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-208">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-208">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="898a9-209">O número da linha do intervalo a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="898a9-209">Row number of the range to be retrieved.</span></span> <span data-ttu-id="898a9-210">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="898a9-210">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      <span data-ttu-id="898a9-p126">Insere uma célula ou um intervalo de células na planilha, no lugar desse intervalo, e desloca as outras células para liberar espaço. Retorna um novo objeto Range no espaço em branco atual.</span><span class="sxs-lookup"><span data-stu-id="898a9-p126">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="898a9-213">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-213">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-214">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-214">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="898a9-215">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="898a9-215">Specifies which way to shift the cells.</span></span> <span data-ttu-id="898a9-216">Consulte Excel. InsertShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="898a9-216">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      <span data-ttu-id="898a9-p128">Insere uma célula ou um intervalo de células na planilha, no lugar desse intervalo, e desloca as outras células para liberar espaço. Retorna um novo objeto Range no espaço em branco atual.</span><span class="sxs-lookup"><span data-stu-id="898a9-p128">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="898a9-219">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-219">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="898a9-220">Especifica como deslocar as células.</span><span class="sxs-lookup"><span data-stu-id="898a9-220">Specifies which way to shift the cells.</span></span> <span data-ttu-id="898a9-221">Consulte Excel. InsertShiftDirection para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="898a9-221">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: <span data-ttu-id="898a9-222">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="898a9-222">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="898a9-223">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="898a9-223">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="898a9-224">Fornece opções para as propriedades do objeto a ser carregado.</span><span class="sxs-lookup"><span data-stu-id="898a9-224">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: <span data-ttu-id="898a9-225">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="898a9-225">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="898a9-226">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="898a9-226">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-227">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-227">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="898a9-228">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="898a9-228">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: <span data-ttu-id="898a9-229">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="898a9-229">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="898a9-230">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="898a9-230">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="898a9-231">`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="898a9-231">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      <span data-ttu-id="898a9-232">Representa o código de formato de número do Excel para o intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="898a9-232">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="898a9-233">Ao definir o formato de número para um intervalo, o argumento value pode ser um valor único (String) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="898a9-233">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="898a9-234">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-234">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="898a9-235">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-235">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      <span data-ttu-id="898a9-236">Retorna o número total de linhas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-236">Returns the total number of rows in the range.</span></span> <span data-ttu-id="898a9-237">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-237">Read-only.</span></span>

      <span data-ttu-id="898a9-238">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-238">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      <span data-ttu-id="898a9-239">Representa o número de linhas da primeira célula no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-239">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="898a9-240">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="898a9-240">Zero-indexed.</span></span> <span data-ttu-id="898a9-241">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-241">Read-only.</span></span>

      <span data-ttu-id="898a9-242">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      <span data-ttu-id="898a9-243">Seleciona o intervalo especificado na interface do usuário do Excel.</span><span class="sxs-lookup"><span data-stu-id="898a9-243">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="898a9-244">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-244">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-245">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-245">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: '<span data-ttu-id="898a9-246">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="898a9-246">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="898a9-247">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="898a9-247">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="898a9-248">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="898a9-248">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="898a9-249">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-249">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="898a9-250">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="898a9-250">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: <span data-ttu-id="898a9-251">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-251">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: '<span data-ttu-id="898a9-252">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="898a9-252">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      <span data-ttu-id="898a9-253">Valores de texto do intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="898a9-253">Text values of the specified range.</span></span> <span data-ttu-id="898a9-254">O valor de texto não depende da largura da célula.</span><span class="sxs-lookup"><span data-stu-id="898a9-254">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="898a9-255">A \# substituição de sinal que acontece na IU do Excel não afetará o valor de texto RETORNADO pela API.</span><span class="sxs-lookup"><span data-stu-id="898a9-255">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="898a9-256">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-256">Read-only.</span></span>

      <span data-ttu-id="898a9-257">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-257">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: '<span data-ttu-id="898a9-258">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="898a9-258">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="898a9-259">.</span><span class="sxs-lookup"><span data-stu-id="898a9-259"></span></span> <span data-ttu-id="898a9-260">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="898a9-260"></span></span><!-- --><span data-ttu-id="898a9-261">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. Range original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="898a9-261">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="898a9-262">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="898a9-262">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: '<span data-ttu-id="898a9-263">Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento.</span><span class="sxs-lookup"><span data-stu-id="898a9-263">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="898a9-264">Essa chamada é uma abreviação para`context.trackedObjects.add(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="898a9-264">This call is a shorthand for `context.trackedObjects.add(thisObject)`</span></span><!-- --><span data-ttu-id="898a9-265">.</span><span class="sxs-lookup"><span data-stu-id="898a9-265"></span></span> <span data-ttu-id="898a9-266">Se você estiver usando esse objeto nas `.sync` chamadas e fora da execução seqüencial de um lote ". Run" e obter um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, você precisa ter adicionado o objeto ao objeto rastreado coleção quando o objeto foi criado pela primeira vez.</span><span class="sxs-lookup"><span data-stu-id="898a9-266">If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: '<span data-ttu-id="898a9-267">Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="898a9-267">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="898a9-268">Essa chamada é abreviada para`context.trackedObjects.remove(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="898a9-268">This call is shorthand for `context.trackedObjects.remove(thisObject)`</span></span><!-- --><span data-ttu-id="898a9-269">.</span><span class="sxs-lookup"><span data-stu-id="898a9-269"></span></span> <span data-ttu-id="898a9-270">Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los.</span><span class="sxs-lookup"><span data-stu-id="898a9-270">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="898a9-271">Você precisará chamar `context.sync()` antes que o lançamento da memória entre em vigor.</span><span class="sxs-lookup"><span data-stu-id="898a9-271">You will need to call `context.sync()` before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="898a9-272">Exemplos</span><span class="sxs-lookup"><span data-stu-id="898a9-272">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      <span data-ttu-id="898a9-273">Representa os valores brutos do intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="898a9-273">Represents the raw values of the specified range.</span></span> <span data-ttu-id="898a9-274">Os dados retornados podem ser dos tipos: cadeia de caracteres, número ou booliano.</span><span class="sxs-lookup"><span data-stu-id="898a9-274">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="898a9-275">Células que contêm um erro retornarão a cadeia de caracteres de erro.</span><span class="sxs-lookup"><span data-stu-id="898a9-275">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="898a9-276">Ao definir valores para um intervalo, o argumento value pode ser um valor único (String, Number ou Boolean) ou uma matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="898a9-276">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="898a9-277">Se o argumento for um valor único, ele será aplicado a todas as células no intervalo.</span><span class="sxs-lookup"><span data-stu-id="898a9-277">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="898a9-278">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-278">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      <span data-ttu-id="898a9-279">Representa o tipo de dados de cada célula.</span><span class="sxs-lookup"><span data-stu-id="898a9-279">Represents the type of data of each cell.</span></span> <span data-ttu-id="898a9-280">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-280">Read-only.</span></span>

      <span data-ttu-id="898a9-281">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-281">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      <span data-ttu-id="898a9-282">A planilha que contém o intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="898a9-282">The worksheet containing the current range.</span></span> <span data-ttu-id="898a9-283">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="898a9-283">Read-only.</span></span>

      <span data-ttu-id="898a9-284">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="898a9-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet