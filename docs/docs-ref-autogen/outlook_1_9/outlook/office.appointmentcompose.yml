### YamlMime:TSType
name: Office.AppointmentCompose
uid: outlook!Office.AppointmentCompose:interface
package: outlook!
fullName: Office.AppointmentCompose
summary: >-
  O modo organizador de compromissos [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


  **Importante**: este é um objeto Outlook interno, não diretamente exposto por meio de interfaces existentes. Você deve tratar isso como um modo de `Office.context.mailbox.item`<!-- -->. Consulte a página [Modelo de Objeto](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item) para obter mais informações.


  Interfaces pai:


  - [ItemCompose](xref:outlook!Office.ItemCompose:interface)


  - [Compromisso](xref:outlook!Office.Appointment:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: body
  uid: outlook!Office.AppointmentCompose#body:member
  package: outlook!
  fullName: body
  summary: >-
    Obtém um objeto que fornece métodos para manipular o corpo de um item.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of an object that is passed as the result parameter to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: categories
  uid: outlook!Office.AppointmentCompose#categories:member
  package: outlook!
  fullName: categories
  summary: >-
    Obtém um objeto que fornece métodos para gerenciar as categorias do item.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categories: Categories;'
    return:
      type: <xref uid="outlook!Office.Categories:interface" />
- name: end
  uid: outlook!Office.AppointmentCompose#end:member
  package: outlook!
  fullName: end
  summary: >-
    Obtém ou define a data e a hora em que o compromisso deve terminar.


    A propriedade é um objeto Time expresso como um valor de data e hora `end` do TEMPO Universal Coordenado (UTC). [](xref:outlook!Office.Time:interface) Você pode usar o método para converter o valor da propriedade na data `convertToLocalClientTime` e hora locais do `end` cliente.


    Ao usar o método `Time.setAsync` para definir a hora de término, deve-se usar o método `convertToUtcClientTime` para converter a hora local no cliente para UTC para o servidor.


    **Importante**: no Windows cliente, você não pode usar essa propriedade para atualizar o final de uma recorrência.
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // The following example sets the end time of an appointment in compose mode by

    // using the `setAsync` method of the `Time` object.

    var endTime = new Date("3/14/2015");

    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("End Time " + result.asyncContext.verb);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.end.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment ends: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'end: Time;'
    return:
      type: <xref uid="outlook!Office.Time:interface" />
- name: enhancedLocation
  uid: outlook!Office.AppointmentCompose#enhancedLocation:member
  package: outlook!
  fullName: enhancedLocation
  summary: >-
    Obtém ou define os locais do compromisso. A `enhancedLocation` propriedade retorna um objeto [EnhancedLocation](xref:outlook!Office.EnhancedLocation:interface) que fornece métodos para obter, remover ou adicionar locais em um item.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      var places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result) => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enhancedLocation: EnhancedLocation;'
    return:
      type: <xref uid="outlook!Office.EnhancedLocation:interface" />
- name: itemType
  uid: outlook!Office.AppointmentCompose#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    Obtém o tipo de item que representa uma instância.


    A propriedade `itemType` retorna um dos valores de enumeração `ItemType`, indicando se a instância do objeto `item` é uma mensagem ou um compromisso.
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: location
  uid: outlook!Office.AppointmentCompose#location:member
  package: outlook!
  fullName: location
  summary: Obtém ou define o local de um compromisso. A propriedade retorna um objeto Location que fornece métodos usados para `location` obter e definir o local do compromisso. [](xref:outlook!Office.Location:interface)
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    var userContext = { value : 1 };

    Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);


    function callback(asyncResult) {
        var context = asyncResult.context;
        var location = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    var location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'location: Location;'
    return:
      type: <xref uid="outlook!Office.Location:interface" />
- name: notificationMessages
  uid: outlook!Office.AppointmentCompose#notificationMessages:member
  package: outlook!
  fullName: notificationMessages
  summary: >-
    Obtém as mensagens de notificação de um item.


    \[[Conjunto de API: Caixa de Correio 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`\n\n**[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"progressIndicator\",\n    message: \"Progress indicator with id = \" + id\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Non-persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: false\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: true\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\n  id,\n  {\n    type: \"informationalMessage\",\n    message: \"Notification message with id = \" + id + \" has been replaced with an informational message.\",\n    icon: \"icon2\",\n    persistent: false\n  },\n  handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type: <xref uid="outlook!Office.NotificationMessages:interface" />
- name: optionalAttendees
  uid: outlook!Office.AppointmentCompose#optionalAttendees:member
  package: outlook!
  fullName: optionalAttendees
  summary: >-
    Fornece acesso aos participantes opcionais de um evento. O tipo de objeto e o nível de acesso dependem do modo do item atual.


    A propriedade `optionalAttendees` retorna um objeto `Recipients` que fornece métodos para obter ou atualizar os participantes opcionais de uma reunião. No entanto, dependendo do cliente/plataforma (ou seja, Windows, Mac etc.), os limites podem ser aplicados em quantos destinatários você pode obter ou atualizar. Consulte o [objeto Recipients](xref:outlook!Office.Recipients:interface) para obter mais detalhes.
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.optionalAttendees.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfOptionalAttendeesRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOptionalAttendees = asyncResult.value;
        for (var i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    var email = $("#emailOptional")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'optionalAttendees: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: organizer
  uid: outlook!Office.AppointmentCompose#organizer:member
  package: outlook!
  fullName: organizer
  summary: >-
    Obtém o organizador da reunião especificada.


    A `organizer` propriedade retorna um objeto [Organizer](xref:outlook!Office.Organizer:interface) que fornece um método para obter o valor do organizador.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'organizer: Organizer;'
    return:
      type: <xref uid="outlook!Office.Organizer:interface" />
- name: recurrence
  uid: outlook!Office.AppointmentCompose#recurrence:member
  package: outlook!
  fullName: recurrence
  summary: >-
    Obtém ou define o padrão de recorrência de um compromisso.


    A propriedade retorna um objeto de recorrência para compromissos recorrentes ou solicitações de reuniões se um item for uma série ou `recurrence` uma instância em uma série. `null` é retornado para compromissos individuais e solicitações de reunião de compromissos individuais.


    **Observação**: as solicitações de reunião têm `itemClass` um valor de `IPM.Schedule.Meeting.Request`<!-- -->.


    **Observação**: se o objeto de recorrência for nulo, isso indica que o objeto é um único compromisso ou uma solicitação de reunião de um único compromisso e NÃO uma parte de uma série.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    var currentDate = new Date();

    let seriesTimeObject : Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      currentDate.getDay() + 1
    );

    // Set series end date to 1 month from now.

    seriesTimeObject.setEndDate(
      currentDate.getFullYear(),
      currentDate.getMonth() + 1,
      currentDate.getDay()
    );

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    let pattern : Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: "weekly",
      recurrenceProperties: { interval: 1, days: ["tue", "thu"], firstDayOfWeek: "sun" },
      recurrenceTimeZone: { name: "Pacific Standard Time" }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'recurrence: Recurrence;'
    return:
      type: <xref uid="outlook!Office.Recurrence:interface" />
- name: requiredAttendees
  uid: outlook!Office.AppointmentCompose#requiredAttendees:member
  package: outlook!
  fullName: requiredAttendees
  summary: >-
    Fornece acesso aos participantes obrigatórios de um evento. O tipo de objeto e o nível de acesso dependem do modo do item atual.


    A propriedade `requiredAttendees` retorna um objeto `Recipients` que fornece métodos para obter ou atualizar os participantes obrigatórios de uma reunião. No entanto, dependendo do cliente/plataforma (ou seja, Windows, Mac etc.), os limites podem ser aplicados em quantos destinatários você pode obter ou atualizar. Consulte o [objeto Recipients](xref:outlook!Office.Recipients:interface) para obter mais detalhes.
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.requiredAttendees.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfRequiredAttendeesRecipients = asyncResult.value;
        console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptRequiredAttendees = asyncResult.value;
        for (var i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    var email = $("#emailRequired")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'requiredAttendees: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: seriesId
  uid: outlook!Office.AppointmentCompose#seriesId:member
  package: outlook!
  fullName: seriesId
  summary: >-
    Obtém a id da série à que uma instância pertence.


    Em Outlook clientes da Web e da área de trabalho, a propriedade retorna a ID Exchange Web Services (EWS) do item pai (série) a que este `seriesId` item pertence. No entanto, no iOS e no Android, a seriesId retorna a ID REST do item pai.


    **Observação**: o identificador retornado pela propriedade é o mesmo que o identificador de item `seriesId` Exchange Web Services. A `seriesId` propriedade não é idêntica às Outlook IDs usadas pela OUTLOOK REST. Antes de fazer chamadas de API REST usando esse valor, ela deve ser convertida usando `Office.context.mailbox.convertToRestId`<!-- -->. Para obter mais detalhes, consulte Usar as OUTLOOK REST de um [Outlook de um Outlook de usuário](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.


    A propriedade retorna para itens que não têm itens pai, como `seriesId` compromissos individuais, itens de série ou solicitações de reunião e retorna para quaisquer outros itens que não sejam solicitações `null` `undefined` de reunião.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesId: string;'
    return:
      type: string
- name: start
  uid: outlook!Office.AppointmentCompose#start:member
  package: outlook!
  fullName: start
  summary: >-
    Obtém ou define a data e a hora em que o compromisso deve começar.


    A propriedade é um objeto Time expresso como um valor de data e hora `start` do TEMPO Universal Coordenado (UTC). [](xref:outlook!Office.Time:interface) Você pode usar o método para converter o valor na data `convertToLocalClientTime` e hora locais do cliente.


    Ao usar o método `Time.setAsync` para definir a hora de início, deve-se usar o método `convertToUtcClientTime` para converter a hora local no cliente para UTC para o servidor.


    **Importante**: no Windows cliente, você não pode usar essa propriedade para atualizar o início de uma recorrência.
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'start: Time;'
    return:
      type: <xref uid="outlook!Office.Time:interface" />
- name: subject
  uid: outlook!Office.AppointmentCompose#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    Obtém ou define a descrição que aparece no campo de assunto de um item.


    A propriedade `subject` obtém ou define o assunto completo do item, conforme enviado pelo servidor de email.


    A propriedade `subject` retorna um objeto `Subject` que fornece métodos para obter e definir o assunto.
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: Subject;'
    return:
      type: <xref uid="outlook!Office.Subject:interface" />
methods:
- name: addFileAttachmentAsync(uri, attachmentName, options, callback)
  uid: outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)
  package: outlook!
  fullName: addFileAttachmentAsync(uri, attachmentName, options, callback)
  summary: >-
    Adiciona um arquivo a uma mensagem ou um compromisso como um anexo.


    O método `addFileAttachmentAsync` carrega o arquivo no URI especificado e anexa-o ao item no formulário de composição.


    Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.


    **Importante**: em builds recentes de Outlook no Windows, um bug foi introduzido que acrescenta incorretamente um header a essa ação (seja usando essa API ou a `Authorization: Bearer` interface do usuário Outlook). Para resolver esse problema, você pode tentar usar a `addFileAttachmentFromBase64` API introduzida com o conjunto de requisitos 1.8.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `AttachmentSizeExceeded`<!-- -->: O anexo é maior do que o permitido.


    - `FileTypeNotSupported`<!-- -->: O anexo tem uma extensão que não é permitida.


    - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.


    #### <a name="examples"></a>Exemplos


    ```javascript

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: uri
      description: O URI que fornece o local do arquivo anexado à mensagem ou compromisso. O comprimento máximo é de 2048 caracteres.
      type: string
    - id: attachmentName
      description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
      type: string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada. `isInline`<!-- -->: Se for true, indica que o anexo será mostrado em linha no corpo da mensagem e não deve ser exibido na lista de anexos.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isInline: boolean }'
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao carregar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentAsync(uri, attachmentName, callback)
  uid: outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(2)
  package: outlook!
  fullName: addFileAttachmentAsync(uri, attachmentName, callback)
  summary: >-
    Adiciona um arquivo a uma mensagem ou um compromisso como um anexo.


    O método `addFileAttachmentAsync` carrega o arquivo no URI especificado e anexa-o ao item no formulário de composição.


    Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.


    **Importante**: em builds recentes de Outlook no Windows, um bug foi introduzido que acrescenta incorretamente um header a essa ação (seja usando essa API ou a `Authorization: Bearer` interface do usuário Outlook). Para resolver esse problema, você pode tentar usar a `addFileAttachmentFromBase64` API introduzida com o conjunto de requisitos 1.8.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `AttachmentSizeExceeded`<!-- -->: O anexo é maior do que o permitido.


    - `FileTypeNotSupported`<!-- -->: O anexo tem uma extensão que não é permitida.


    - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: uri
      description: O URI que fornece o local do arquivo anexado à mensagem ou compromisso. O comprimento máximo é de 2048 caracteres.
      type: string
    - id: attachmentName
      description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
      type: string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao carregar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)
  uid: outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)
  package: outlook!
  fullName: addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)
  summary: >-
    Adiciona um arquivo a uma mensagem ou um compromisso como um anexo.


    O método carrega o arquivo da codificação base64 e o anexa ao `addFileAttachmentFromBase64Async` item no formulário de composição. Este método retorna o identificador de anexo no `asyncResult.value` objeto.


    Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.


    **Observação**: se você estiver usando uma API de URL de dados (por exemplo, `readAsDataURL`<!-- -->), você precisa retirar o prefixo da URL de dados e enviar o restante da cadeia de caracteres para essa API. Por exemplo, se a cadeia de caracteres completa for representada por `data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, remover `data:image/svg+xml;base64,`<!-- -->.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `AttachmentSizeExceeded`<!-- -->: O anexo é maior do que o permitido.


    - `FileTypeNotSupported`<!-- -->: O anexo tem uma extensão que não é permitida.


    - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options: Office.AsyncContextOptions &  { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: base64File
      description: O conteúdo codificado base64 de uma imagem ou arquivo a ser adicionado a um email ou evento.
      type: string
    - id: attachmentName
      description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
      type: string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada. `isInline`<!-- -->: Se true, indica que o anexo será mostrado em linha no corpo da mensagem e não deve ser exibido na lista de anexos.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> &  { isInline: boolean }'
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao carregar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentFromBase64Async(base64File, attachmentName, callback)
  uid: outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(2)
  package: outlook!
  fullName: addFileAttachmentFromBase64Async(base64File, attachmentName, callback)
  summary: >-
    Adiciona um arquivo a uma mensagem ou um compromisso como um anexo.


    O método carrega o arquivo da codificação base64 e o anexa ao `addFileAttachmentFromBase64Async` item no formulário de composição. Este método retorna o identificador de anexo no `asyncResult.value` objeto.


    Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.


    **Observação**: se você estiver usando uma API de URL de dados (por exemplo, `readAsDataURL`<!-- -->), você precisa retirar o prefixo da URL de dados e enviar o restante da cadeia de caracteres para essa API. Por exemplo, se a cadeia de caracteres completa for representada por `data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, remover `data:image/svg+xml;base64,`<!-- -->.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `AttachmentSizeExceeded`<!-- -->: O anexo é maior do que o permitido.


    - `FileTypeNotSupported`<!-- -->: O anexo tem uma extensão que não é permitida.


    - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: base64File
      description: O conteúdo codificado base64 de uma imagem ou arquivo a ser adicionado a um email ou evento.
      type: string
    - id: attachmentName
      description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
      type: string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao carregar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.AppointmentCompose#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    Adiciona um manipulador de eventos a um evento com suporte. **Observação:** os eventos estão disponíveis somente com o painel de tarefas.


    Consulte a seção Eventos do modelo de objeto [item](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) para eventos com suporte.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: O evento que deve invocar o manipulador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade type no parâmetro corresponderá ao `eventType` parâmetro passado para `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro, `asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: outlook!Office.AppointmentCompose#addHandlerAsync:member(2)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: >-
    Adiciona um manipulador de eventos a um evento com suporte. **Observação:** os eventos estão disponíveis somente com o painel de tarefas.


    Consulte a seção Eventos do modelo de objeto [item](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) para eventos com suporte.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: O evento que deve invocar o manipulador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade type no parâmetro corresponderá ao `eventType` parâmetro passado para `addHandlerAsync`<!-- -->.
      type: any
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro, `asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  uid: outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)
  package: outlook!
  fullName: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  summary: >-
    Adiciona um item do Exchange, como uma mensagem, como anexo na mensagem ou no compromisso.


    O método `addItemAttachmentAsync` anexa o item com o identificador do Exchange especificado ao item no formulário de composição. Se você especificar um método de retorno de chamada, o método será chamado com um parâmetro, `asyncResult`<!-- -->, que contém o identificador de anexo ou um código que indica qualquer erro que ocorreu ao anexar o item. Você pode usar o parâmetro `options` para passar informações de estado ao método de retorno de chamada, se necessário.


    Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.


    Se o Suplemento do Office estiver em execução no Outlook na Web, o método `addItemAttachmentAsync` pode anexar itens que não sejam aquele que você está editando; no entanto, isso não tem suporte e não é recomendado.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // The following example adds an existing Outlook item as an attachment

    // with the name `My Attachment`.

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: itemId
      description: O identificador do Exchange do item a anexar. O comprimento máximo é de 100 caracteres.
      type: any
    - id: attachmentName
      description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
      type: string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao adicionar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addItemAttachmentAsync(itemId, attachmentName, callback)
  uid: outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(2)
  package: outlook!
  fullName: addItemAttachmentAsync(itemId, attachmentName, callback)
  summary: >-
    Adiciona um item do Exchange, como uma mensagem, como anexo na mensagem ou no compromisso.


    O método `addItemAttachmentAsync` anexa o item com o identificador do Exchange especificado ao item no formulário de composição. Se você especificar um método de retorno de chamada, o método será chamado com um parâmetro, `asyncResult`<!-- -->, que contém o identificador de anexo ou um código que indica qualquer erro que ocorreu ao anexar o item. Você pode usar o parâmetro `options` para passar informações de estado ao método de retorno de chamada, se necessário.


    Posteriormente, você poderá usar o identificador com o método `removeAttachmentAsync` para remover o anexo na mesma sessão.


    Se o Suplemento do Office estiver em execução no Outlook na Web, o método `addItemAttachmentAsync` pode anexar itens que não sejam aquele que você está editando; no entanto, isso não tem suporte e não é recomendado.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `NumberOfAttachmentsExceeded`<!-- -->: A mensagem ou o compromisso tem muitos anexos.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: itemId
      description: O identificador do Exchange do item a anexar. O comprimento máximo é de 100 caracteres.
      type: any
    - id: attachmentName
      description: O nome do anexo que é mostrado enquanto o anexo está sendo carregado. O tamanho máximo é de 255 caracteres.
      type: string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Em caso de êxito, o identificador do anexo será fornecido na propriedade `asyncResult.value`. Se houver falha ao adicionar o anexo, o objeto `asyncResult` conterá um objeto `Error` que fornece uma descrição do erro.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: close()
  uid: outlook!Office.AppointmentCompose#close:member(1)
  package: outlook!
  fullName: close()
  summary: >-
    Fecha o item atual que está sendo composto


    Os comportamentos do `close` método dependem do estado atual do item que está sendo composto. Se o item tiver alterações não salvas, o cliente solicitará que o usuário salve, descarte ou feche a ação.


    No cliente do Outlook para área de trabalho, se a mensagem for uma resposta embutida, o método `close` não terá efeito.


    **Observação**: Outlook na Web, se o item for um compromisso e tiver sido salvo anteriormente usando`saveAsync`<!-- -->, o usuário é solicitado a salvar, descartar ou cancelar mesmo que nenhuma alteração tenha ocorrido desde que o item foi salvo pela última vez.


    \[[Conjunto de API: Caixa de Correio 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'close(): void;'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, options, callback)
  uid: outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(1)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, options, callback)
  summary: >-
    Obtém um anexo de uma mensagem ou compromisso e o retorna como um `AttachmentContent` objeto.


    O `getAttachmentContentAsync` método obtém o anexo com o identificador especificado do item. Como prática prática, você deve usar o identificador para recuperar um anexo na mesma sessão que os attachmentIds foram recuperados com `getAttachmentsAsync` a chamada `item.attachments` ou. No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão é final quando o usuário fecha o aplicativo ou se o usuário começa a compor um formulário em linha, então, subsequentemente, sai o formulário para continuar em uma janela separada.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `AttachmentTypeNotSupported`<!-- -->: Não há suporte para o tipo de anexo. Tipos sem suporte incluem imagens incorporadas no Formato rich text ou tipos de anexos de item diferentes de itens de email ou calendário (como um contato ou item de tarefa).


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: O identificador do anexo que você deseja obter.
      type: string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro, `asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto. Se a chamada falhar, `asyncResult.error` a propriedade conterá um código de erro com o motivo da falha.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, callback)
  uid: outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(2)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, callback)
  summary: >-
    Obtém um anexo de uma mensagem ou compromisso e o retorna como um `AttachmentContent` objeto.


    O `getAttachmentContentAsync` método obtém o anexo com o identificador especificado do item. Como prática prática, você deve usar o identificador para recuperar um anexo na mesma sessão que os attachmentIds foram recuperados com `getAttachmentsAsync` a chamada `item.attachments` ou. No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão é final quando o usuário fecha o aplicativo ou se o usuário começa a compor um formulário em linha, então, subsequentemente, sai o formulário para continuar em uma janela separada.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `AttachmentTypeNotSupported`<!-- -->: Não há suporte para o tipo de anexo. Tipos sem suporte incluem imagens incorporadas no Formato rich text ou tipos de anexos de item diferentes de itens de email ou calendário (como um contato ou item de tarefa).


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: O identificador do anexo que você deseja obter.
      type: string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro, `asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto. Se a chamada falhar, `asyncResult.error` a propriedade conterá um código de erro com o motivo da falha.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentsAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getAttachmentsAsync:member(1)
  package: outlook!
  fullName: getAttachmentsAsync(options, callback)
  summary: >-
    Obtém os anexos do item como uma matriz.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (var i = 0; i < result.value.length; i++) {
                    var attachment = result.value[i];
                    console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentsAsync(options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
    parameters:
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Se a chamada falhar, `asyncResult.error` a propriedade conterá um código de erro com o motivo da falha.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentDetailsCompose:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentsAsync(callback)
  uid: outlook!Office.AppointmentCompose#getAttachmentsAsync:member(2)
  package: outlook!
  fullName: getAttachmentsAsync(callback)
  summary: >-
    Obtém os anexos do item como uma matriz.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Se a chamada falhar, `asyncResult.error` a propriedade conterá um código de erro com o motivo da falha.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentDetailsCompose:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getItemIdAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getItemIdAsync:member(1)
  package: outlook!
  fullName: getItemIdAsync(options, callback)
  summary: >-
    Obtém de forma assíncrona a ID de um item salvo.


    Quando invocado, este método retorna a ID do item por meio do método de retorno de chamada.


    **Observação**: se o seu complemento chamar um item no modo de composição (por exemplo, para obter um uso com o EWS ou a API REST), lembre-se de que, quando o Outlook estiver no modo em cache, pode levar algum tempo até que o item seja sincronizado com o `getItemIdAsync` `itemId` servidor. Até que o item seja sincronizado, o `itemId` não será reconhecido e o uso retornará um erro.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `ItemNotSaved`<!-- -->: A id não poderá ser recuperada até que o item seja salvo.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getItemIdAsync(callback)
  uid: outlook!Office.AppointmentCompose#getItemIdAsync:member(2)
  package: outlook!
  fullName: getItemIdAsync(callback)
  summary: >-
    Obtém de forma assíncrona a ID de um item salvo.


    Quando invocado, este método retorna a ID do item por meio do método de retorno de chamada.


    **Observação**: se o seu complemento chamar um item no modo de composição (por exemplo, para obter um uso com o EWS ou a API REST), lembre-se de que, quando o Outlook estiver no modo em cache, pode levar algum tempo até que o item seja sincronizado com o `getItemIdAsync` `itemId` servidor. Até que o item seja sincronizado, o `itemId` não será reconhecido e o uso retornará um erro.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `ItemNotSaved`<!-- -->: A id não poderá ser recuperada até que o item seja salvo.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)
  package: outlook!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: >-
    Retorna de forma assíncrona os dados selecionados do assunto ou do corpo de uma mensagem.


    Se não houver seleção, mas o cursor estiver no corpo ou no assunto, o método retorna uma cadeia de caracteres vazia para os dados selecionados. Se um campo que não seja o corpo ou o assunto estiver selecionado, o método retorna o erro `InvalidSelection`.


    Para acessar os dados selecionados do método de retorno de chamada, chame `asyncResult.value.data`<!-- -->. Para acessar a `source` propriedade de onde a seleção vem, chame `asyncResult.value.sourceProperty`<!-- -->, que será `body` ou `subject`<!-- -->.


    \[[Conjunto de API: Caixa de Correio 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Get selected data.

    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };


    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        console.log("Selected text in " + prop + ": " + text);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
    parameters:
    - id: coercionType
      description: Solicita um formato para os dados. Se `Text`<!-- -->, o método retorna o texto sem formatação como uma cadeia de caracteres, removendo todas as marcas HTML presentes. Se `HTML`<!-- -->, o método retorna o texto selecionado, seja texto sem formatção ou HTML.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: Os dados selecionados como uma cadeia de caracteres com formato determinado por `coercionType`<!-- -->.
- name: getSelectedDataAsync(coercionType, callback)
  uid: outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)
  package: outlook!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: >-
    Retorna de forma assíncrona os dados selecionados do assunto ou do corpo de uma mensagem.


    Se não houver seleção, mas o cursor estiver no corpo ou no assunto, o método retorna uma cadeia de caracteres vazia para os dados selecionados. Se um campo que não seja o corpo ou o assunto estiver selecionado, o método retorna o erro `InvalidSelection`.


    Para acessar os dados selecionados do método de retorno de chamada, chame `asyncResult.value.data`<!-- -->. Para acessar a `source` propriedade de onde a seleção vem, chame `asyncResult.value.sourceProperty`<!-- -->, que será `body` ou `subject`<!-- -->.


    \[[Conjunto de API: Caixa de Correio 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: coercionType
      description: Solicita um formato para os dados. Se `Text`<!-- -->, o método retorna o texto sem formatação como uma cadeia de caracteres, removendo todas as marcas HTML presentes. Se `HTML`<!-- -->, o método retorna o texto selecionado, seja texto sem formatção ou HTML.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: Os dados selecionados como uma cadeia de caracteres com formato determinado por `coercionType`<!-- -->.
- name: getSharedPropertiesAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(1)
  package: outlook!
  fullName: getSharedPropertiesAsync(options, callback)
  summary: >-
    Obtém as propriedades de um compromisso ou mensagem em uma pasta compartilhada.


    Para obter mais informações sobre como usar essa API, consulte o [artigo de acesso do](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) representante.


    **Observação**: este método não é suportado em Outlook iOS ou Android.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. A `value` propriedade do resultado são as propriedades do item compartilhado.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSharedPropertiesAsync(callback)
  uid: outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(2)
  package: outlook!
  fullName: getSharedPropertiesAsync(callback)
  summary: >-
    Obtém as propriedades de um compromisso ou mensagem em uma pasta compartilhada.


    Para obter mais informações sobre como usar essa API, consulte o [artigo de acesso do](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) representante.


    **Observação**: este método não é suportado em Outlook iOS ou Android.


    \[[Conjunto de API: Caixa de Correio 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: callback
      description: Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. A `value` propriedade do resultado são as propriedades do item compartilhado.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    Carrega de forma assíncrona as propriedades personalizadas para esse suplemento no item selecionado.


    Propriedades personalizadas são armazenadas como pares chave/valor de acordo com o aplicativo e o item. Este método retorna um objeto `CustomProperties` no retorno de chamada, que oferece métodos para acessar as propriedades personalizadas específicas para o item atual e o suplemento atual. Propriedades personalizadas não são criptografadas no item, portanto não devem ser usadas como armazenamento seguro.


    As propriedades personalizadas são fornecidas como um objeto `CustomProperties` na propriedade `asyncResult.value`. Esse objeto pode ser usado para obter, definir e remover as propriedades personalizadas do item e salvar as alterações na propriedade personalizada definida de volta no servidor.
  remarks: "**[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`\n\n**[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: Opcional. Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar na função de retorno de chamada. Esse objeto pode ser acessado pela propriedade `asyncResult.asyncContext` na função de retorno de chamada.
      type: any
    return:
      type: void
      description: ''
- name: removeAttachmentAsync(attachmentId, options, callback)
  uid: outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)
  package: outlook!
  fullName: removeAttachmentAsync(attachmentId, options, callback)
  summary: >-
    Remove um anexo de uma mensagem ou de um compromisso.


    O método `removeAttachmentAsync` remove o anexo com o identificador especificado do item. Como prática recomendada, deve-se usar o identificador do anexo para remover um anexo somente se o mesmo aplicativo de email tiver adicionado esse anexo na mesma sessão. No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão é final quando o usuário fecha o aplicativo ou se o usuário começa a compor um formulário em linha, então, subsequentemente, sai o formulário para continuar em uma janela separada.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // The following code removes an attachment with an identifier of '0'.

    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: attachmentId
      description: O identificador do anexo a remover. O comprimento máximo da cadeia de `attachmentId` caracteres é de 200 caracteres Outlook na Web e Windows.
      type: string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Se a remoção do anexo falhar, a propriedade `asyncResult.error` conterá um código de erro com o motivo da falha.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeAttachmentAsync(attachmentId, callback)
  uid: outlook!Office.AppointmentCompose#removeAttachmentAsync:member(2)
  package: outlook!
  fullName: removeAttachmentAsync(attachmentId, callback)
  summary: >-
    Remove um anexo de uma mensagem ou de um compromisso.


    O método `removeAttachmentAsync` remove o anexo com o identificador especificado do item. Como prática recomendada, deve-se usar o identificador do anexo para remover um anexo somente se o mesmo aplicativo de email tiver adicionado esse anexo na mesma sessão. No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão é final quando o usuário fecha o aplicativo ou se o usuário começa a compor um formulário em linha, então, subsequentemente, sai o formulário para continuar em uma janela separada.


    \[[Conjunto de API: Caixa de Correio 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: attachmentId
      description: O identificador do anexo a remover. O comprimento máximo da cadeia de `attachmentId` caracteres é de 200 caracteres Outlook na Web e Windows.
      type: string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->. Se a remoção do anexo falhar, a propriedade `asyncResult.error` conterá um código de erro com o motivo da falha.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.AppointmentCompose#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Remove um manipulador de eventos para um tipo de evento com suporte. **Observação:** os eventos estão disponíveis somente com o painel de tarefas.


    Consulte a seção Eventos do modelo de objeto [item](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) para eventos com suporte.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: O evento que deve revogar o manipulador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro, `asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: outlook!Office.AppointmentCompose#removeHandlerAsync:member(2)
  package: outlook!
  fullName: removeHandlerAsync(eventType, callback)
  summary: >-
    Remove um manipulador de eventos para um tipo de evento com suporte. **Observação:** os eventos estão disponíveis somente com o painel de tarefas.


    Consulte a seção Eventos do modelo de objeto [item](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) para eventos com suporte.


    \[[Conjunto de API: Caixa de Correio 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: O evento que deve revogar o manipulador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro, `asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: saveAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#saveAsync:member(1)
  package: outlook!
  fullName: saveAsync(options, callback)
  summary: >-
    Salva um item de forma assíncrona.


    Quando invocado, esse método salva a mensagem atual como rascunho e retorna a ID do item por meio do método de retorno de chamada. No Outlook na Web ou no Outlook no modo online, o item é salvo no servidor. No Outlook no modo cache, o item é salvo no cache local.


    Como compromissos não têm um estado de rascunho, se `saveAsync` for chamado em um compromisso no modo Redigir, o item será salvo como um compromisso normal no calendário do usuário. Para novos compromissos que não foram salvos antes, nenhum convite será enviado. Salvar um compromisso existente enviará uma atualização aos participantes adicionados ou removidos.


    **Observação**: se o seu complemento chamar um item no modo de composição para obter uma ID de item a ser usada com o EWS ou a API REST, lembre-se de que, quando o Outlook estiver no modo em cache, pode levar algum tempo até que o item seja realmente sincronizado com o `saveAsync` servidor. Até que o item seja sincronizado, o uso da ID do item retornará um erro.


    **Observação**: Outlook no Mac, apenas a com build 16.35.308 ou posterior oferece suporte para salvar uma reunião. Caso contrário, `saveAsync` o método falhará quando chamado de uma reunião no modo de redação. Para uma solução alternativa, consulte [Cannot save a meeting as a draft in Outlook para Mac using Office JS API](https://support.microsoft.com/help/4505745)<!-- -->.


    \[[Conjunto de API: Caixa de Correio 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/save.yaml

    Office.context.mailbox.item.saveAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`saveAsync succeeded, itemId is ${result.value}`);
      }
      else {
        console.error(`saveAsync failed with message ${result.error.message}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: saveAsync(callback)
  uid: outlook!Office.AppointmentCompose#saveAsync:member(2)
  package: outlook!
  fullName: saveAsync(callback)
  summary: >-
    Salva um item de forma assíncrona.


    Quando invocado, esse método salva a mensagem atual como rascunho e retorna a ID do item por meio do método de retorno de chamada. No Outlook na Web ou no Outlook no modo online, o item é salvo no servidor. No Outlook no modo cache, o item é salvo no cache local.


    Como compromissos não têm um estado de rascunho, se `saveAsync` for chamado em um compromisso no modo Redigir, o item será salvo como um compromisso normal no calendário do usuário. Para novos compromissos que não foram salvos antes, nenhum convite será enviado. Salvar um compromisso existente enviará uma atualização aos participantes adicionados ou removidos.


    **Observação**: se o seu complemento chamar um item no modo de composição para obter uma ID de item a ser usada com o EWS ou a API REST, lembre-se de que, quando o Outlook estiver no modo em cache, pode levar algum tempo até que o item seja realmente sincronizado com o `saveAsync` servidor. Até que o item seja sincronizado, o uso da ID do item retornará um erro.


    **Observação**: Outlook no Mac, apenas a com build 16.35.308 ou posterior oferece suporte para salvar uma reunião. Caso contrário, `saveAsync` o método falhará quando chamado de uma reunião no modo de redação. Para uma solução alternativa, consulte [Cannot save a meeting as a draft in Outlook para Mac using Office JS API](https://support.microsoft.com/help/4505745)<!-- -->.


    \[[Conjunto de API: Caixa de Correio 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.


    #### <a name="examples"></a>Exemplos


    ```javascript

    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the

    // `result` parameter passed to the

    // callback function. The `value`

    // property contains the item ID of

    // the item.

    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Quando o método é concluído, a função passada no parâmetro callback é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, options, callback)
  uid: outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)
  package: outlook!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: >-
    Insere de forma assíncrona os dados no corpo ou no assunto de uma mensagem.


    O método `setSelectedDataAsync` insere a cadeia de caracteres especificada no local do cursor no corpo ou assunto do item ou, se o texto estiver selecionado no editor, substitui o texto selecionado. Se o cursor não estiver no campo do corpo ou assunto, um erro será retornado. Após a inserção, o cursor é colocado no final do conteúdo inserido.


    \[[Conjunto de API: Caixa de Correio 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.


    #### <a name="examples"></a>Exemplos


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });

    ```

    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Os dados a serem inseridos. Os dados não devem exceder 1.000.000 de caracteres. Se forem passados mais de 1.000.000 de caracteres, ocorrerá uma exceção `ArgumentOutOfRange`.
      type: string
    - id: options
      description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejam acessar no método de retorno de chamada. `coercionType`<!-- -->: Se texto, o estilo atual é aplicado Outlook na Web e Windows. Se o campo for um editor de HTML, apenas os dados de texto são inseridos, mesmo se os dados forem HTML. Se html e o campo for compatível com HTML (o assunto não, o estilo atual será aplicado Outlook na Web e o estilo padrão será aplicado em Outlook em clientes da área de trabalho. Se o campo for um campo de texto, retorna um erro `InvalidDataFormat`. Se `coercionType` não estiver definido, o resultado depende do campo: se o campo for HTML, HTML será usado; se o campo for texto, texto sem formatação será usado.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: outlook!Office.AppointmentCompose#setSelectedDataAsync:member(2)
  package: outlook!
  fullName: setSelectedDataAsync(data, callback)
  summary: >-
    Insere de forma assíncrona os dados no corpo ou no assunto de uma mensagem.


    O método `setSelectedDataAsync` insere a cadeia de caracteres especificada no local do cursor no corpo ou assunto do item ou, se o texto estiver selecionado no editor, substitui o texto selecionado. Se o cursor não estiver no campo do corpo ou assunto, um erro será retornado. Após a inserção, o cursor é colocado no final do conteúdo inserido.


    \[[Conjunto de API: Caixa de Correio 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nível mínimo de permissão](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Modo Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Organizador de Compromissos


    **Erros**:


    - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Os dados a serem inseridos. Os dados não devem exceder 1.000.000 de caracteres. Se forem passados mais de 1.000.000 de caracteres, ocorrerá uma exceção `ArgumentOutOfRange`.
      type: string
    - id: callback
      description: Opcional. Quando o método é concluído, a função passada no `callback` parâmetro é chamada com um único parâmetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Appointment:interface" />
metadata:
  ms.openlocfilehash: 1b45aeee273c37ab8f7264276bf036645fa0ed3b
  ms.sourcegitcommit: fc08f53e68f6acec0b6de81691ac5920f3974ed4
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 05/21/2021
  ms.locfileid: "52590304"
