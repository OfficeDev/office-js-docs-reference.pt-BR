### YamlMime:TSType
name: Excel.Table
uid: excel!Excel.Table:class
package: excel!
fullName: Excel.Table
summary: >-
  Representa uma tabela do Excel. Para saber mais sobre o modelo de objeto de tabela, leia [Trabalhar com tabelas usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables)<!-- -->.


  \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: autoFilter
  uid: excel!Excel.Table#autoFilter:member
  package: excel!
  fullName: autoFilter
  summary: >-
    Representa o objeto AutoFilter da tabela.


    \[[Conjunto de APIs: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type: <xref uid="excel!Excel.AutoFilter:class" />
- name: columns
  uid: excel!Excel.Table#columns:member
  package: excel!
  fullName: columns
  summary: >-
    Representa uma coleção de todas as colunas na tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columns: Excel.TableColumnCollection;'
    return:
      type: <xref uid="excel!Excel.TableColumnCollection:class" />
- name: context
  uid: excel!Excel.Table#context:member
  package: excel!
  fullName: context
  summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do complemento ao processo do aplicativo host do Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: highlightFirstColumn
  uid: excel!Excel.Table#highlightFirstColumn:member
  package: excel!
  fullName: highlightFirstColumn
  summary: >-
    Especifica se a primeira coluna contém formatação especial.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'highlightFirstColumn: boolean;'
    return:
      type: boolean
- name: highlightLastColumn
  uid: excel!Excel.Table#highlightLastColumn:member
  package: excel!
  fullName: highlightLastColumn
  summary: >-
    Especifica se a última coluna contém formatação especial.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'highlightLastColumn: boolean;'
    return:
      type: boolean
- name: id
  uid: excel!Excel.Table#id:member
  package: excel!
  fullName: id
  summary: >-
    Retorna um valor que identifica de forma exclusiva a tabela em uma determinada pasta de trabalho. O valor do identificador permanece o mesmo, ainda que a tabela seja renomeada.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: legacyId
  uid: excel!Excel.Table#legacyId:member
  package: excel!
  fullName: legacyId
  summary: >-
    Retorna uma id numérica.


    \[[Conjunto de APIs: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly legacyId: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Table#name:member
  package: excel!
  fullName: name
  summary: >-
    Nome da tabela.


    O nome definido da tabela deve seguir as diretrizes especificadas no artigo [Renomear uma tabela do Excel.](https://support.office.com/article/Rename-an-Excel-table-FBF49A4F-82A3-43EB-8BA2-44D21233B114)


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: onChanged
  uid: excel!Excel.Table#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    Ocorre quando os dados nas células são alterações em uma tabela específica.


    \[[Conjunto de APIs: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.TableChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml\nawait Excel.run(async (context) => {\n    let table = context.workbook.tables.getItemAt(0);\n    table.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event\");\n});\n```"
- name: onSelectionChanged
  uid: excel!Excel.Table#onSelectionChanged:member
  package: excel!
  fullName: onSelectionChanged
  summary: >-
    Ocorre quando a seleção é muda em uma tabela específica.


    \[[Conjunto de APIs: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.TableSelectionChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.TableSelectionChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml\nawait Excel.run(async (context) => {\n    let table = context.workbook.tables.getItemAt(0);\n    table.onSelectionChanged.add(onSelectionChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for table onSelectionChanged event\");\n});\n```"
- name: rows
  uid: excel!Excel.Table#rows:member
  package: excel!
  fullName: rows
  summary: >-
    Representa uma coleção de todas as linhas na tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rows: Excel.TableRowCollection;'
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
- name: showBandedColumns
  uid: excel!Excel.Table#showBandedColumns:member
  package: excel!
  fullName: showBandedColumns
  summary: >-
    Especifica se as colunas mostram formatação em faixas nas quais as colunas ímpares são realçadas de forma diferente das colunas até mesmo para facilitar a leitura da tabela.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showBandedColumns: boolean;'
    return:
      type: boolean
- name: showBandedRows
  uid: excel!Excel.Table#showBandedRows:member
  package: excel!
  fullName: showBandedRows
  summary: >-
    Especifica se as linhas mostram formatação em faixas nas quais as linhas ímpares são realçadas de forma diferente das linhas até mesmo para facilitar a leitura da tabela.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showBandedRows: boolean;'
    return:
      type: boolean
- name: showFilterButton
  uid: excel!Excel.Table#showFilterButton:member
  package: excel!
  fullName: showFilterButton
  summary: >-
    Especifica se os botões de filtro estão visíveis na parte superior de cada header de coluna. Essa configuração só será permitida se a tabela tiver uma linha de cabeçalho.


    \[[Conjunto de APIs: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showFilterButton: boolean;'
    return:
      type: boolean
- name: showHeaders
  uid: excel!Excel.Table#showHeaders:member
  package: excel!
  fullName: showHeaders
  summary: >-
    Especifica se a linha de header está visível. Esse valor pode ser definido para mostrar ou remover a linha do cabeçalho.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showHeaders: boolean;'
    return:
      type: boolean
- name: showTotals
  uid: excel!Excel.Table#showTotals:member
  package: excel!
  fullName: showTotals
  summary: >-
    Especifica se a linha total está visível. Esse valor pode ser definido para mostrar ou remover a linha do total.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showTotals: boolean;'
    return:
      type: boolean
- name: sort
  uid: excel!Excel.Table#sort:member
  package: excel!
  fullName: sort
  summary: >-
    Representa a classificação da tabela.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly sort: Excel.TableSort;'
    return:
      type: <xref uid="excel!Excel.TableSort:class" />
- name: style
  uid: excel!Excel.Table#style:member
  package: excel!
  fullName: style
  summary: >-
    Valor da constante que representa o estilo de Tabela. Os valores possíveis são: "TableStyleLight1" a "TableStyleLight21", "TableStyleMedium1" a "TableStyleMedium28", "TableStyleDark1" a "TableStyleDark11". Também é possível usar um estilo definido pelo usuário que esteja presente na planilha.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Set table style. \nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.name = 'Table1-Renamed';\n    table.showTotals = false;\n    table.style = 'TableStyleMedium2';\n    table.load('tableStyle');\n    return ctx.sync().then(function() {\n            console.log(table.style);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: worksheet
  uid: excel!Excel.Table#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    A planilha que contém a tabela atual.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: clearFilters()
  uid: excel!Excel.Table#clearFilters:member(1)
  package: excel!
  fullName: clearFilters()
  summary: >-
    Limpa todos os filtros aplicados à tabela no momento.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFilters(): void;'
    return:
      type: void
      description: ''
- name: convertToRange()
  uid: excel!Excel.Table#convertToRange:member(1)
  package: excel!
  fullName: convertToRange()
  summary: >-
    Converte a tabela em um intervalo de células normal. Todos os dados são preservados.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.convertToRange();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete()
  uid: excel!Excel.Table#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Exclui a tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getDataBodyRange()
  uid: excel!Excel.Table#getDataBodyRange:member(1)
  package: excel!
  fullName: getDataBodyRange()
  summary: >-
    Obtém o objeto de intervalo associado ao corpo de dados da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBodyRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableDataRange = table.getDataBodyRange();\n    tableDataRange.load('address')\n    return ctx.sync().then(function() {\n            console.log(tableDataRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getHeaderRowRange()
  uid: excel!Excel.Table#getHeaderRowRange:member(1)
  package: excel!
  fullName: getHeaderRowRange()
  summary: >-
    Obtém o objeto de intervalo associado à linha de cabeçalho da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHeaderRowRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableHeaderRange = table.getHeaderRowRange();\n    tableHeaderRange.load('address');\n    return ctx.sync().then(function() {\n        console.log(tableHeaderRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRange()
  uid: excel!Excel.Table#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: >-
    Obtém o objeto de intervalo associado a toda a tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableRange = table.getRange();\n    tableRange.load('address');    \n    return ctx.sync().then(function() {\n            console.log(tableRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getTotalRowRange()
  uid: excel!Excel.Table#getTotalRowRange:member(1)
  package: excel!
  fullName: getTotalRowRange()
  summary: >-
    Obtém o objeto de intervalo associado à linha de totais da tabela.


    \[[Conjunto de APIs: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTotalRowRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableTotalsRange = table.getTotalRowRange();\n    tableTotalsRange.load('address');    \n    return ctx.sync().then(function() {\n            console.log(tableTotalsRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.Table#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.TableLoadOptions): Excel.Table;'
    parameters:
    - id: options
      description: Fornece opções para quais propriedades do objeto carregar.
      type: <xref uid="excel!Excel.Interfaces.TableLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Table:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Table#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Table;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a carregar.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Table:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Get a table by name. \nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('index')\n    return ctx.sync().then(function() {\n            console.log(table.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get a table by index.\nExcel.run(function (ctx) { \n    var index = 0;\n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('id')\n    return ctx.sync().then(function() {\n            console.log(table.id);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Table#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Table;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades a carregar e é uma cadeia de caracteres delimitada por vírgulas que especifica as propriedades de navegação `propertyNamesAndPaths.expand` a carregar.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Table:class" />
      description: ''
- name: reapplyFilters()
  uid: excel!Excel.Table#reapplyFilters:member(1)
  package: excel!
  fullName: reapplyFilters()
  summary: >-
    Aplica novamente todos os filtros à tabela.


    \[[Conjunto de APIs: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'reapplyFilters(): void;'
    return:
      type: void
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Table#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto de API do mesmo tipo.
  remarks: >-
    Esse método tem a seguinte assinatura adicional:


    `set(properties: Excel.Table): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Um objeto JavaScript com propriedades estruturadas isomorficamente para as propriedades do objeto no qual o método é chamado.
      type: <xref uid="excel!Excel.Interfaces.TableUpdateData:interface" />
    - id: options
      description: Fornece uma opção para suprimir erros se o objeto de propriedades tentar definir qualquer propriedade somente leitura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Table#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Table): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Table:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Table#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Substitui o método JavaScript para fornecer uma saída mais útil quando um objeto `toJSON()` de API é passado para `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel.Table original é um objeto API, o método retorna um objeto `toJSON` JavaScript simples (digitado como `Excel.Interfaces.TableData`<!-- -->) que contém cópias rasas de qualquer propriedade filho carregada do objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.TableData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 8385ea3e7ceb7b34965504494c5d2b249d7aa2f3
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49858785"
