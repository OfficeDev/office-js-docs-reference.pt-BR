### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidation:class'
    summary: |-
      <span data-ttu-id="d7163-101">Representa a validação de dados aplicada ao intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="d7163-101">Represents the data validation applied to the current range.</span></span> <span data-ttu-id="d7163-102">Para saber mais sobre o modelo de objeto de validação de dados, leia [Adicionar validação de dados para intervalos do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span><span class="sxs-lookup"><span data-stu-id="d7163-102">To learn more about the data validation object model, read [Add data validation to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span></span><!-- --><span data-ttu-id="d7163-103">.</span><span class="sxs-lookup"><span data-stu-id="d7163-103"></span></span>

      <span data-ttu-id="d7163-104">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.DataValidation#clear:member(1)'
      - 'excel!Excel.DataValidation#context:member'
      - 'excel!Excel.DataValidation#errorAlert:member'
      - 'excel!Excel.DataValidation#ignoreBlanks:member'
      - 'excel!Excel.DataValidation#load:member(1)'
      - 'excel!Excel.DataValidation#load:member(2)'
      - 'excel!Excel.DataValidation#load:member(3)'
      - 'excel!Excel.DataValidation#prompt:member'
      - 'excel!Excel.DataValidation#rule:member'
      - 'excel!Excel.DataValidation#set:member(1)'
      - 'excel!Excel.DataValidation#set:member(2)'
      - 'excel!Excel.DataValidation#toJSON:member(1)'
      - 'excel!Excel.DataValidation#type:member'
      - 'excel!Excel.DataValidation#valid:member'
  - uid: 'excel!Excel.DataValidation#clear:member(1)'
    summary: |-
      <span data-ttu-id="d7163-105">Desfazer a validação de dados do intervalo atual.</span><span class="sxs-lookup"><span data-stu-id="d7163-105">Clears the data validation from the current range.</span></span>

      <span data-ttu-id="d7163-106">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-106">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.DataValidation#context:member'
    summary: <span data-ttu-id="d7163-107">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="d7163-107">The request context associated with the object.</span></span> <span data-ttu-id="d7163-108">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="d7163-108">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.DataValidation#errorAlert:member'
    summary: |-
      <span data-ttu-id="d7163-109">Alerta de erro quando o usuário insere dados inválidos.</span><span class="sxs-lookup"><span data-stu-id="d7163-109">Error alert when user enters invalid data.</span></span>

      <span data-ttu-id="d7163-110">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-110">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: Excel.DataValidationErrorAlert;'
      return:
        type:
          - 'excel!Excel.DataValidationErrorAlert:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d7163-111">Exemplos</span><span class="sxs-lookup"><span data-stu-id="d7163-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#ignoreBlanks:member'
    summary: |-
      <span data-ttu-id="d7163-112">Ignora espaços em branco: nenhuma validação de dados será executada em células vazias, o padrão será definido como verdadeiro.</span><span class="sxs-lookup"><span data-stu-id="d7163-112">Ignore blanks: no data validation will be performed on blank cells, it defaults to true.</span></span>

      <span data-ttu-id="d7163-113">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-113">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.DataValidation#load:member(1)'
    summary: <span data-ttu-id="d7163-114">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="d7163-114">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d7163-115">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="d7163-115">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="d7163-116">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="d7163-116">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="d7163-117">`load(option?: string | string[]): Excel.DataValidation`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="d7163-117">`load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="d7163-118">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="d7163-118">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="d7163-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="d7163-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types.</span></span> <span data-ttu-id="d7163-120">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="d7163-120">It is similar to the preceding signature.</span></span> <span data-ttu-id="d7163-121">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="d7163-121">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="d7163-122">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="d7163-122">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d7163-123">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="d7163-123">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.DataValidationLoadOptions:interface'
  - uid: 'excel!Excel.DataValidation#load:member(2)'
    summary: <span data-ttu-id="d7163-124">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="d7163-124">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d7163-125">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="d7163-125">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="d7163-126">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="d7163-126">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.DataValidation#load:member(3)'
    summary: <span data-ttu-id="d7163-127">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="d7163-127">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d7163-128">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="d7163-128">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="d7163-129">Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="d7163-129">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.DataValidation#prompt:member'
    summary: |-
      <span data-ttu-id="d7163-130">Avisar quando os usuários selecionarem uma célula.</span><span class="sxs-lookup"><span data-stu-id="d7163-130">Prompt when users select a cell.</span></span> <span data-ttu-id="d7163-131">O `DataValidationPrompt` objeto deve ser definido como um objeto JSON (use `x.prompt = {...}` em vez de`x.prompt.message = ...`</span><span class="sxs-lookup"><span data-stu-id="d7163-131">The `DataValidationPrompt` object must be set as a JSON object (use `x.prompt = {...}` instead of `x.prompt.message = ...`</span></span><!-- --><span data-ttu-id="d7163-132">).</span><span class="sxs-lookup"><span data-stu-id="d7163-132"></span></span>

      <span data-ttu-id="d7163-133">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-133">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: Excel.DataValidationPrompt;'
      return:
        type:
          - 'excel!Excel.DataValidationPrompt:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d7163-134">Exemplos</span><span class="sxs-lookup"><span data-stu-id="d7163-134">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#rule:member'
    summary: |-
      <span data-ttu-id="d7163-135">Regra de validação de dados que contém diferentes tipos de critérios de validação de dados.</span><span class="sxs-lookup"><span data-stu-id="d7163-135">Data validation rule that contains different type of data validation criteria.</span></span>

      <span data-ttu-id="d7163-136">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-136">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.DataValidationRule;'
      return:
        type:
          - 'excel!Excel.DataValidationRule:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d7163-137">Exemplos</span><span class="sxs-lookup"><span data-stu-id="d7163-137">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#set:member(1)'
    summary: '<span data-ttu-id="d7163-138">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="d7163-138">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="d7163-139">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="d7163-139">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="d7163-140">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="d7163-140">This method has the following additional signature:</span></span>

      `set(properties: Excel.DataValidation): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="d7163-141">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="d7163-141">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.DataValidationUpdateData:interface'
        - id: options
          description: <span data-ttu-id="d7163-142">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="d7163-142">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.DataValidation#set:member(2)'
    summary: '<span data-ttu-id="d7163-143">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="d7163-143">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataValidation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.DataValidation#toJSON:member(1)'
    summary: '<span data-ttu-id="d7163-144">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="d7163-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="d7163-145">.</span><span class="sxs-lookup"><span data-stu-id="d7163-145"></span></span> <span data-ttu-id="d7163-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="d7163-146"></span></span><!-- --><span data-ttu-id="d7163-147">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. DataValidation original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.DataValidationData`</span><span class="sxs-lookup"><span data-stu-id="d7163-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`</span></span><!-- --><span data-ttu-id="d7163-148">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="d7163-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataValidationData;'
      return:
        type:
          - 'excel!Excel.Interfaces.DataValidationData:interface'
        description: ''
  - uid: 'excel!Excel.DataValidation#type:member'
    summary: |-
      <span data-ttu-id="d7163-149">Tipo de validação de dados, confira Excel.DataValidationType para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="d7163-149">Type of the data validation, see Excel.DataValidationType for details.</span></span>

      <span data-ttu-id="d7163-150">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-150">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
      return:
        type:
          - 'excel!Excel.DataValidation#type~0:complex'
  - uid: 'excel!Excel.DataValidation#valid:member'
    summary: |-
      <span data-ttu-id="d7163-151">Representa se todos os valores de célula são válidos de acordo com as regras de validação de dados.</span><span class="sxs-lookup"><span data-stu-id="d7163-151">Represents if all cell values are valid according to the data validation rules.</span></span> <span data-ttu-id="d7163-152">Retorna true se todos os valores de célula forem válidos ou false se todos os valores de célula forem inválidos.</span><span class="sxs-lookup"><span data-stu-id="d7163-152">Returns true if all cell values are valid, or false if all cell values are invalid.</span></span> <span data-ttu-id="d7163-153">Retorna NULL se houver valores de célula válidos e inválidos no intervalo.</span><span class="sxs-lookup"><span data-stu-id="d7163-153">Returns null if there are both valid and invalid cell values within the range.</span></span>

      <span data-ttu-id="d7163-154">\[[Conjunto de APIs: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d7163-154">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.DataValidationErrorAlert:interface'
    name: Excel.DataValidationErrorAlert
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.Interfaces.DataValidationLoadOptions:interface'
    name: Excel.Interfaces.DataValidationLoadOptions
  - uid: 'excel!Excel.DataValidationPrompt:interface'
    name: Excel.DataValidationPrompt
  - uid: 'excel!Excel.DataValidationRule:interface'
    name: Excel.DataValidationRule
  - uid: 'excel!Excel.Interfaces.DataValidationUpdateData:interface'
    name: Interfaces.DataValidationUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.DataValidationData:interface'
    name: Excel.Interfaces.DataValidationData
  - uid: 'excel!Excel.DataValidation#type~0:complex'
    name: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
    fullName: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
    spec.typeScript:
      - uid: 'excel!Excel.DataValidationType:enum'
        name: Excel.DataValidationType
        fullName: Excel.DataValidationType
      - name: ' | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"'
        fullName: ' | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"'