### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Body:class'
    summary: |-
      <span data-ttu-id="8e7e6-101">Representa o corpo de um documento ou de uma seção.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-101">Represents the body of a document or a section.</span></span>

      <span data-ttu-id="8e7e6-102">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Body
    fullName: Word.Body
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Body#clear:member(1)'
      - 'word!Word.Body#contentControls:member'
      - 'word!Word.Body#context:member'
      - 'word!Word.Body#font:member'
      - 'word!Word.Body#getHtml:member(1)'
      - 'word!Word.Body#getOoxml:member(1)'
      - 'word!Word.Body#inlinePictures:member'
      - 'word!Word.Body#insertBreak:member(1)'
      - 'word!Word.Body#insertBreak:member(2)'
      - 'word!Word.Body#insertContentControl:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(2)'
      - 'word!Word.Body#insertHtml:member(1)'
      - 'word!Word.Body#insertHtml:member(2)'
      - 'word!Word.Body#insertInlinePictureFromBase64:member(1)'
      - 'word!Word.Body#insertInlinePictureFromBase64:member(2)'
      - 'word!Word.Body#insertOoxml:member(1)'
      - 'word!Word.Body#insertOoxml:member(2)'
      - 'word!Word.Body#insertParagraph:member(1)'
      - 'word!Word.Body#insertParagraph:member(2)'
      - 'word!Word.Body#insertText:member(1)'
      - 'word!Word.Body#insertText:member(2)'
      - 'word!Word.Body#load:member(1)'
      - 'word!Word.Body#load:member(2)'
      - 'word!Word.Body#load:member(3)'
      - 'word!Word.Body#paragraphs:member'
      - 'word!Word.Body#parentContentControl:member'
      - 'word!Word.Body#search:member(1)'
      - 'word!Word.Body#select:member(1)'
      - 'word!Word.Body#select:member(2)'
      - 'word!Word.Body#set:member(1)'
      - 'word!Word.Body#set:member(2)'
      - 'word!Word.Body#style:member'
      - 'word!Word.Body#text:member'
      - 'word!Word.Body#toJSON:member(1)'
      - 'word!Word.Body#track:member(1)'
      - 'word!Word.Body#untrack:member(1)'
  - uid: 'word!Word.Body#clear:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-103">Limpa o conteúdo do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-103">Clears the contents of the body object.</span></span> <span data-ttu-id="8e7e6-104">O usuário pode executar a operação de desfazer no conteúdo limpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-104">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="8e7e6-105">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-106">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-106">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to clear the contents of the body.
              body.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the body contents.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how the 
          // clear method can be used to clear the contents of a document.
          // https://aka.ms/sillystorywordaddin
          ```
  - uid: 'word!Word.Body#contentControls:member'
    summary: |-
      <span data-ttu-id="8e7e6-107">Obtém a coleção de objetos de controle de conteúdo de Rich Text no corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-107">Gets the collection of rich text content control objects in the body.</span></span> <span data-ttu-id="8e7e6-108">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-108">Read-only.</span></span>

      <span data-ttu-id="8e7e6-109">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-109">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Body#context:member'
    summary: <span data-ttu-id="8e7e6-110">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-110">The request context associated with the object.</span></span> <span data-ttu-id="8e7e6-111">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-111">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Body#font:member'
    summary: |-
      <span data-ttu-id="8e7e6-112">Obtém o formato de texto do corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-112">Gets the text format of the body.</span></span> <span data-ttu-id="8e7e6-113">Use isso para obter e definir o nome, tamanho, cor e outras propriedades da fonte.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-113">Use this to get and set font name, size, color and other properties.</span></span> <span data-ttu-id="8e7e6-114">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-114">Read-only.</span></span>

      <span data-ttu-id="8e7e6-115">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-115">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - 'word!Word.Font:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-116">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-116">Examples</span></span>

          ```javascript
          // Get the style and the font size, font name, and font color properties on the body object.
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load font and style information for the document body.
              context.load(body, 'font/size, font/name, font/color, style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Show the results of the load method. Here we show the
                  // property values on the body object.
                  var results = 'Font size: ' + body.font.size +
                                '; Font name: ' + body.font.name +
                                '; Font color: ' + body.font.color +
                                '; Body style: ' + body.style;

                  console.log(results);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getHtml:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-117">Obtém uma representação HTML do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-117">Gets an HTML representation of the body object.</span></span> <span data-ttu-id="8e7e6-118">Quando renderizado em uma página da Web ou em um visualizador de HTML, a formatação será uma correspondência próxima, mas não exata, da formatação do documento.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-118">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document.</span></span> <span data-ttu-id="8e7e6-119">Este método não retorna o mesmo HTML para o mesmo documento em diferentes plataformas (Windows, Mac, Word para a Web, etc.).</span><span class="sxs-lookup"><span data-stu-id="8e7e6-119">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, Word for the web, etc.).</span></span> <span data-ttu-id="8e7e6-120">Se você precisar de fidelidade exata ou consistência entre plataformas, use `Body.getOoxml()` e converta o XML RETORNADO em HTML.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-120">If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="8e7e6-121">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-121">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getHtml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-122">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-122">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the HTML contents of the body.
              var bodyHTML = body.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body HTML contents: " + bodyHTML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getOoxml:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-123">Obtém a representação OOXML (Office Open XML) do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-123">Gets the OOXML (Office Open XML) representation of the body object.</span></span>

      <span data-ttu-id="8e7e6-124">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-124">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getOoxml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-125">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-125">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the OOXML contents of the body.
              var bodyOOXML = body.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body OOXML contents: " + bodyOOXML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#inlinePictures:member'
    summary: |-
      <span data-ttu-id="8e7e6-126">Obtém a coleção de objetos InlinePicture no corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-126">Gets the collection of InlinePicture objects in the body.</span></span> <span data-ttu-id="8e7e6-127">A coleção não inclui imagens flutuantes.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-127">The collection does not include floating images.</span></span> <span data-ttu-id="8e7e6-128">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-128">Read-only.</span></span>

      <span data-ttu-id="8e7e6-129">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-129">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - 'word!Word.InlinePictureCollection:class'
  - uid: 'word!Word.Body#insertBreak:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-130">Insere uma quebra no local especificado no documento principal.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-130">Inserts a break at the specified location in the main document.</span></span>

      <span data-ttu-id="8e7e6-131">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-131">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-132">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-132">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (ctx) {

              // Create a proxy object for the document body.
              var body = ctx.document.body;

              // Queue a command to insert a page break at the start of the document body.
              body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  console.log('Added a page break at the start of the document body.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakType
          description: <span data-ttu-id="8e7e6-133">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-133">Required.</span></span> <span data-ttu-id="8e7e6-134">O tipo de quebra a adicionar ao corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-134">The break type to add to the body.</span></span>
          type:
            - 'word!Word.BreakType:enum'
        - id: insertLocation
          description: <span data-ttu-id="8e7e6-135">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-135">Required.</span></span> <span data-ttu-id="8e7e6-136">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-136">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertBreak:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-137">Insere uma quebra no local especificado no documento principal.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-137">Inserts a break at the specified location in the main document.</span></span>

      <span data-ttu-id="8e7e6-138">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-138">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakTypeString
          description: <span data-ttu-id="8e7e6-139">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-139">Required.</span></span> <span data-ttu-id="8e7e6-140">O tipo de quebra a adicionar ao corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-140">The break type to add to the body.</span></span>
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: <span data-ttu-id="8e7e6-141">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-141">Required.</span></span> <span data-ttu-id="8e7e6-142">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-142">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertContentControl:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-143">Quebra o objeto Body com um controle de conteúdo de rich text.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-143">Wraps the body object with a Rich Text content control.</span></span>

      <span data-ttu-id="8e7e6-144">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-144">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-145">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-145">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to wrap the body in a content control.
              body.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the body in a content control.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#insertFileFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-146">Insere um documento no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-146">Inserts a document into the body at the specified location.</span></span>

      <span data-ttu-id="8e7e6-147">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-147">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-148">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-148">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert base64 encoded .docx at the beginning of the content body.
              // You will need to implement getBase64() to pass in a string of a base64 encoded docx file.
              body.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: <span data-ttu-id="8e7e6-149">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-149">Required.</span></span> <span data-ttu-id="8e7e6-150">O conteúdo codificado em Base64 de um arquivo. docx.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-150">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="8e7e6-151">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-151">Required.</span></span> <span data-ttu-id="8e7e6-152">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-152">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertFileFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-153">Insere um documento no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-153">Inserts a document into the body at the specified location.</span></span>

      <span data-ttu-id="8e7e6-154">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-154">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="8e7e6-155">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-155">Required.</span></span> <span data-ttu-id="8e7e6-156">O conteúdo codificado em Base64 de um arquivo. docx.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-156">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="8e7e6-157">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-157">Required.</span></span> <span data-ttu-id="8e7e6-158">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-158">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertHtml:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-159">Insere HTML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-159">Inserts HTML at the specified location.</span></span>

      <span data-ttu-id="8e7e6-160">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-160">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-161">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-161">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert HTML in to the beginning of the body.
              body.insertHtml(
                  '<strong>This is text inserted with body.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: <span data-ttu-id="8e7e6-162">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-162">Required.</span></span> <span data-ttu-id="8e7e6-163">O HTML a inserir no documento.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-163">The HTML to be inserted in the document.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="8e7e6-164">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-164">Required.</span></span> <span data-ttu-id="8e7e6-165">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-165">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertHtml:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-166">Insere HTML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-166">Inserts HTML at the specified location.</span></span>

      <span data-ttu-id="8e7e6-167">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-167">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: html
          description: <span data-ttu-id="8e7e6-168">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-168">Required.</span></span> <span data-ttu-id="8e7e6-169">O HTML a inserir no documento.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-169">The HTML to be inserted in the document.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="8e7e6-170">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-170">Required.</span></span> <span data-ttu-id="8e7e6-171">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-171">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertInlinePictureFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-172">Insere uma imagem no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-172">Inserts a picture into the body at the specified location.</span></span>

      <span data-ttu-id="8e7e6-173">\[[Conjunto de APIs: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-173">\[ [API set: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-174">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-174">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert OOXML in to the beginning of the body.
              body.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('OOXML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
          // https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml

          // The Word-Add-in-DocumentAssembly sample shows how you can use this API to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="8e7e6-175">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-175">Required.</span></span> <span data-ttu-id="8e7e6-176">A imagem em codificação de Base 64 a inserir no corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-176">The base64 encoded image to be inserted in the body.</span></span>
          type:
            - string
        - id: insertLocation
          description: <span data-ttu-id="8e7e6-177">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-177">Required.</span></span> <span data-ttu-id="8e7e6-178">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-178">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertInlinePictureFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-179">Insere uma imagem no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-179">Inserts a picture into the body at the specified location.</span></span>

      <span data-ttu-id="8e7e6-180">\[[Conjunto de APIs: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-180">\[ [API set: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: ''
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="8e7e6-181">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-181">Required.</span></span> <span data-ttu-id="8e7e6-182">A imagem em codificação de Base 64 a inserir no corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-182">The base64 encoded image to be inserted in the body.</span></span>
          type:
            - string
        - id: insertLocationString
          description: <span data-ttu-id="8e7e6-183">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-183">Required.</span></span> <span data-ttu-id="8e7e6-184">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-184">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertOoxml:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-185">Insere um formato OOXML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-185">Inserts OOXML at the specified location.</span></span>

      <span data-ttu-id="8e7e6-186">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-186">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="8e7e6-187">Obrigatória.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-187">Required.</span></span> <span data-ttu-id="8e7e6-188">O formato OOXML a inserir.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-188">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="8e7e6-189">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-189">Required.</span></span> <span data-ttu-id="8e7e6-190">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-190">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertOoxml:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-191">Insere um formato OOXML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-191">Inserts OOXML at the specified location.</span></span>

      <span data-ttu-id="8e7e6-192">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-192">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="8e7e6-193">Obrigatória.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-193">Required.</span></span> <span data-ttu-id="8e7e6-194">O formato OOXML a inserir.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-194">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="8e7e6-195">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-195">Required.</span></span> <span data-ttu-id="8e7e6-196">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-196">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertParagraph:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-197">Insere um parágrafo no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-197">Inserts a paragraph at the specified location.</span></span>

      <span data-ttu-id="8e7e6-198">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-198">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-199">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-199">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              body.insertParagraph('Content of a new paragraph', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added at the end of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample shows how you can use the insertParagraph method to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
              let paragraph = context.document.body.insertParagraph("Timeline", "End");
              paragraph.style = "Heading 2";
              let paragraph2 = context.document.body.insertParagraph("The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.", "End");
              paragraph2.style = "Normal";
              let paragraph3 = context.document.body.insertParagraph("Project Costs by Phase", "End");
              paragraph3.style = "Heading 2";
              // Note a content control with the title of "ProjectCosts" is added. Content will be replaced later.
              let paragraph4 = context.document.body.insertParagraph("<Add Project Costs Here>", "End");
              paragraph4.style = "Normal";
              paragraph4.font.highlightColor = "#FFFF00";
              let contentControl = paragraph4.insertContentControl();
              contentControl.title = "ProjectCosts";
              let paragraph5 = context.document.body.insertParagraph("Project Team", "End");
              paragraph5.style = "Heading 2";
              paragraph5.font.highlightColor = "#FFFFFF";
              let paragraph6 = context.document.body.insertParagraph("Terms of Work", "End");
              paragraph6.style = "Heading 1";
              let paragraph7 = context.document.body.insertParagraph("Contractor shall provide the Services and Deliverable(s) as follows:", "End");
              paragraph7.style = "Normal";
              let paragraph8 = context.document.body.insertParagraph("Out-of-Pocket Expenses / Invoice Procedures", "End");
              paragraph8.style = "Heading 2";
              let paragraph9 = context.document.body.insertParagraph("Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.", "End");
              paragraph9.style = "Normal";
              // Insert a page break at the end of the document.
              context.document.body.insertBreak("Page", "End");

              await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="8e7e6-200">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-200">Required.</span></span> <span data-ttu-id="8e7e6-201">O texto do parágrafo a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-201">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: <span data-ttu-id="8e7e6-202">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-202">Required.</span></span> <span data-ttu-id="8e7e6-203">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-203">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertParagraph:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-204">Insere um parágrafo no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-204">Inserts a paragraph at the specified location.</span></span>

      <span data-ttu-id="8e7e6-205">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-205">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="8e7e6-206">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-206">Required.</span></span> <span data-ttu-id="8e7e6-207">O texto do parágrafo a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-207">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: <span data-ttu-id="8e7e6-208">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-208">Required.</span></span> <span data-ttu-id="8e7e6-209">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-209">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertText:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-210">Insere texto no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-210">Inserts text into the body at the specified location.</span></span>

      <span data-ttu-id="8e7e6-211">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-211">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-212">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-212">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert text in to the beginning of the body.
              body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="8e7e6-213">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-213">Required.</span></span> <span data-ttu-id="8e7e6-214">Texto a inserir.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-214">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="8e7e6-215">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-215">Required.</span></span> <span data-ttu-id="8e7e6-216">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-216">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertText:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-217">Insere texto no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-217">Inserts text into the body at the specified location.</span></span>

      <span data-ttu-id="8e7e6-218">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-218">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: text
          description: <span data-ttu-id="8e7e6-219">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-219">Required.</span></span> <span data-ttu-id="8e7e6-220">Texto a inserir.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-220">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="8e7e6-221">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-221">Required.</span></span> <span data-ttu-id="8e7e6-222">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-222">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#load:member(1)'
    summary: <span data-ttu-id="8e7e6-223">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-223">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8e7e6-224">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-224">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="8e7e6-225">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="8e7e6-225">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="8e7e6-226">`load(option?: string | string[]): Word.Body`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-226">`load(option?: string | string[]): Word.Body` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="8e7e6-227">`load(option?: { select?: string; expand?: string; }): Word.Body`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-227">`load(option?: { select?: string; expand?: string; }): Word.Body` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="8e7e6-228">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-228">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body` - Only available on collection types.</span></span> <span data-ttu-id="8e7e6-229">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-229">It is similar to the preceding signature.</span></span> <span data-ttu-id="8e7e6-230">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-230">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8e7e6-231">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-231">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8e7e6-232">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-232">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.BodyLoadOptions): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.BodyLoadOptions:interface'
  - uid: 'word!Word.Body#load:member(2)'
    summary: <span data-ttu-id="8e7e6-233">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-233">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8e7e6-234">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-234">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="8e7e6-235">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-235">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'word!Word.Body#load:member(3)'
    summary: <span data-ttu-id="8e7e6-236">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-236">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8e7e6-237">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-237">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="8e7e6-238">Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-238">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.Body#paragraphs:member'
    summary: |-
      <span data-ttu-id="8e7e6-239">Obtém a coleção de objetos Paragraph no corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-239">Gets the collection of paragraph objects in the body.</span></span> <span data-ttu-id="8e7e6-240">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-240">Read-only.</span></span>

      <span data-ttu-id="8e7e6-241">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-241">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-242">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-242">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
  - uid: 'word!Word.Body#parentContentControl:member'
    summary: |-
      <span data-ttu-id="8e7e6-243">Obtém o controle de conteúdo que inclui o corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-243">Gets the content control that contains the body.</span></span> <span data-ttu-id="8e7e6-244">Gera um erro se não houver um controle de conteúdo pai.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-244">Throws an error if there isn't a parent content control.</span></span> <span data-ttu-id="8e7e6-245">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-245">Read-only.</span></span>

      <span data-ttu-id="8e7e6-246">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-246">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Body#search:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-247">Realiza uma pesquisa com o Searchoptions especificado no escopo do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-247">Performs a search with the specified SearchOptions on the scope of the body object.</span></span> <span data-ttu-id="8e7e6-248">Os resultados da pesquisa são uma coleção de objetos Range.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-248">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="8e7e6-249">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-249">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-250">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-250">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to search the document.
              var searchResults = context.document.body.search('video', {matchCase: false});

              // Queue a command to load the results.
              context.load(searchResults, 'text, font');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  var results = 'Found count: ' + searchResults.items.length +
                                '; we highlighted the results.';

                  // Queue a command to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                    searchResults.items[i].font.color = '#FF0000'    // Change color to Red
                    searchResults.items[i].font.highlightColor = '#FFFF00';
                    searchResults.items[i].font.bold = true;
                  }

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log(results);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample provides another example of how to search a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
            let results = context.document.body.search("Online");
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "yellow";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
            // (i.e. use wildcards).
            let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "red";
              results.items[i].font.color = "white";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
      parameters:
        - id: searchText
          description: <span data-ttu-id="8e7e6-251">Obrigatória.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-251">Required.</span></span> <span data-ttu-id="8e7e6-252">O texto da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-252">The search text.</span></span> <span data-ttu-id="8e7e6-253">Pode ter no máximo 255 caracteres.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-253">Can be a maximum of 255 characters.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="8e7e6-254">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-254">Optional.</span></span> <span data-ttu-id="8e7e6-255">Opções da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-255">Options for the search.</span></span>
          type:
            - 'word!Word.Body#search~0:complex'
  - uid: 'word!Word.Body#select:member(1)'
    summary: |-
      <span data-ttu-id="8e7e6-256">Seleciona o corpo e navega na interface do usuário do Word até ele.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-256">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="8e7e6-257">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-257">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-258">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-258">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to select the document body. The Word UI will
              // move to the selected document body.
              body.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="8e7e6-259">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-259">Optional.</span></span> <span data-ttu-id="8e7e6-260">O modo de seleção pode ser ''Select'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-260">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="8e7e6-261">''Select'' é o padrão.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-261">''Select'' is the default.</span></span>'
          type:
            - 'word!Word.SelectionMode:enum'
  - uid: 'word!Word.Body#select:member(2)'
    summary: |-
      <span data-ttu-id="8e7e6-262">Seleciona o corpo e navega na interface do usuário do Word até ele.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-262">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="8e7e6-263">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-263">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="8e7e6-264">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-264">Optional.</span></span> <span data-ttu-id="8e7e6-265">O modo de seleção pode ser ''Select'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-265">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="8e7e6-266">''Select'' é o padrão.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-266">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: 'word!Word.Body#set:member(1)'
    summary: '<span data-ttu-id="8e7e6-267">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-267">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="8e7e6-268">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-268">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="8e7e6-269">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="8e7e6-269">This method has the following additional signature:</span></span>

      `set(properties: Word.Body): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.BodyUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="8e7e6-270">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-270">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'word!Word.Interfaces.BodyUpdateData:interface'
        - id: options
          description: <span data-ttu-id="8e7e6-271">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-271">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Body#set:member(2)'
    summary: '<span data-ttu-id="8e7e6-272">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-272">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Body): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Body:class'
  - uid: 'word!Word.Body#style:member'
    summary: |-
      <span data-ttu-id="8e7e6-p147">Obtém ou define o nome do estilo usado para o corpo. Use esta propriedade de estilos personalizados e nomes de estilo localizados. Para usar os estilos internos que são portáteis entre localidades, confira a propriedade "styleBuiltIn".</span><span class="sxs-lookup"><span data-stu-id="8e7e6-p147">Gets or sets the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="8e7e6-276">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-276">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'word!Word.Body#text:member'
    summary: |-
      <span data-ttu-id="8e7e6-277">Obtém o texto do corpo.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-277">Gets the text of the body.</span></span> <span data-ttu-id="8e7e6-278">Usa o método insertText para inserir texto.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-278">Use the insertText method to insert text.</span></span> <span data-ttu-id="8e7e6-279">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-279">Read-only.</span></span>

      <span data-ttu-id="8e7e6-280">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8e7e6-280">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8e7e6-281">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8e7e6-281">Examples</span></span>

          ```javascript
          // Get the text property on the body object
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load the text in document body.
              context.load(body, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body contents: " + body.text);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#toJSON:member(1)'
    summary: '<span data-ttu-id="8e7e6-282">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8e7e6-282">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8e7e6-283">.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-283"></span></span> <span data-ttu-id="8e7e6-284">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8e7e6-284"></span></span><!-- --><span data-ttu-id="8e7e6-285">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Word. Body original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Word.Interfaces.BodyData`</span><span class="sxs-lookup"><span data-stu-id="8e7e6-285">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Body object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BodyData`</span></span><!-- --><span data-ttu-id="8e7e6-286">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-286">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.BodyData;'
      return:
        type:
          - 'word!Word.Interfaces.BodyData:interface'
        description: ''
  - uid: 'word!Word.Body#track:member(1)'
    summary: '<span data-ttu-id="8e7e6-287">Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-287">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="8e7e6-288">Essa chamada é uma abreviação de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="8e7e6-288">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="8e7e6-289">Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-289">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
  - uid: 'word!Word.Body#untrack:member(1)'
    summary: '<span data-ttu-id="8e7e6-290">Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-290">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="8e7e6-291">Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="8e7e6-291">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="8e7e6-292">Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-292">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="8e7e6-293">Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.</span><span class="sxs-lookup"><span data-stu-id="8e7e6-293">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Font:class'
    name: Word.Font
  - uid: 'word!Word.Body#getHtml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Body#getOoxml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.InlinePictureCollection:class'
    name: Word.InlinePictureCollection
  - uid: 'word!Word.BreakType:enum'
    name: Word.BreakType
  - uid: 'word!Word.InsertLocation:enum'
    name: Word.InsertLocation
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.InlinePicture:class'
    name: Word.InlinePicture
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.Body:class'
    name: Word.Body
  - uid: 'word!Word.Interfaces.BodyLoadOptions:interface'
    name: Word.Interfaces.BodyLoadOptions
  - uid: 'word!Word.ParagraphCollection:class'
    name: Word.ParagraphCollection
  - uid: 'word!Word.RangeCollection:class'
    name: Word.RangeCollection
  - uid: 'word!Word.Body#search~0:complex'
    name: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    fullName: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    spec.typeScript:
      - uid: 'word!Word.SearchOptions:class'
        name: Word.SearchOptions
        fullName: Word.SearchOptions
      - name: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
        fullName: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
  - uid: 'word!Word.SelectionMode:enum'
    name: Word.SelectionMode
  - uid: 'word!Word.Interfaces.BodyUpdateData:interface'
    name: Interfaces.BodyUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.BodyData:interface'
    name: Word.Interfaces.BodyData