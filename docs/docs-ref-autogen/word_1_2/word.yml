### YamlMime:TSPackage
uid: word!
name: word
type: package
summary: ''
enums:
- word!Word.Alignment:enum
- word!Word.BodyType:enum
- word!Word.BorderLocation:enum
- word!Word.BorderType:enum
- word!Word.BreakType:enum
- word!Word.CellPaddingLocation:enum
- word!Word.ContentControlAppearance:enum
- word!Word.ContentControlType:enum
- word!Word.DocumentPropertyType:enum
- word!Word.ErrorCodes:enum
- word!Word.EventType:enum
- word!Word.FileContentFormat:enum
- word!Word.HeaderFooterType:enum
- word!Word.ImageFormat:enum
- word!Word.InsertLocation:enum
- word!Word.ListBullet:enum
- word!Word.ListLevelType:enum
- word!Word.ListNumbering:enum
- word!Word.LocationRelation:enum
- word!Word.RangeLocation:enum
- word!Word.SelectionMode:enum
- word!Word.Style:enum
- word!Word.TapObjectType:enum
- word!Word.UnderlineType:enum
- word!Word.VerticalAlignment:enum
classes:
- word!Word.Body:class
- word!Word.ContentControl:class
- word!Word.ContentControlCollection:class
- word!Word.Document:class
- word!Word.Font:class
- word!Word.InlinePicture:class
- word!Word.InlinePictureCollection:class
- word!Word.Paragraph:class
- word!Word.ParagraphCollection:class
- word!Word.Range:class
- word!Word.RangeCollection:class
- word!Word.RequestContext:class
- word!Word.SearchOptions:class
- word!Word.Section:class
- word!Word.SectionCollection:class
interfaces:
- word!Word.Interfaces.BodyData:interface
- word!Word.Interfaces.BodyLoadOptions:interface
- word!Word.Interfaces.BodyUpdateData:interface
- word!Word.Interfaces.CollectionLoadOptions:interface
- word!Word.Interfaces.ContentControlCollectionData:interface
- word!Word.Interfaces.ContentControlCollectionLoadOptions:interface
- word!Word.Interfaces.ContentControlCollectionUpdateData:interface
- word!Word.Interfaces.ContentControlData:interface
- word!Word.Interfaces.ContentControlLoadOptions:interface
- word!Word.Interfaces.ContentControlUpdateData:interface
- word!Word.Interfaces.CustomPropertyCollectionData:interface
- word!Word.Interfaces.CustomPropertyCollectionUpdateData:interface
- word!Word.Interfaces.CustomPropertyData:interface
- word!Word.Interfaces.CustomPropertyUpdateData:interface
- word!Word.Interfaces.DocumentCreatedData:interface
- word!Word.Interfaces.DocumentCreatedUpdateData:interface
- word!Word.Interfaces.DocumentData:interface
- word!Word.Interfaces.DocumentLoadOptions:interface
- word!Word.Interfaces.DocumentPropertiesData:interface
- word!Word.Interfaces.DocumentPropertiesUpdateData:interface
- word!Word.Interfaces.DocumentUpdateData:interface
- word!Word.Interfaces.FontData:interface
- word!Word.Interfaces.FontLoadOptions:interface
- word!Word.Interfaces.FontUpdateData:interface
- word!Word.Interfaces.InlinePictureCollectionData:interface
- word!Word.Interfaces.InlinePictureCollectionLoadOptions:interface
- word!Word.Interfaces.InlinePictureCollectionUpdateData:interface
- word!Word.Interfaces.InlinePictureData:interface
- word!Word.Interfaces.InlinePictureLoadOptions:interface
- word!Word.Interfaces.InlinePictureUpdateData:interface
- word!Word.Interfaces.ListCollectionData:interface
- word!Word.Interfaces.ListCollectionUpdateData:interface
- word!Word.Interfaces.ListData:interface
- word!Word.Interfaces.ListItemData:interface
- word!Word.Interfaces.ListItemUpdateData:interface
- word!Word.Interfaces.ParagraphCollectionData:interface
- word!Word.Interfaces.ParagraphCollectionLoadOptions:interface
- word!Word.Interfaces.ParagraphCollectionUpdateData:interface
- word!Word.Interfaces.ParagraphData:interface
- word!Word.Interfaces.ParagraphLoadOptions:interface
- word!Word.Interfaces.ParagraphUpdateData:interface
- word!Word.Interfaces.RangeCollectionData:interface
- word!Word.Interfaces.RangeCollectionLoadOptions:interface
- word!Word.Interfaces.RangeCollectionUpdateData:interface
- word!Word.Interfaces.RangeData:interface
- word!Word.Interfaces.RangeLoadOptions:interface
- word!Word.Interfaces.RangeUpdateData:interface
- word!Word.Interfaces.SearchOptionsData:interface
- word!Word.Interfaces.SearchOptionsLoadOptions:interface
- word!Word.Interfaces.SearchOptionsUpdateData:interface
- word!Word.Interfaces.SectionCollectionData:interface
- word!Word.Interfaces.SectionCollectionLoadOptions:interface
- word!Word.Interfaces.SectionCollectionUpdateData:interface
- word!Word.Interfaces.SectionData:interface
- word!Word.Interfaces.SectionLoadOptions:interface
- word!Word.Interfaces.SectionUpdateData:interface
- word!Word.Interfaces.TableBorderData:interface
- word!Word.Interfaces.TableBorderUpdateData:interface
- word!Word.Interfaces.TableCellCollectionData:interface
- word!Word.Interfaces.TableCellCollectionUpdateData:interface
- word!Word.Interfaces.TableCellData:interface
- word!Word.Interfaces.TableCellUpdateData:interface
- word!Word.Interfaces.TableCollectionData:interface
- word!Word.Interfaces.TableCollectionUpdateData:interface
- word!Word.Interfaces.TableData:interface
- word!Word.Interfaces.TableRowCollectionData:interface
- word!Word.Interfaces.TableRowCollectionUpdateData:interface
- word!Word.Interfaces.TableRowData:interface
- word!Word.Interfaces.TableRowUpdateData:interface
- word!Word.Interfaces.TableUpdateData:interface
functions:
- name: Word.run(objects, batch)
  uid: word!Word.run:function(1)
  package: word!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Word, usando o RequestContext de objetos API criados anteriormente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Uma matriz de objetos API criados anteriormente. A matriz será validada para garantir que todos os objetos compartilhem o mesmo contexto. O lote usará esse RequestContext compartilhado, o que significa que quaisquer alterações aplicadas a esses objetos serão escolhidas por "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Uma função que recebe um RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context.sync()"). O parâmetro context facilita as solicitações para o aplicativo Word. Como o add-in do Office e o aplicativo Word são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do Word a partir do complemento.
      type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Word.run(object, batch)
  uid: word!Word.run:function(2)
  package: word!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Word, usando o RequestContext de um objeto API criado anteriormente. Quando a promessa for resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Um objeto API criado anteriormente. O lote usará o mesmo RequestContext do objeto passado, o que significa que quaisquer alterações aplicadas ao objeto serão escolhidas por "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Uma função que recebe um RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context.sync()"). O parâmetro context facilita as solicitações para o aplicativo Word. Como o add-in do Office e o aplicativo Word são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do Word a partir do complemento.
      type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Word.run(batch)
  uid: word!Word.run:function(3)
  package: word!
  summary: Executa um script em lotes que executa ações no modelo de objeto do Word, usando um novo RequestContext. Quando a promessa for resolvida, todos os objetos rastreados que foram alocados automaticamente durante a execução serão liberados.
  remarks: >-
    Além dessa assinatura, o método também tem as seguintes assinaturas, que permitem que você retome o uso do contexto de solicitação de objetos criados anteriormente:


    run <T> (object: OfficeExtension.ClientObject, batch: (context: Word.RequestContext) =<!-- -->&gt; Promessa <T> ): Promessa <T> ;


    run <T> (objects: OfficeExtension.ClientObject \[ \] , batch: (context: Word.RequestContext) =<!-- -->&gt; Promessa <T> ): Promessa <T> ;
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Uma função que recebe um RequestContext e retorna uma promessa (normalmente, apenas o resultado de "context.sync()"). O parâmetro context facilita as solicitações para o aplicativo Word. Como o add-in do Office e o aplicativo Word são executados em dois processos diferentes, o RequestContext é necessário para obter acesso ao modelo de objeto do Word a partir do complemento.
      type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: c2e2edae126569ee96919562aa775f6c8e9efb92
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51290508"
