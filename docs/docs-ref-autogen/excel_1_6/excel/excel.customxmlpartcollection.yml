### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    summary: |-
      <span data-ttu-id="8f967-101">Uma coleção de partes XML personalizadas.</span><span class="sxs-lookup"><span data-stu-id="8f967-101">A collection of custom XML parts.</span></span>

      <span data-ttu-id="8f967-102">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f967-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartCollection#add:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#context:member'
      - 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#items:member'
      - 'excel!Excel.CustomXmlPartCollection#load:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#load:member(2)'
      - 'excel!Excel.CustomXmlPartCollection#load:member(3)'
      - 'excel!Excel.CustomXmlPartCollection#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPartCollection#add:member(1)'
    summary: |-
      <span data-ttu-id="8f967-103">Adiciona uma nova parte XML personalizada à pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="8f967-103">Adds a new custom XML part to the workbook.</span></span>

      <span data-ttu-id="8f967-104">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f967-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8f967-105">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8f967-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="8f967-106">Conteúdo XML.</span><span class="sxs-lookup"><span data-stu-id="8f967-106">XML content.</span></span> <span data-ttu-id="8f967-107">Deve ser um fragmento XML válido.</span><span class="sxs-lookup"><span data-stu-id="8f967-107">Must be a valid XML fragment.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#context:member'
    summary: <span data-ttu-id="8f967-108">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="8f967-108">The request context associated with the object.</span></span> <span data-ttu-id="8f967-109">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="8f967-109">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
    summary: |-
      <span data-ttu-id="8f967-110">Obtém uma nova coleção com escopo de partes XML personalizadas cujos namespaces correspondem ao namespace especificado.</span><span class="sxs-lookup"><span data-stu-id="8f967-110">Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.</span></span>

      <span data-ttu-id="8f967-111">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f967-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getByNamespace(namespaceUri)
    fullName: getByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8f967-112">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8f967-112">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
      parameters:
        - id: namespaceUri
          description: '<span data-ttu-id="8f967-113">Este deve ser um URI de esquema totalmente qualificado; por exemplo, "http://schemas.contoso.com/review/1.0".</span><span class="sxs-lookup"><span data-stu-id="8f967-113">This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".</span></span>'
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="8f967-114">Obtém o número de partes CustomXml na coleção.</span><span class="sxs-lookup"><span data-stu-id="8f967-114">Gets the number of CustomXml parts in the collection.</span></span>

      <span data-ttu-id="8f967-115">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f967-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="8f967-116">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="8f967-116">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="8f967-117">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f967-117">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8f967-118">Exemplos</span><span class="sxs-lookup"><span data-stu-id="8f967-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="8f967-119">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="8f967-119">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="8f967-120">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="8f967-120">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="8f967-121">Se o CustomXmlPart não existir, a propriedade isNull do objeto Return será true.</span><span class="sxs-lookup"><span data-stu-id="8f967-121">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="8f967-122">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f967-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="8f967-123">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="8f967-123">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#items:member'
    summary: <span data-ttu-id="8f967-124">Obtém os itens filhos carregados nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="8f967-124">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection#items~0:complex'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(1)'
    summary: <span data-ttu-id="8f967-125">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="8f967-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8f967-126">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="8f967-126">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="8f967-127">Fornece opções para as propriedades do objeto a ser carregado.</span><span class="sxs-lookup"><span data-stu-id="8f967-127">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.CustomXmlPartCollection#load~0:complex'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(2)'
    summary: <span data-ttu-id="8f967-128">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="8f967-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8f967-129">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="8f967-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="8f967-130">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="8f967-130">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(3)'
    summary: <span data-ttu-id="8f967-131">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="8f967-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8f967-132">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="8f967-132">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="8f967-133">`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="8f967-133">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.CustomXmlPartCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="8f967-134">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8f967-134">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8f967-135">.</span><span class="sxs-lookup"><span data-stu-id="8f967-135"></span></span> <span data-ttu-id="8f967-136">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8f967-136"></span></span><!-- --><span data-ttu-id="8f967-137">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto `Excel.CustomXmlPartCollection` original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.CustomXmlPartCollectionData`</span><span class="sxs-lookup"><span data-stu-id="8f967-137">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`</span></span><!-- --><span data-ttu-id="8f967-138">) que contém uma matriz de "itens" com cópias superficiais de qualquer propriedade carregada dos itens da coleção.</span><span class="sxs-lookup"><span data-stu-id="8f967-138">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    name: Excel.CustomXmlPartScopedCollection
  - uid: 'excel!Excel.CustomXmlPartCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPartCollection#items~0:complex'
    name: 'Excel.CustomXmlPart[]'
    fullName: 'Excel.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!Excel.CustomXmlPart:class'
        name: Excel.CustomXmlPart
        fullName: Excel.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    name: Excel.CustomXmlPartCollection
  - uid: 'excel!Excel.CustomXmlPartCollection#load~0:complex'
    name: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.CustomXmlPartCollectionLoadOptions:interface'
        name: Excel.Interfaces.CustomXmlPartCollectionLoadOptions
        fullName: Excel.Interfaces.CustomXmlPartCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.CustomXmlPartCollectionData:interface'
    name: Excel.Interfaces.CustomXmlPartCollectionData