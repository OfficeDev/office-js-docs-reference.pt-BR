### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Worksheet
    summary: |-
      <span data-ttu-id="47fc8-101">Uma planilha do Excel é uma grade de células.</span><span class="sxs-lookup"><span data-stu-id="47fc8-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="47fc8-102">Ele pode conter dados, tabelas, gráficos, etc. Para saber mais sobre o modelo de objeto de planilha, leia [trabalhar com planilhas usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="47fc8-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="47fc8-103">.</span><span class="sxs-lookup"><span data-stu-id="47fc8-103"></span></span>

      <span data-ttu-id="47fc8-104">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Worksheet.activate
      - excel.Excel.Worksheet.calculate
      - excel.Excel.Worksheet.charts
      - excel.Excel.Worksheet.context
      - excel.Excel.Worksheet.delete
      - excel.Excel.Worksheet.getCell
      - excel.Excel.Worksheet.getNext
      - excel.Excel.Worksheet.getNextOrNullObject
      - excel.Excel.Worksheet.getPrevious
      - excel.Excel.Worksheet.getPreviousOrNullObject
      - excel.Excel.Worksheet.getRange
      - excel.Excel.Worksheet.getUsedRange
      - excel.Excel.Worksheet.getUsedRangeOrNullObject
      - excel.Excel.Worksheet.id
      - excel.Excel.Worksheet.load
      - excel.Excel.Worksheet.load_1
      - excel.Excel.Worksheet.load_2
      - excel.Excel.Worksheet.name
      - excel.Excel.Worksheet.names
      - excel.Excel.Worksheet.pivotTables
      - excel.Excel.Worksheet.position
      - excel.Excel.Worksheet.protection
      - excel.Excel.Worksheet.set
      - excel.Excel.Worksheet.set_1
      - excel.Excel.Worksheet.tables
      - excel.Excel.Worksheet.toJSON
      - excel.Excel.Worksheet.visibility
  - uid: excel.Excel.Worksheet.activate
    summary: |-
      <span data-ttu-id="47fc8-105">Ative a planilha na interface do usuário do Excel.</span><span class="sxs-lookup"><span data-stu-id="47fc8-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="47fc8-106">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-107">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.calculate
    summary: |-
      <span data-ttu-id="47fc8-108">Calcula todas as células em uma planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-108">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="47fc8-109">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="47fc8-110">True, para marcar tudo como sujo.</span><span class="sxs-lookup"><span data-stu-id="47fc8-110">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.charts
    summary: |-
      <span data-ttu-id="47fc8-111">Retorna uma coleção de gráficos que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-111">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="47fc8-112">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-112">Read-only.</span></span>

      <span data-ttu-id="47fc8-113">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
  - uid: excel.Excel.Worksheet.context
    summary: <span data-ttu-id="47fc8-114">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="47fc8-114">The request context associated with the object.</span></span> <span data-ttu-id="47fc8-115">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="47fc8-115">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Worksheet.delete
    summary: |-
      <span data-ttu-id="47fc8-116">Exclui a planilha da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="47fc8-116">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="47fc8-117">Observe que, se a visibilidade da planilha estiver definida como "VeryHidden", a operação de exclusão falhará com uma Generalexception.</span><span class="sxs-lookup"><span data-stu-id="47fc8-117">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="47fc8-118">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-119">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-119">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.getCell
    summary: |-
      <span data-ttu-id="47fc8-120">Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna.</span><span class="sxs-lookup"><span data-stu-id="47fc8-120">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="47fc8-121">A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-121">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="47fc8-122">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-123">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-123">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="47fc8-124">O número da linha da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="47fc8-124">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="47fc8-125">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="47fc8-125">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="47fc8-126">O número da coluna da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="47fc8-126">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="47fc8-127">Indexado com zero.</span><span class="sxs-lookup"><span data-stu-id="47fc8-127">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Worksheet.getNext
    summary: |-
      <span data-ttu-id="47fc8-128">Obtém a planilha que segue esta.</span><span class="sxs-lookup"><span data-stu-id="47fc8-128">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="47fc8-129">Se não houver planilhas após esta, este método gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="47fc8-129">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="47fc8-130">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-130">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-131">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-131">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="47fc8-132">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-132">Optional.</span></span> <span data-ttu-id="47fc8-133">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-133">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getNextOrNullObject
    summary: |-
      <span data-ttu-id="47fc8-134">Obtém a planilha que segue esta.</span><span class="sxs-lookup"><span data-stu-id="47fc8-134">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="47fc8-135">Se não houver planilhas após esta, este método retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="47fc8-135">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="47fc8-136">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-136">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="47fc8-137">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-137">Optional.</span></span> <span data-ttu-id="47fc8-138">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-138">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPrevious
    summary: |-
      <span data-ttu-id="47fc8-139">Obtém a planilha que precede esta.</span><span class="sxs-lookup"><span data-stu-id="47fc8-139">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="47fc8-140">Se não houver planilhas anteriores, este método gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="47fc8-140">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="47fc8-141">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-141">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-142">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-142">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="47fc8-143">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-143">Optional.</span></span> <span data-ttu-id="47fc8-144">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-144">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPreviousOrNullObject
    summary: |-
      <span data-ttu-id="47fc8-145">Obtém a planilha que precede esta.</span><span class="sxs-lookup"><span data-stu-id="47fc8-145">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="47fc8-146">Se não houver planilhas anteriores, este método retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="47fc8-146">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="47fc8-147">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-147">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="47fc8-148">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-148">Optional.</span></span> <span data-ttu-id="47fc8-149">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-149">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getRange
    summary: |-
      <span data-ttu-id="47fc8-150">Obtém o objeto Range, representando um único bloco retangular de células, especificado pelo endereço ou nome.</span><span class="sxs-lookup"><span data-stu-id="47fc8-150">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="47fc8-151">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-151">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-152">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-152">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="47fc8-153">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-153">Optional.</span></span> <span data-ttu-id="47fc8-154">A cadeia de caracteres que representa o endereço ou o nome do intervalo.</span><span class="sxs-lookup"><span data-stu-id="47fc8-154">The string representing the address or name of the range.</span></span> <span data-ttu-id="47fc8-155">Por exemplo, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="47fc8-155">For example, "A1:B2".</span></span> <span data-ttu-id="47fc8-156">Caso não seja especificado, todo o intervalo da planilha será retornado.</span><span class="sxs-lookup"><span data-stu-id="47fc8-156">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: excel.Excel.Worksheet.getUsedRange
    summary: |-
      <span data-ttu-id="47fc8-157">O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-157">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="47fc8-158">Se a planilha inteira estiver em branco, essa função retornará a célula superior esquerda (ou seja, *não* gerará um erro).</span><span class="sxs-lookup"><span data-stu-id="47fc8-158">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="47fc8-159">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-159">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-160">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-160">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="47fc8-161">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-161">Optional.</span></span> <span data-ttu-id="47fc8-162">Se true, considera apenas as células com valores como células usadas (ignorando a formatação).</span><span class="sxs-lookup"><span data-stu-id="47fc8-162">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="47fc8-163">\[Conjunto de APIs: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-163">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="47fc8-p119">O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas. Se a planilha inteira estiver em branco, esta função retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="47fc8-p119">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="47fc8-166">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-166">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="47fc8-167">Opcional.</span><span class="sxs-lookup"><span data-stu-id="47fc8-167">Optional.</span></span> <span data-ttu-id="47fc8-168">Considera apenas as células com valores como células usadas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-168">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Worksheet.id
    summary: |-
      <span data-ttu-id="47fc8-p121">Retorna um valor que identifica de forma exclusiva a planilha em uma determinada pasta de trabalho. O valor do identificador permanece o mesmo, ainda que a planilha seja renomeada ou movida. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-p121">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="47fc8-172">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-172">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.load
    summary: <span data-ttu-id="47fc8-173">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="47fc8-173">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="47fc8-174">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="47fc8-174">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="47fc8-175">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="47fc8-175">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="47fc8-176">`load(option?: string | string[]): Excel.Worksheet`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-176">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="47fc8-177">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-177">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="47fc8-178">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="47fc8-178">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="47fc8-179">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="47fc8-179">It is similar to the preceding signature.</span></span> <span data-ttu-id="47fc8-180">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="47fc8-180">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="47fc8-181">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="47fc8-181">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="47fc8-182">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="47fc8-182">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetLoadOptions
  - uid: excel.Excel.Worksheet.load_1
    summary: <span data-ttu-id="47fc8-183">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="47fc8-183">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="47fc8-184">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="47fc8-184">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="47fc8-185">Exemplos</span><span class="sxs-lookup"><span data-stu-id="47fc8-185">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="47fc8-186">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-186">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.Worksheet.load_2
    summary: <span data-ttu-id="47fc8-187">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="47fc8-187">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="47fc8-188">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="47fc8-188">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="47fc8-189">Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="47fc8-189">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Worksheet.name
    summary: |-
      <span data-ttu-id="47fc8-190">O nome de exibição da planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-190">The display name of the worksheet.</span></span>

      <span data-ttu-id="47fc8-191">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-191">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.names
    summary: |-
      <span data-ttu-id="47fc8-192">Coleção de nomes com escopo para a planilha atual.</span><span class="sxs-lookup"><span data-stu-id="47fc8-192">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="47fc8-193">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-193">Read-only.</span></span>

      <span data-ttu-id="47fc8-194">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-194">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - excel.Excel.NamedItemCollection
  - uid: excel.Excel.Worksheet.pivotTables
    summary: |-
      <span data-ttu-id="47fc8-195">Coleção de Tabelas Dinâmicas que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-195">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="47fc8-196">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-196">Read-only.</span></span>

      <span data-ttu-id="47fc8-197">\[[Conjunto de APIs: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-197">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - excel.Excel.PivotTableCollection
  - uid: excel.Excel.Worksheet.position
    summary: |-
      <span data-ttu-id="47fc8-198">A posição baseada em zero da planilha na pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="47fc8-198">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="47fc8-199">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-199">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.protection
    summary: |-
      <span data-ttu-id="47fc8-200">Retorna o objeto de proteção da planilha para uma planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-200">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="47fc8-201">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-201">Read-only.</span></span>

      <span data-ttu-id="47fc8-202">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-202">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
  - uid: excel.Excel.Worksheet.set
    summary: '<span data-ttu-id="47fc8-203">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="47fc8-203">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="47fc8-204">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="47fc8-204">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="47fc8-205">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="47fc8-205">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="47fc8-206">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="47fc8-206">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: <span data-ttu-id="47fc8-207">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-207">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Worksheet.set_1
    summary: '<span data-ttu-id="47fc8-208">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="47fc8-208">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.tables
    summary: |-
      <span data-ttu-id="47fc8-209">Coleção de tabelas que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-209">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="47fc8-210">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="47fc8-210">Read-only.</span></span>

      <span data-ttu-id="47fc8-211">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-211">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
  - uid: excel.Excel.Worksheet.toJSON
    summary: '<span data-ttu-id="47fc8-212">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="47fc8-212">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="47fc8-213">.</span><span class="sxs-lookup"><span data-stu-id="47fc8-213"></span></span> <span data-ttu-id="47fc8-214">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="47fc8-214"></span></span><!-- --><span data-ttu-id="47fc8-215">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. Worksheet original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="47fc8-215">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="47fc8-216">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="47fc8-216">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel.Excel.Worksheet.visibility
    summary: |-
      <span data-ttu-id="47fc8-217">A visibilidade da planilha.</span><span class="sxs-lookup"><span data-stu-id="47fc8-217">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="47fc8-218">\[[Conjunto de APIs: ExcelApi 1,1 para ler a visibilidade; 1,2 para configurá-la.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="47fc8-218">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="47fc8-219">\]</span><span class="sxs-lookup"><span data-stu-id="47fc8-219"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"