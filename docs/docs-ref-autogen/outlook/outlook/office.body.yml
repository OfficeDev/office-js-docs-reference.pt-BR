### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Body:interface'
    summary: |-
      O objeto Body fornece métodos para adicionar e atualizar o conteúdo da mensagem ou compromisso. Ele é retornado na Propriedade Body do item selecionado.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura
    name: Office.Body
    fullName: Office.Body
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Body#appendOnSendAsync:member(1)'
      - 'outlook!Office.Body#appendOnSendAsync:member(2)'
      - 'outlook!Office.Body#getAsync:member(1)'
      - 'outlook!Office.Body#getAsync:member(2)'
      - 'outlook!Office.Body#getTypeAsync:member(1)'
      - 'outlook!Office.Body#getTypeAsync:member(2)'
      - 'outlook!Office.Body#prependAsync:member(1)'
      - 'outlook!Office.Body#prependAsync:member(2)'
      - 'outlook!Office.Body#setAsync:member(1)'
      - 'outlook!Office.Body#setAsync:member(2)'
      - 'outlook!Office.Body#setSelectedDataAsync:member(1)'
      - 'outlook!Office.Body#setSelectedDataAsync:member(2)'
      - 'outlook!Office.Body#setSignatureAsync:member(1)'
      - 'outlook!Office.Body#setSignatureAsync:member(2)'
  - uid: 'outlook!Office.Body#appendOnSendAsync:member(1)'
    summary: |-
      Anexa em enviar o conteúdo especificado para o final do corpo do item, após qualquer assinatura.

      Se o usuário estiver executando suplementos que implementam o [recurso ao enviar usando \` o createsend \` no manifesto](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->, Append ao enviar é executado antes da funcionalidade ao enviar.

      **Importante**: para usar`appendOnSendAsync`<!-- -->, a `AppendOnSend` permissão estendida deve ser incluída no `ExtendedPermissions` nó do manifesto.

      **Observação**: para limpar dados de uma `appendOnSendAsync` chamada anterior, você pode chamá-lo novamente com o `data` parâmetro definido como`null`<!-- -->.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 5.000 caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` , mas o corpo da mensagem está em texto sem formatação.

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.body.appendOnSendAsync(
          "P.S. This text was appended on send.",
          {coercionType: Office.CoercionType.Html},
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          }
      );
      ```
    isPreview: true
    name: 'appendOnSendAsync(data, options, callback)'
    fullName: 'appendOnSendAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendOnSendAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres a ser adicionada ao final do corpo. A cadeia de caracteres está limitada a 5.000 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `coercionType`<!-- -->: O formato desejado para os dados a serem acrescentados. A cadeia de caracteres no parâmetro `data` será convertida para este formato.'
          type:
            - 'outlook!Office.Body#appendOnSendAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#appendOnSendAsync~1:complex'
  - uid: 'outlook!Office.Body#appendOnSendAsync:member(2)'
    summary: |-
      Anexa em enviar o conteúdo especificado para o final do corpo do item, após qualquer assinatura.

      Se o usuário estiver executando suplementos que implementam o [recurso ao enviar usando \` o createsend \` no manifesto](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->, Append ao enviar é executado antes da funcionalidade ao enviar.

      **Importante**: para usar`appendOnSendAsync`<!-- -->, a `AppendOnSend` permissão estendida deve ser incluída no `ExtendedPermissions` nó do manifesto.

      **Observação**: para limpar dados de uma `appendOnSendAsync` chamada anterior, você pode chamá-lo novamente com o `data` parâmetro definido como`null`<!-- -->.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 5.000 caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` , mas o corpo da mensagem está em texto sem formatação.
    isPreview: true
    name: 'appendOnSendAsync(data, callback)'
    fullName: 'appendOnSendAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendOnSendAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres a ser adicionada ao final do corpo. A cadeia de caracteres está limitada a 5.000 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#appendOnSendAsync~2:complex'
  - uid: 'outlook!Office.Body#getAsync:member(1)'
    summary: |-
      Retorna o corpo atual em um formato especificado.

      Este método retorna todo o corpo atual no formato especificado por`coercionType`<!-- -->.

      Ao trabalhar com corpos formatados em HTML, é importante observar que os `Body.getAsync` métodos e `Body.setAsync` não são idempotentes. O valor retornado do `getAsync` método não será necessariamente exatamente o mesmo que o valor que foi passado no `setAsync` método anteriormente. O cliente pode modificar o valor passado para para `setAsync` que seja renderizado de forma eficiente com seu mecanismo de renderização.

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: 'getAsync(coercionType, options, callback)'
    fullName: 'getAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(coercionType: Office.CoercionType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: O formato do corpo retornado.
          type:
            - 'outlook!Office.Body#getAsync~0:complex'
        - id: options
          description: 'Opcional. Um literal de objeto que contém uma ou mais das seguintes propriedades:`asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo Office. AsyncResult. O corpo é fornecido no formato solicitado na `asyncResult.value` propriedade.'
          type:
            - 'outlook!Office.Body#getAsync~1:complex'
  - uid: 'outlook!Office.Body#getAsync:member(2)'
    summary: |-
      Retorna o corpo atual em um formato especificado.

      Este método retorna todo o corpo atual no formato especificado por`coercionType`<!-- -->.

      Ao trabalhar com corpos formatados em HTML, é importante observar que os `Body.getAsync` métodos e `Body.setAsync` não são idempotentes. O valor retornado do `getAsync` método não será necessariamente exatamente o mesmo que o valor que foi passado no `setAsync` método anteriormente. O cliente pode modificar o valor passado para para `setAsync` que seja renderizado de forma eficiente com seu mecanismo de renderização.

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura
    name: 'getAsync(coercionType, callback)'
    fullName: 'getAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(coercionType: Office.CoercionType | string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: O formato do corpo retornado.
          type:
            - 'outlook!Office.Body#getAsync~2:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo Office. AsyncResult. O corpo é fornecido no formato solicitado na `asyncResult.value` propriedade.'
          type:
            - 'outlook!Office.Body#getAsync~3:complex'
  - uid: 'outlook!Office.Body#getTypeAsync:member(1)'
    summary: |-
      Obtém um valor que indica se o conteúdo está em formato HTML ou texto.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir
    name: 'getTypeAsync(options, callback)'
    fullName: 'getTypeAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTypeAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. O tipo de conteúdo é retornado como um dos `CoercionType` valores na `asyncResult.value` propriedade.'
          type:
            - 'outlook!Office.Body#getTypeAsync~0:complex'
  - uid: 'outlook!Office.Body#getTypeAsync:member(2)'
    summary: |-
      Obtém um valor que indica se o conteúdo está em formato HTML ou texto.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.body.getTypeAsync(function (asyncResult) {
          if (asyncResult.status === "failed") {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              console.log("Body type: " + asyncResult.value);
          }
      });
      ```
    name: getTypeAsync(callback)
    fullName: getTypeAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTypeAsync(callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. O tipo de conteúdo é retornado como um dos `CoercionType` valores na `asyncResult.value` propriedade.'
          type:
            - 'outlook!Office.Body#getTypeAsync~1:complex'
  - uid: 'outlook!Office.Body#prependAsync:member(1)'
    summary: |-
      Adiciona o conteúdo especificado ao início do corpo do item.

      O método `prependAsync` insere a cadeia de caracteres especificada no início do corpo do item. Após a inserção, o cursor é retornado para seu local original, em relação ao conteúdo inserido.

      Ao incluir links na marcação HTML, você pode desabilitar a visualização de links online definindo o `id` atributo na âncora (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) para "LPNoLP" (consulte a seção de **exemplos** de um exemplo).

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O parâmetro data é maior que 1 milhão caracteres.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // When including links in HTML markup, you can disable online link preview
      // by setting the id attribute on the anchor (<a>) to "LPNoLP".
      Office.context.mailbox.item.body.prependAsync(
          '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
          {coercionType: Office.CoercionType.Html},
          callback);
      ```
    name: 'prependAsync(data, options, callback)'
    fullName: 'prependAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'prependAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres a ser inserida no início do corpo. A cadeia de caracteres está limitada a 1.000.000 de caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `coercionType`<!-- -->: O formato desejado para o corpo. A cadeia de caracteres no parâmetro `data` será convertida para este formato.'
          type:
            - 'outlook!Office.Body#prependAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#prependAsync~1:complex'
  - uid: 'outlook!Office.Body#prependAsync:member(2)'
    summary: |-
      Adiciona o conteúdo especificado ao início do corpo do item.

      O método `prependAsync` insere a cadeia de caracteres especificada no início do corpo do item. Após a inserção, o cursor é retornado para seu local original, em relação ao conteúdo inserido.

      Ao incluir links na marcação HTML, você pode desabilitar a visualização de links online definindo o `id` atributo na âncora (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) para "LPNoLP" (consulte a seção de **exemplos** de um exemplo).

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O parâmetro data é maior que 1 milhão caracteres.
    name: 'prependAsync(data, callback)'
    fullName: 'prependAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'prependAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres a ser inserida no início do corpo. A cadeia de caracteres está limitada a 1.000.000 de caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#prependAsync~2:complex'
  - uid: 'outlook!Office.Body#setAsync:member(1)'
    summary: |-
      Substitui todo o corpo com o texto especificado.

      Ao trabalhar com corpos formatados em HTML, é importante observar que os `Body.getAsync` métodos e `Body.setAsync` não são idempotentes. O valor retornado do `getAsync` método não será necessariamente exatamente o mesmo que o valor que foi passado no `setAsync` método anteriormente. O cliente pode modificar o valor passado para para `setAsync` que seja renderizado de forma eficiente com seu mecanismo de renderização.

      Ao incluir links na marcação HTML, você pode desabilitar a visualização de links online definindo o `id` atributo na âncora (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) para "LPNoLP" (consulte a seção de **exemplos** de um exemplo).

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O parâmetro data é maior que 1 milhão caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` e o corpo da mensagem fica em texto sem formatação.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // When including links in HTML markup, you can disable online link preview
      // by setting the id attribute on the anchor (<a>) to "LPNoLP".
      Office.context.mailbox.item.body.setAsync(
          '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
          {coercionType: Office.CoercionType.Html},
          callback);
      Office.context.mailbox.item.body.setAsync(
          "<b>(replaces all body, including threads you are replying to that may be on the bottom)</b>",
          { coercionType: "html", asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Process the result.
      });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value":null,
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: 'setAsync(data, options, callback)'
    fullName: 'setAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres que substituirá o corpo existente. A cadeia de caracteres está limitada a 1.000.000 de caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `coercionType`<!-- -->: O formato desejado para o corpo. A cadeia de caracteres no parâmetro `data` será convertida para este formato.'
          type:
            - 'outlook!Office.Body#setAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo Office. AsyncResult. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setAsync~1:complex'
  - uid: 'outlook!Office.Body#setAsync:member(2)'
    summary: |-
      Substitui todo o corpo com o texto especificado.

      Ao trabalhar com corpos formatados em HTML, é importante observar que os `Body.getAsync` métodos e `Body.setAsync` não são idempotentes. O valor retornado do `getAsync` método não será necessariamente exatamente o mesmo que o valor que foi passado no `setAsync` método anteriormente. O cliente pode modificar o valor passado para para `setAsync` que seja renderizado de forma eficiente com seu mecanismo de renderização.

      Ao incluir links na marcação HTML, você pode desabilitar a visualização de links online definindo o atributo ID na âncora (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) para "LPNoLP" (consulte a seção de **exemplos** de um exemplo).

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 1 milhão caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` e o corpo da mensagem fica em texto sem formatação.
    name: 'setAsync(data, callback)'
    fullName: 'setAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres que substituirá o corpo existente. A cadeia de caracteres está limitada a 1.000.000 de caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setAsync~2:complex'
  - uid: 'outlook!Office.Body#setSelectedDataAsync:member(1)'
    summary: |-
      Substitui a seleção no corpo pelo texto especificado.

      O método `setSelectedDataAsync` insere a cadeia de caracteres especificada no local do cursor no corpo do item ou, se o texto estiver selecionado no editor, substitui o texto selecionado. Se o cursor nunca esteve no corpo do item, ou se o corpo do item perdeu o destaque na interface de usuário, a cadeia de caracteres será inserida na parte superior do conteúdo do corpo. Após a inserção, o cursor é colocado no final do conteúdo inserido.

      Ao incluir links na marcação HTML, você pode desabilitar a visualização de links online definindo o atributo ID na âncora (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) para "LPNoLP" (consulte a seção de **exemplos** de um exemplo).

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 1 milhão caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` e o corpo da mensagem fica em texto sem formatação.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // When including links in HTML markup, you can disable online link preview
      // by setting the id attribute on the anchor (<a>) to "LPNoLP".
      Office.context.mailbox.item.body.setSelectedDataAsync(
          '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
          {coercionType: Office.CoercionType.Html},
          callback);
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres que substituirá o corpo existente. A cadeia de caracteres está limitada a 1.000.000 de caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `coercionType`<!-- -->: O formato desejado para o corpo. A cadeia de caracteres no parâmetro `data` será convertida para este formato.'
          type:
            - 'outlook!Office.Body#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.Body#setSelectedDataAsync:member(2)'
    summary: |-
      Substitui a seleção no corpo pelo texto especificado.

      O método `setSelectedDataAsync` insere a cadeia de caracteres especificada no local do cursor no corpo do item ou, se o texto estiver selecionado no editor, substitui o texto selecionado. Se o cursor nunca esteve no corpo do item, ou se o corpo do item perdeu o destaque na interface de usuário, a cadeia de caracteres será inserida na parte superior do conteúdo do corpo. Após a inserção, o cursor é colocado no final do conteúdo inserido.

      Ao incluir links na marcação HTML, você pode desabilitar a visualização de links online definindo o `id` atributo na âncora (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) para "LPNoLP" (consulte a seção de **exemplos** de um exemplo).

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 1 milhão caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` e o corpo da mensagem fica em texto sem formatação.
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres que substituirá o corpo existente. A cadeia de caracteres está limitada a 1.000.000 de caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. Quaisquer erros encontrados serão fornecidos na propriedade `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.Body#setSignatureAsync:member(1)'
    summary: |-
      Adiciona ou substitui a assinatura do corpo do item.

      **Importante**: no Outlook na Web, `setSignatureAsync` só funciona em mensagens.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 30.000 caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` e o corpo da mensagem fica em texto sem formatação.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Set the signature for the current item with inline image.
      var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        modIcon1Base64,
        "myImage.png",
        { isInline: true },
        function(result) {
          if (result.status == Office.AsyncResultStatus.Succeeded) {
            var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
            console.log(`Setting signature to "${signature}".`);
            // Important: setSignatureAsync is currently in preview.
            Office.context.mailbox.item.body.setSignatureAsync(
              signature,
              { coercionType: "html" },
              function(asyncResult) {
                console.log(`setSignatureAsync: ${asyncResult.status}`);
              }
            );
          } else {
            console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
          }
        }
      );
      ```
    isPreview: true
    name: 'setSignatureAsync(data, options, callback)'
    fullName: 'setSignatureAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSignatureAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres que representa a assinatura a ser definida no corpo do email. Esta cadeia de caracteres está limitada a 30.000 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada. `coercionType`<!-- -->: O formato em que a assinatura deve ser definida. Se Text, o método define a assinatura como texto sem formatação, removendo todas as marcas HTML presentes. Se HTML, o método define a assinatura como HTML.'
          type:
            - 'outlook!Office.Body#setSignatureAsync~0:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Body#setSignatureAsync~1:complex'
  - uid: 'outlook!Office.Body#setSignatureAsync:member(2)'
    summary: |-
      Adiciona ou substitui a assinatura do corpo do item.

      **Importante**: no Outlook na Web, `setSignatureAsync` só funciona em mensagens.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)**: redigir

      **Erros**:

      - `DataExceedsMaximumSize`<!-- -->: O `data` parâmetro é maior que 30.000 caracteres.

      - `InvalidFormatError`<!-- -->: O `options.coercionType` parâmetro é definido como `Office.CoercionType.Html` e o corpo da mensagem fica em texto sem formatação.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Set the signature for the current item.
      var signature = $("#signature").val();
      console.log(`Setting signature to "${signature}".`);
      Office.context.mailbox.item.body.setSignatureAsync(signature, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("setSignatureAsync succeeded");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: 'setSignatureAsync(data, callback)'
    fullName: 'setSignatureAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSignatureAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A cadeia de caracteres que representa a assinatura a ser definida no corpo do email. Esta cadeia de caracteres está limitada a 30.000 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Body#setSignatureAsync~2:complex'
references:
  - uid: 'outlook!Office.Body#appendOnSendAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#appendOnSendAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#appendOnSendAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#getAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Body#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body#getAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Body#getAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body#getTypeAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Body#getTypeAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Body#prependAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#prependAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#prependAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSignatureAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#setSignatureAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSignatureAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void