### YamlMime:UniversalReference
items:
  - uid: outlook.Office.Mailbox
    summary: |-
      Fornece acesso ao modelo de objeto de Suplemento do Outlook para o Microsoft Outlook e o Microsoft Outlook na Web.

      Namespaces

      - diagnostics: Fornece informações de diagnóstico para um suplemento do Outlook.

      - item: Fornece propriedades e métodos para acessar uma mensagem ou um compromisso em um suplemento do Outlook.

      - userProfile: Fornece informações sobre o usuário em um suplemento do Outlook.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restrito

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: Office.Mailbox
    fullName: Office.Mailbox
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.Mailbox.addHandlerAsync
      - outlook.Office.Mailbox.addHandlerAsync_1
      - outlook.Office.Mailbox.convertToEwsId
      - outlook.Office.Mailbox.convertToLocalClientTime
      - outlook.Office.Mailbox.convertToRestId
      - outlook.Office.Mailbox.convertToUtcClientTime
      - outlook.Office.Mailbox.displayAppointmentForm
      - outlook.Office.Mailbox.displayMessageForm
      - outlook.Office.Mailbox.displayNewAppointmentForm
      - outlook.Office.Mailbox.displayNewMessageForm
      - outlook.Office.Mailbox.getCallbackTokenAsync
      - outlook.Office.Mailbox.getCallbackTokenAsync_1
      - outlook.Office.Mailbox.getUserIdentityTokenAsync
      - outlook.Office.Mailbox.makeEwsRequestAsync
      - outlook.Office.Mailbox.removeHandlerAsync
      - outlook.Office.Mailbox.removeHandlerAsync_1
      - outlook.Office.Mailbox.diagnostics
      - outlook.Office.Mailbox.ewsUrl
      - outlook.Office.Mailbox.item
      - outlook.Office.Mailbox.masterCategories
      - outlook.Office.Mailbox.restUrl
      - outlook.Office.Mailbox.userProfile
  - uid: outlook.Office.Mailbox.addHandlerAsync
    summary: |-
      Adiciona um manipulador de eventos a um evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, o único tipo de evento suportado é`Office.EventType.ItemChanged`<!-- -->. Em versão prévia `Office.EventType.OfficeThemeChanged` , também é suportado.

      \[[Conjunto de APIs: caixa de correio 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve invocar o manipulador.
          type:
            - Office.EventType | string
        - id: handler
          description: 'A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade Type no parâmetro corresponderá ao parâmetro eventType passado para addHandlerAsync.'
          type:
            - '(type: Office.EventType) => void'
        - id: options
          description: 'Opcional. Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterados, para uso em um retorno de chamada.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.addHandlerAsync_1
    summary: |-
      Adiciona um manipulador de eventos a um evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, o único tipo de evento suportado é`Office.EventType.ItemChanged`<!-- -->. Em versão prévia `Office.EventType.OfficeThemeChanged` , também é suportado.

      \[[Conjunto de APIs: caixa de correio 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.initialize = function (reason) {
          $(document).ready(function () {
              Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, loadNewItem, function (result) {
              if (result.status === Office.AsyncResultStatus.Failed) {
                      // Handle error.
                  }
              });
          });
      };

      function loadNewItem(eventArgs) {
          // Load the properties of the newly selected item.
          loadProps(Office.context.mailbox.item);
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve invocar o manipulador.
          type:
            - Office.EventType | string
        - id: handler
          description: 'A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade Type no parâmetro corresponderá ao parâmetro eventType passado para addHandlerAsync.'
          type:
            - '(type: Office.EventType) => void'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.convertToEwsId
    summary: |-
      Converte uma ID de item formatada para REST no formato EWS.

      IDs de itens recuperadas por meio de uma API REST (como a API do Email do Outlook ou o Microsoft Graph) usam um formato diferente daquele usado pelos Serviços Web do Exchange (EWS). O método convertToEwsId converte uma ID formatada em REST no formato adequado para EWS.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restrito

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Get an item's ID from a REST API.
      var restId = 'AAMkAGVlOTZjNTM3LW...';

      // Treat restId as coming from the v2.0 version of the Outlook Mail API.
      var ewsId = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      ```
    name: 'convertToEwsId(itemId, restVersion)'
    fullName: 'convertToEwsId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: Uma ID de item formatada para as APIs REST do Outlook.
          type:
            - string
        - id: restVersion
          description: Um valor que indica a versão da API REST do Outlook usada para recuperar a ID do item.
          type:
            - MailboxEnums.RestVersion | string
  - uid: outlook.Office.Mailbox.convertToLocalClientTime
    summary: |-
      Obtém um dicionário contendo informações de hora em tempo local do cliente.

      As datas e horas usadas por um aplicativo de email para o Outlook na Web ou clientes da área de trabalho podem usar fusos horários diferentes. O Outlook usa o fuso horário do computador cliente; O Outlook na Web usa o fuso horário definido no centro de administração do Exchange (Eat). Você deve lidar com valores de data e hora para que os valores exibidos na interface do usuário sejam sempre consistentes com o fuso horário que o usuário espera.

      Se o aplicativo de email estiver em execução no Outlook em clientes de desktop, o método convertToLocalClientTime retornará um objeto Dictionary com os valores definidos para o fuso horário do computador cliente. Se o aplicativo de email estiver em execução no Outlook na Web, o método convertToLocalClientTime retornará um objeto Dictionary com os valores definidos para o fuso horário especificado no Eat.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: convertToLocalClientTime(timeValue)
    fullName: convertToLocalClientTime(timeValue)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      return:
        type:
          - outlook.Office.LocalClientTime
        description: ''
      parameters:
        - id: timeValue
          description: Um objeto Date.
          type:
            - Date
  - uid: outlook.Office.Mailbox.convertToRestId
    summary: |-
      Converte uma ID de item formatada para EWS no formato REST.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restrito

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      IDs de item recuperadas por meio do EWS ou pela propriedade itemId usam um formato diferente do formato usado por APIs REST (como a [API de email do Outlook](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations) ou o [Microsoft Graph](https://graph.microsoft.io/)<!-- -->. O método convertToRestId converte uma ID formatada do EWS no formato apropriado para REST.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Get the currently selected item's ID.
      var ewsId = Office.context.mailbox.item.itemId;

      // Convert to a REST ID for the v2.0 version of the Outlook Mail API.
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      ```
    name: 'convertToRestId(itemId, restVersion)'
    fullName: 'convertToRestId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: Uma ID de item formatada para os Serviços Web do Exchange (EWS)
          type:
            - string
        - id: restVersion
          description: Um valor que indica a versão da API REST do Outlook com a qual a ID convertida será usada.
          type:
            - MailboxEnums.RestVersion | string
  - uid: outlook.Office.Mailbox.convertToUtcClientTime
    summary: |-
      Obtém um objeto Date de um dicionário contendo as informações de hora.

      O método convertToUtcClientTime converte um dicionário que contém uma data e hora locais para um objeto Date com os valores corretos para a data e hora locais.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Represents 3:37 PM PDT on Monday, August 26, 2019.
      var input = {
          date: 26,
          hours: 15,
          milliseconds: 2,
          minutes: 37,
          month: 7,
          seconds: 2,
          timezoneOffset: -420,
          year: 2019
      };

      // result should be a Date object.
      var result = Office.context.mailbox.convertToUtcClientTime(input);

      // Output should be "2019-08-26T22:37:02.002Z".
      console.log(result.toISOString());
      ```
    name: convertToUtcClientTime(input)
    fullName: convertToUtcClientTime(input)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      return:
        type:
          - Date
        description: Um objeto Date com a hora expressa em UTC.
      parameters:
        - id: input
          description: O valor de hora local a converter.
          type:
            - outlook.Office.LocalClientTime
  - uid: outlook.Office.Mailbox.displayAppointmentForm
    summary: |-
      Exibe um compromisso de calendário existente.

      O método displayAppointmentForm abre um compromisso de calendário existente em uma nova janela na área de trabalho ou em uma caixa de diálogo em dispositivos móveis.

      No Outlook no Mac, você pode usar esse método para exibir um único compromisso que não faz parte de uma série recorrente ou o compromisso mestre de uma série recorrente, mas não é possível exibir uma instância da série. Isso ocorre porque, no Outlook no Mac, você não pode acessar as propriedades (incluindo a ID do item) de instâncias de uma série recorrente.

      No Outlook na Web, este método abre o formulário especificado somente se o corpo do formulário for menor ou igual ao número de caracteres 32 KB.

      Se o identificador do item especificado não identificar um compromisso existente, um painel em branco abre no dispositivo ou no computador cliente e nenhuma mensagem de erro será exibida.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.displayAppointmentForm(appointmentId);
      ```
    name: displayAppointmentForm(itemId)
    fullName: displayAppointmentForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: O identificador dos Serviços Web do Exchange (EWS) para um compromisso de calendário existente.
          type:
            - string
  - uid: outlook.Office.Mailbox.displayMessageForm
    summary: |-
      Exibe uma mensagem existente.

      O método displayMessageForm abre uma mensagem existente em uma nova janela na área de trabalho ou em uma caixa de diálogo em dispositivos móveis.

      No Outlook na Web, este método abre o formulário especificado somente se o corpo do formulário for menor ou igual ao número de caracteres de 32 KB.

      Se o identificador do item especificado não identificar uma mensagem existente, não será exibida mensagem no computador cliente e nenhuma mensagem de erro será retornada.

      Não use o displayMessageForm com um itemId que represente um compromisso. Use o método displayAppointmentForm para exibir um compromisso existente e displayNewAppointmentForm para exibir um formulário para criar um novo compromisso.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.displayMessageForm(messageId);
      ```
    name: displayMessageForm(itemId)
    fullName: displayMessageForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: O identificador dos Serviços Web do Exchange (EWS) para uma mensagem existente.
          type:
            - string
  - uid: outlook.Office.Mailbox.displayNewAppointmentForm
    summary: |-
      Exibe um formulário para criar um compromisso no calendário.

      O método displayNewAppointmentForm abre um formulário que permite ao usuário criar um novo compromisso ou reunião. Se os parâmetros forem especificados, os campos de formulário do compromisso serão preenchidos automaticamente com o conteúdo dos parâmetros.

      No Outlook na Web, este método sempre exibe um formulário com um campo participantes. Se você não especificar quaisquer participantes como argumentos de entrada, o método exibe um formulário com um botão Salvar. Se você especificar participantes, o formulário inclui os participantes e um botão Enviar.

      No cliente avançado do Outlook e no Outlook RT, se você especificar qualquer participante ou recurso no parâmetro requiredAttendees, optionalAttendees ou Resources, este método exibirá um formulário de reunião com um botão enviar. Se você não especificar nenhum destinatário, este método exibirá um formulário de compromisso com &amp; um botão salvar fechar.

      Se qualquer dos parâmetros exceder os limites de tamanho especificados, ou se um nome de parâmetro desconhecido for especificado, ocorre uma exceção.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      Office.context.mailbox.displayNewAppointmentForm(
      {
          requiredAttendees: ['bob@contoso.com'],
          optionalAttendees: ['sam@contoso.com'],
          start: start,
          end: end,
          location: 'Home',
          resources: ['projector@contoso.com'],
          subject: 'meeting',
          body: 'Hello World!'
      });
      ```
    name: displayNewAppointmentForm(parameters)
    fullName: displayNewAppointmentForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: Um AppointmentForm que descreve o novo compromisso. Todas as propriedades são opcionais.
          type:
            - outlook.Office.AppointmentForm
  - uid: outlook.Office.Mailbox.displayNewMessageForm
    summary: |-
      Exibe um formulário para criar uma nova mensagem.

      O método displayNewMessageForm abre um formulário que permite ao usuário criar uma nova mensagem. Se os parâmetros forem especificados, os campos de formulário da mensagem serão preenchidos automaticamente com o conteúdo dos parâmetros.

      Se qualquer dos parâmetros exceder os limites de tamanho especificados, ou se um nome de parâmetro desconhecido for especificado, ocorre uma exceção.

      \[[Conjunto de APIs: caixa de correio 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.displayNewMessageForm(
      {
          // Copy the To line from current item.
          toRecipients: Office.context.mailbox.item.to,
          ccRecipients: ['sam@contoso.com'],
          subject: 'Outlook add-ins are cool!',
          htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
          attachments: [
          {
              type: 'file',
              name: 'image.png',
              url: 'http://contoso.com/image.png',
              isInline: true
          }
          ]
      });
      ```
    name: displayNewMessageForm(parameters)
    fullName: displayNewMessageForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewMessageForm(parameters: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: |-
            Um dicionário contendo todos os valores a serem preenchidos para o usuário no novo formulário. Todos os parâmetros são opcionais.

            ToRecipients: uma matriz de cadeias de caracteres que contém os endereços de email ou uma matriz que contém um objeto [Office. EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) para cada um dos destinatários na linha para. A matriz está limitada a um máximo de 100 entradas.

            ccRecipients: uma matriz de cadeias de caracteres que contém os endereços de email ou uma matriz que contém um objeto [Office. EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) para cada um dos destinatários na linha CC. A matriz está limitada a um máximo de 100 entradas.

            bccRecipients: uma matriz de cadeias de caracteres que contém os endereços de email ou uma matriz que contém um objeto [Office. EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) para cada um dos destinatários na linha Cco. A matriz está limitada a um máximo de 100 entradas.

            subject: uma cadeia de caracteres que contém o assunto da mensagem. A cadeia de caracteres está limitada a um máximo de 255 caracteres.

            htmlBody: o corpo HTML da mensagem. O conteúdo do corpo está limitado a um tamanho máximo de 32 KB.

            Attachments: uma matriz de objetos JSON que são anexos de arquivo ou de item.

            Attachments. Type: indica o tipo de anexo. Deve ser um arquivo para um anexo de arquivo ou item para um anexo de item.

            attachments.name: uma cadeia de caracteres que contém o nome do anexo, até 255 caracteres de comprimento.

            Attachments. URL: usado somente se Type for definido como File. O URI do local para o arquivo.

            Attachments. IsInline: usado somente se Type for definido como File. Se true, indica que o anexo será mostrado embutido no corpo da mensagem e não deverá ser exibido na lista de anexos.

            Attachments. itemId: usado somente se Type for definido como item. A ID do item do EWS do email existente que você deseja anexar à nova mensagem. Isso é uma cadeia de até 100 caracteres.
          type:
            - any
  - uid: outlook.Office.Mailbox.getCallbackTokenAsync
    summary: |-
      Obtém uma cadeia de caracteres que contém um token usado para chamar APIs REST ou Serviços Web do Exchange.

      O método getCallbackTokenAsync faz uma chamada assíncrona para obter um token opaco do servidor Exchange que hospeda a caixa de correio do usuário. A vida útil do token de retorno de chamada é de 5 minutos.

      O token é retornado como uma cadeia de caracteres `asyncResult.value` na propriedade.

      *Tokens REST*

      Quando um token REST é solicitado (Options. isrest = true), o token resultante não funcionará para autenticar chamadas de serviços Web do Exchange. O token será limitado no escopo para acesso somente leitura ao item atual e seus anexos, a menos que o suplemento tenha especificado a permissão ReadWriteMailbox em seu manifesto. Se a permissão ReadWriteMailbox for especificada, o token resultante concederá acesso de leitura/gravação a emails, calendário e contatos, incluindo a capacidade de enviar emails.

      O suplemento deve usar a propriedade restUrl para determinar a URL correta a ser usada ao fazer chamadas da API REST.

      *Tokens EWS*

      Quando um token do EWS é solicitado (Options. isrest = false), o token resultante não funcionará para autenticar chamadas à API REST. O token será limitado em escopo para acessar o item atual.

      O suplemento deve usar a propriedade ewsUrl para determinar a URL correta a ser usada ao fazer chamadas de EWS.

      **Observação**: é recomendável que os suplementos usem as APIs REST em vez de serviços Web do Exchange sempre que possível.

      \[[Conjunto de APIs: caixa de correio 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      **Erros**:

      - HTTPRequestFailure: falha na solicitação. Confira o objeto Diagnostics do código de erro HTTP.

      - InternalServerError: o servidor do Exchange retornou um erro. Confira o objeto Diagnostics para obter mais informações.

      - NetworkError: o usuário não está mais conectado à rede. Verifique sua conexão de rede e tente novamente.

      #### <a name="examples"></a>Exemplos

      ```javascript
      function getCallbackToken() {
          var options = {
              isRest: true,
              asyncContext: { message: 'Hello World!' }
          };

          Office.context.mailbox.getCallbackTokenAsync(options, cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(options, callback)'
    fullName: 'getCallbackTokenAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. isrest: determina se o token fornecido será usado para as APIs REST do Outlook ou serviços Web do Exchange. O valor padrão é falso. asyncContext: quaisquer dados de estado que são passados para o método assíncrono.'
          type:
            - 'Office.AsyncContextOptions & { isRest?: boolean }'
        - id: callback
          description: 'Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult. O token é retornado como uma cadeia de caracteres `asyncResult.value` na propriedade. Se houvesse um erro, as `asyncResult.error` propriedades `asyncResult.diagnostics` e podem fornecer informações adicionais.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.Mailbox.getCallbackTokenAsync_1
    summary: |-
      Obtém uma cadeia de caracteres que contém um token usado para obter um anexo ou um item de um Exchange Server.

      O método getCallbackTokenAsync faz uma chamada assíncrona para obter um token opaco do servidor Exchange que hospeda a caixa de correio do usuário. A vida útil do token de retorno de chamada é de 5 minutos.

      O token é retornado como uma cadeia de caracteres `asyncResult.value` na propriedade.

      Você pode passar o token e um identificador de anexo ou um identificador de item a um sistema de terceiros. O sistema de terceiros usa o token como portador da autorização para chamar as operações GetAttachment ou GetItem dos Serviços Web do Exchange (EWS) para retornar um anexo ou item. Por exemplo, você pode criar um serviço remoto para obter anexos do item selecionado.

      Seu aplicativo deve ter a permissão ReadItem especificada em seu manifesto para chamar o método getCallbackTokenAsync no modo de leitura.

      No modo de composição, você deve chamar o método saveAsync para obter um identificador de item a ser passado para o método getCallbackTokenAsync. Seu aplicativo deve ter permissões ReadWriteItem para chamar o método saveAsync.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      **Erros**:

      - HTTPRequestFailure: falha na solicitação. Confira o objeto Diagnostics do código de erro HTTP.

      - InternalServerError: o servidor do Exchange retornou um erro. Confira o objeto Diagnostics para obter mais informações.

      - NetworkError: o usuário não está mais conectado à rede. Verifique sua conexão de rede e tente novamente.

      #### <a name="examples"></a>Exemplos

      ```javascript
      function getCallbackToken() {
          Office.context.mailbox.getCallbackTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(callback, userContext)'
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult. O token é retornado como uma cadeia de caracteres `asyncResult.value` na propriedade. Se houvesse um erro, as `asyncResult.error` propriedades `asyncResult.diagnostics` e podem fornecer informações adicionais.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: Opcional. Quaisquer dados de estado que são passados ao método assíncrono.
          type:
            - any
  - uid: outlook.Office.Mailbox.getUserIdentityTokenAsync
    summary: |-
      Obtém um símbolo que identifica o usuário e o suplemento do Office.

      O token é retornado como uma cadeia de caracteres `asyncResult.value` na propriedade.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      O método getUserIdentityTokenAsync retorna um token que você pode usar para identificar e [autenticar o suplemento e o usuário com um sistema de terceiros](https://docs.microsoft.com/outlook/add-ins/authentication)<!-- -->.

      **Erros**:

      - HTTPRequestFailure: falha na solicitação. Confira o objeto Diagnostics do código de erro HTTP.

      - InternalServerError: o servidor do Exchange retornou um erro. Confira o objeto Diagnostics para obter mais informações.

      - NetworkError: o usuário não está mais conectado à rede. Verifique sua conexão de rede e tente novamente.

      #### <a name="examples"></a>Exemplos

      ```javascript
      function getIdentityToken() {
          Office.context.mailbox.getUserIdentityTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getUserIdentityTokenAsync(callback, userContext)'
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult. O token é retornado como uma cadeia de caracteres `asyncResult.value` na propriedade. Se houvesse um erro, as `asyncResult.error` propriedades `asyncResult.diagnostics` e podem fornecer informações adicionais.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: Opcional. Quaisquer dados de estado que são passados ao método assíncrono.
          type:
            - any
  - uid: outlook.Office.Mailbox.makeEwsRequestAsync
    summary: |-
      Faz uma solicitação assíncrona para um serviço de serviços Web do Exchange (EWS) no servidor Exchange que hospeda a caixa de correio do usuário.

      Nesses casos, os suplementos devem usar as APIs REST para acessar a caixa de correio do usuário.

      O método makeEwsRequestAsync envia uma solicitação do EWS em nome do suplemento para o Exchange.

      Não é possível solicitar itens associados da pasta com o método makeEwsRequestAsync.

      A solicitação XML deve especificar a codificação UTF-8. &lt;<!-- -->? XML Version = "1.0" Encoding = "UTF-8"?<!-- -->&gt;

      Seu suplemento deve ter a permissão ReadWriteMailbox para usar o método makeEwsRequestAsync. Para obter informações sobre como usar a permissão ReadWriteMailbox e as operações do EWS que você pode chamar com o método makeEwsRequestAsync, consulte [especificar permissões para o acesso do suplemento de email à caixa de correio do usuário](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->.

      O resultado XML da chamada EWS é fornecido como uma cadeia de caracteres na propriedade asyncResult. Value. Se o resultado exceder 1 MB de tamanho, será exibida uma mensagem de erro.

      **Observação**: esse método não tem suporte nos seguintes cenários:

      - No Outlook no iOS ou no Android.

      - Quando o suplemento é carregado em uma caixa de correio do gmail.

      **Observação**: o administrador do servidor deve definir OAuthAuthentication como true no diretório EWS do servidor de acesso para cliente para permitir que o método makeEwsRequestAsync faça solicitações do EWS.

      *Diferenças de versão*

      Ao usar o método makeEwsRequestAsync em aplicativos de email executados em versões do Outlook anteriores à versão 15.0.4535.1004, você deve definir o valor de codificação como ISO-8859-1.

      `<?xml version="1.0" encoding="iso-8859-1"?>`

      Não é necessário definir o valor de codificação quando o aplicativo de email estiver em execução no Outlook na Web. Você pode determinar se o aplicativo de email está em execução no Outlook ou no Outlook na Web usando a propriedade mailbox.diagnostics.hostName. Você pode determinar que versão do Outlook está em execução usando a propriedade mailbox.diagnostics.hostVersion.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteMailbox

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          var request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }

      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }

      function callback(asyncResult)  {
          var result = asyncResult.value;
          var context = asyncResult.asyncContext;

          // Process the returned response here.
      }
      ```
    name: 'makeEwsRequestAsync(data, callback, userContext)'
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: A solicitação do EWS.
          type:
            - any
        - id: callback
          description: 'Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult. A `value` Propriedade do resultado é o XML da solicitação EWS fornecido como uma cadeia de caracteres. Se o resultado exceder 1 MB de tamanho, será exibida uma mensagem de erro.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: Opcional. Quaisquer dados de estado que são passados ao método assíncrono.
          type:
            - any
  - uid: outlook.Office.Mailbox.removeHandlerAsync
    summary: |-
      Remove um manipulador de eventos para um tipo de evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, o único tipo de evento suportado é`Office.EventType.ItemChanged`<!-- -->. Em versão prévia `Office.EventType.OfficeThemeChanged` , também é suportado.

      \[[Conjunto de APIs: caixa de correio 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve revogar o manipulador.
          type:
            - Office.EventType | string
        - id: options
          description: 'Opcional. Fornece uma opção para preservar dados de contexto de qualquer tipo, inalterados, para uso em um retorno de chamada.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.removeHandlerAsync_1
    summary: |-
      Remove um manipulador de eventos para um tipo de evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Atualmente, o único tipo de evento suportado é`Office.EventType.ItemChanged`<!-- -->. Em versão prévia `Office.EventType.OfficeThemeChanged` , também é suportado.

      \[[Conjunto de APIs: caixa de correio 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve revogar o manipulador.
          type:
            - Office.EventType | string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.diagnostics
    summary: |-
      Fornece informações de diagnóstico para um suplemento do Outlook.

      Contém os seguintes membros:

      - hostName (cadeia de caracteres): uma cadeia de caracteres que representa o nome do aplicativo host. Deve ser um dos seguintes valores: "Outlook", "Protocoloutlookwebapp", "OutlookIOS" ou "OutlookAndroid". **Observação**: o valor "Outlook" é retornado para o Outlook em clientes de área de trabalho (por exemplo, Windows e Mac).

      - hostVersion (cadeia de caracteres): uma cadeia de caracteres que representa a versão do aplicativo host ou do servidor Exchange (por exemplo, "15.0.468.0"). Se o suplemento de email estiver em execução no Outlook na área de trabalho ou clientes móveis, a propriedade hostVersion retornará a versão do aplicativo host, o Outlook. No Outlook na Web, a propriedade retorna a versão do servidor Exchange.

      - OWAView (MailboxEnums. OWAView ou cadeia de caracteres): uma enumeração (ou literal de cadeia de caracteres) que representa o modo de exibição atual do Outlook na Web. Se o aplicativo host não for o Outlook na Web, acessar essa propriedade resultará em indefinido. O Outlook na Web tem três modos de exibição ("OneColumn", exibidos quando a tela é estreita, "TwoColumns"-exibida quando a tela é mais larga e "ThreeColumns"-exibida quando a tela é larga) que corresponde à largura da tela e à janela e ao número de colunas que podem ser exibidas.

      Há mais informações em [Office. Diagnostics](xref:outlook.Office.Diagnostics)<!-- -->.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type:
          - outlook.Office.Diagnostics
  - uid: outlook.Office.Mailbox.ewsUrl
    summary: |-
      Obtém a URL do ponto de extremidade dos Serviços Web do Exchange (EWS) para esta conta de email. Somente modo de leitura.

      Seu aplicativo deve ter a permissão ReadItem especificada em seu manifesto para chamar o membro ewsUrl no modo de leitura.

      No modo de composição, você deve chamar o método saveAsync antes de poder usar o membro ewsUrl. Seu aplicativo deve ter permissões ReadWriteItem para chamar o método saveAsync.

      \[[Conjunto de APIs: caixa de correio 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      O valor ewsUrl pode ser usado por um serviço remoto para fazer chamadas de EWS para a caixa de correio do usuário. Por exemplo, você pode criar um serviço remoto para [obter anexos do item selecionado](https://docs.microsoft.com/outlook/add-ins/get-attachments-of-an-outlook-item)<!-- -->.

      **Observação**: não há suporte para esse membro no Outlook no Ios ou no Android.
    name: ewsUrl
    fullName: ewsUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ewsUrl: string;'
      return:
        type:
          - string
  - uid: outlook.Office.Mailbox.item
    summary: 'O item da caixa de correio. Dependendo do contexto no qual o suplemento foi aberto, o item pode ser de qualquer número de tipos. Se você quiser ver o IntelliSense somente para um tipo específico, você deve converter este item em um dos seguintes:`ItemCompose`<!-- -->, `ItemRead`<!-- -->, `MessageCompose`<!-- -->, `MessageRead`<!-- -->, `AppointmentCompose`<!-- -->, `AppointmentRead`'
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose;'
      return:
        type:
          - Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose
  - uid: outlook.Office.Mailbox.masterCategories
    summary: |-
      Obtém um objeto que fornece métodos para gerenciar a lista mestra de categorias associada a uma caixa de correio.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteMailbox

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.masterCategories.getAsync(function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              var masterCategories = asyncResult.value;
              console.log("Master categories:");
              masterCategories.forEach(function (item) {
                  console.log("-- " + JSON.stringify(item));
              });
          }
      });
      ```
    isPreview: true
    name: masterCategories
    fullName: masterCategories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'masterCategories: MasterCategories;'
      return:
        type:
          - outlook.Office.MasterCategories
  - uid: outlook.Office.Mailbox.restUrl
    summary: |-
      Obtém a URL do ponto de extremidade de REST para esta conta de email.

      Seu aplicativo deve ter a permissão ReadItem especificada em seu manifesto para chamar o membro restUrl no modo de leitura.

      No modo de composição, você deve chamar o método saveAsync antes de poder usar o membro restUrl. Seu aplicativo deve ter permissões ReadWriteItem para chamar o método saveAsync.

      \[[Conjunto de APIs: caixa de correio 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: redação ou leitura

      O valor restUrl pode ser usado para fazer chamadas da [API REST](https://docs.microsoft.com/outlook/rest/) para a caixa de correio do usuário.
    name: restUrl
    fullName: restUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restUrl: string;'
      return:
        type:
          - string
  - uid: outlook.Office.Mailbox.userProfile
    summary: |-
      Informações sobre o usuário associado à caixa de correio. Isso inclui o tipo de conta, o nome para exibição, o endereço de email e o fuso horário.

      Há mais informações em [Office. UserProfile](xref:outlook.Office.UserProfile)
    name: userProfile
    fullName: userProfile
    langs:
      - typeScript
    type: property
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type:
          - outlook.Office.UserProfile