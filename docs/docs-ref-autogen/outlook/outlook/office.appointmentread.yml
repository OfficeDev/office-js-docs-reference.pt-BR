### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AppointmentRead:interface'
    summary: |-
      O modo de participante do compromisso de [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Importante**: Este é um objeto interno do Outlook, não diretamente exposto por meio de interfaces existentes. Você deve tratá-lo como um modo de`Office.context.mailbox.item`<!-- -->. Consulte a página [modelo de objeto](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item) para obter mais informações.

      Interfaces pai:

      - [Itens lidos](xref:outlook!Office.ItemRead:interface)

      - [Compromisso](xref:outlook!Office.Appointment:interface)
    name: Office.AppointmentRead
    fullName: Office.AppointmentRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Appointment:interface'
      - 'outlook!Office.ItemRead:interface'
    package: outlook!
    children:
      - 'outlook!Office.AppointmentRead#addHandlerAsync:member(1)'
      - 'outlook!Office.AppointmentRead#addHandlerAsync:member(2)'
      - 'outlook!Office.AppointmentRead#attachments:member'
      - 'outlook!Office.AppointmentRead#body:member'
      - 'outlook!Office.AppointmentRead#categories:member'
      - 'outlook!Office.AppointmentRead#dateTimeCreated:member'
      - 'outlook!Office.AppointmentRead#dateTimeModified:member'
      - 'outlook!Office.AppointmentRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.AppointmentRead#displayReplyForm:member(1)'
      - 'outlook!Office.AppointmentRead#end:member'
      - 'outlook!Office.AppointmentRead#enhancedLocation:member'
      - 'outlook!Office.AppointmentRead#getAttachmentContentAsync:member(1)'
      - 'outlook!Office.AppointmentRead#getAttachmentContentAsync:member(2)'
      - 'outlook!Office.AppointmentRead#getEntities:member(1)'
      - 'outlook!Office.AppointmentRead#getEntitiesByType:member(1)'
      - 'outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.AppointmentRead#getInitializationContextAsync:member(1)'
      - 'outlook!Office.AppointmentRead#getInitializationContextAsync:member(2)'
      - 'outlook!Office.AppointmentRead#getRegExMatches:member(1)'
      - 'outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.AppointmentRead#getSelectedEntities:member(1)'
      - 'outlook!Office.AppointmentRead#getSelectedRegExMatches:member(1)'
      - 'outlook!Office.AppointmentRead#getSharedPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentRead#getSharedPropertiesAsync:member(2)'
      - 'outlook!Office.AppointmentRead#itemClass:member'
      - 'outlook!Office.AppointmentRead#itemId:member'
      - 'outlook!Office.AppointmentRead#itemType:member'
      - 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentRead#location:member'
      - 'outlook!Office.AppointmentRead#normalizedSubject:member'
      - 'outlook!Office.AppointmentRead#notificationMessages:member'
      - 'outlook!Office.AppointmentRead#optionalAttendees:member'
      - 'outlook!Office.AppointmentRead#organizer:member'
      - 'outlook!Office.AppointmentRead#recurrence:member'
      - 'outlook!Office.AppointmentRead#removeHandlerAsync:member(1)'
      - 'outlook!Office.AppointmentRead#removeHandlerAsync:member(2)'
      - 'outlook!Office.AppointmentRead#requiredAttendees:member'
      - 'outlook!Office.AppointmentRead#seriesId:member'
      - 'outlook!Office.AppointmentRead#start:member'
      - 'outlook!Office.AppointmentRead#subject:member'
  - uid: 'outlook!Office.AppointmentRead#addHandlerAsync:member(1)'
    summary: |-
      Adiciona um manipulador de eventos a um evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Para ver quais tipos de evento são suportados, `Office.EventType` consulte para obter detalhes.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve invocar o manipulador.
          type:
            - 'outlook!Office.AppointmentRead#addHandlerAsync~0:complex'
        - id: handler
          description: 'A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade Type no parâmetro corresponderá ao `eventType` parâmetro passado para`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentRead#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.AppointmentRead#addHandlerAsync:member(2)'
    summary: |-
      Adiciona um manipulador de eventos a um evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Para ver quais tipos de evento são suportados, `Office.EventType` consulte para obter detalhes.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve invocar o manipulador.
          type:
            - 'outlook!Office.AppointmentRead#addHandlerAsync~2:complex'
        - id: handler
          description: 'A função para manipular o evento. A função deve aceitar um parâmetro exclusivo, que é um objeto literal. A propriedade Type no parâmetro corresponderá ao `eventType` parâmetro passado para`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentRead#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.AppointmentRead#attachments:member'
    summary: Obtém os anexos do item como uma matriz.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      **Observação**: determinados tipos de arquivos são bloqueados pelo Outlook devido a possíveis problemas de segurança e, portanto, não são retornados. Para obter mais informações, consulte [anexos bloqueados no Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following code builds an HTML string with details of all attachments on the current item.
      var item = Office.context.mailbox.item;
      var outputString = "";

      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }

      console.log(outputString);
      ```
      ```javascript
      var attachments = Office.context.mailbox.item.attachments;
      console.log(attachments);
      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#attachments~0:complex'
  - uid: 'outlook!Office.AppointmentRead#body:member'
    summary: |-
      Obtém um objeto que fornece métodos para manipular o corpo de um item.

      \[[Conjunto de APIs: caixa de correio 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.AppointmentRead#categories:member'
    summary: |-
      Obtém um objeto que fornece métodos para gerenciar as categorias do item.

      \[[Conjunto de APIs: caixa de correio 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.categories.getAsync(function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              console.log("Categories: " + JSON.stringify(asyncResult.value));
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories) {
            console.log(categories);
          } else {
            console.log("There are no categories.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: categories
    fullName: categories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'categories: Categories;'
      return:
        type:
          - 'outlook!Office.Categories:interface'
  - uid: 'outlook!Office.AppointmentRead#dateTimeCreated:member'
    summary: Obtém a data e a hora em que um item foi criado.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;
      console.log("Date and time created: " + dateTimeCreated);
      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#dateTimeModified:member'
    summary: |-
      Obtém a data e a hora em que um item foi alterado pela última vez.

      **Observação**: não há suporte para esse membro no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var dateTimeModified = Office.context.mailbox.item.dateTimeModified;
      console.log("Date and time modified: " + dateTimeModified);
      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm:member(1)'
    summary: |-
      Exibe um formulário de resposta que inclui o remetente e todos os destinatários da mensagem selecionada ou o organizador e todos os participantes do compromisso selecionado.

      No Outlook na Web, o formulário de resposta é exibido como um formulário pop-out no modo de exibição de três colunas e um formulário pop-up no modo de exibição de uma ou duas colunas.

      Se qualquer dos parâmetros da cadeia de caracteres exceder seu limite, `displayReplyAllForm` gera uma exceção.

      Quando os anexos são especificados no parâmetro `formData.attachments`, os clientes do Outlook na Web e do Outlook para área de trabalho tentam baixar todos os anexos e anexá-los ao formulário de resposta. Se a adição de anexos falhar, será exibido um erro na interface de usuário do formulário. Se isso não for possível, nenhuma mensagem de erro será apresentada.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following code passes a string to the `displayReplyAllForm` function.
      Office.context.mailbox.item.displayReplyAllForm('hello there');
      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyAllForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyAllForm(
      {
      'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.displayReplyAllForm(
        "This is a reply ALL with <b>some bold text</b>."
      );
      ```
    name: displayReplyAllForm(formData)
    fullName: displayReplyAllForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: 'Uma cadeia de caracteres que contém texto e HTML e que representa o corpo do formulário de resposta. A cadeia de caracteres está limitada a 32 KB ou um objeto [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) que contém dados de corpo ou de anexo e uma função de retorno de chamada.'
          type:
            - 'outlook!Office.AppointmentRead#displayReplyAllForm~0:complex'
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm:member(1)'
    summary: |-
      Exibe um formulário de resposta que inclui o remetente da mensagem selecionada ou o organizador do compromisso selecionado.

      No Outlook na Web, o formulário de resposta é exibido como um formulário pop-out no modo de exibição de três colunas e um formulário pop-up no modo de exibição de uma ou duas colunas.

      Se qualquer dos parâmetros da cadeia de caracteres exceder seu limite, `displayReplyForm` gera uma exceção.

      Quando os anexos são especificados no parâmetro `formData.attachments`, os clientes do Outlook na Web e do Outlook para área de trabalho tentam baixar todos os anexos e anexá-los ao formulário de resposta. Se a adição de anexos falhar, será exibido um erro na interface de usuário do formulário. Se isso não for possível, nenhuma mensagem de erro será apresentada.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following code passes a string to the `displayReplyForm` function.
      Office.context.mailbox.item.displayReplyForm('hello there');
      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.displayReplyForm(
        "This is a reply with <i>some text in italics</i>."
      );
      ```
      ```javascript
      Office.context.mailbox.item.displayReplyForm(
      {
          htmlBody : "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
          attachments :
          [
              { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
              { type: "item", itemId : Office.context.mailbox.item.itemId, name: "test_email.msg" }
          ],
          options : { asyncContext: null },
          callback : function (result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded)
              {
                  console.error(`Action failed with message ${result.error.message}`);
              }
          }
      });
      ```
    name: displayReplyForm(formData)
    fullName: displayReplyForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: 'Uma cadeia de caracteres que contém texto e HTML e que representa o corpo do formulário de resposta. A cadeia de caracteres está limitada a 32 KB ou um objeto [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) que contém dados de corpo ou de anexo e uma função de retorno de chamada.'
          type:
            - 'outlook!Office.AppointmentRead#displayReplyForm~0:complex'
  - uid: 'outlook!Office.AppointmentRead#end:member'
    summary: |-
      Obtém a data e hora de término do compromisso.

      A `end` propriedade é um `Date` objeto expresso como um valor de data e hora Coordinated Universal Time (UTC). Você pode usar o `convertToLocalClientTime` método para converter o `end` valor da propriedade na data e hora locais do cliente.

      Ao usar o método `Time.setAsync` para definir a hora de término, deve-se usar o método `convertToUtcClientTime` para converter a hora local no cliente para UTC para o servidor.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var end = Office.context.mailbox.item.end;
      console.log("Appointment end: " + end);
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#enhancedLocation:member'
    summary: |-
      Obtém os locais de um compromisso.

      A `enhancedLocation` propriedade retorna um objeto [EnhancedLocation](xref:outlook!Office.EnhancedLocation:interface) que permite que você obtenha o conjunto de locais (cada um representado por um objeto [LocationDetails](xref:outlook!Office.LocationDetails:interface) ) associado ao compromisso.

      \[[Conjunto de APIs: caixa de correio 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

      function callbackFunction(asyncResult) {
          asyncResult.value.forEach(function (place) {
              console.log("Display name: " + place.displayName);
              console.log("Type: " + place.locationIdentifier.type);
              if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                  console.log("Email address: " + place.emailAddress);
              }
          });
      }
      ```
    name: enhancedLocation
    fullName: enhancedLocation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enhancedLocation: EnhancedLocation;'
      return:
        type:
          - 'outlook!Office.EnhancedLocation:interface'
  - uid: 'outlook!Office.AppointmentRead#getAttachmentContentAsync:member(1)'
    summary: |-
      Obtém um anexo de uma mensagem ou de um compromisso e o retorna `AttachmentContent` como um objeto.

      O `getAttachmentContentAsync` método obtém o anexo com o identificador especificado do item. Como prática recomendada, você deve usar o identificador para recuperar um anexo na mesma sessão em que o attachmentIds foi recuperado com a `getAttachmentsAsync` chamada ou `item.attachments` . No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão termina quando o usuário fecha o aplicativo, ou se o usuário começa a redigir um formulário embutido e, em seguida, abre o formulário para continuar em uma janela separada.

      \[[Conjunto de APIs: caixa de correio 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      **Erros**:

      - `AttachmentTypeNotSupported`<!-- -->: Não há suporte para o tipo de anexo. Tipos sem suporte incluem imagens incorporadas no formato Rich Text ou tipos de anexo de item diferentes de email ou itens de calendário (como um contato ou item de tarefa).

      - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.

      #### <a name="examples"></a>Exemplos

      ```javascript
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, options, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: O identificador do anexo que você deseja obter.
          type:
            - string
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto. Se a chamada falhar, a `asyncResult.error` Propriedade conterá um código de erro com o motivo da falha.'
          type:
            - 'outlook!Office.AppointmentRead#getAttachmentContentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentRead#getAttachmentContentAsync:member(2)'
    summary: |-
      Obtém um anexo de uma mensagem ou de um compromisso e o retorna `AttachmentContent` como um objeto.

      O `getAttachmentContentAsync` método obtém o anexo com o identificador especificado do item. Como prática recomendada, você deve usar o identificador para recuperar um anexo na mesma sessão em que o attachmentIds foi recuperado com a `getAttachmentsAsync` chamada ou `item.attachments` . No Outlook na Web e em dispositivos móveis, a identificador do anexo é válido apenas durante a mesma sessão. Uma sessão termina quando o usuário fecha o aplicativo, ou se o usuário começa a redigir um formulário embutido e, em seguida, abre o formulário para continuar em uma janela separada.

      \[[Conjunto de APIs: caixa de correio 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      **Erros**:

      - `AttachmentTypeNotSupported`<!-- -->: Não há suporte para o tipo de anexo. Tipos sem suporte incluem imagens incorporadas no formato Rich Text ou tipos de anexo de item diferentes de email ou itens de calendário (como um contato ou item de tarefa).

      - `InvalidAttachmentId`<!-- -->: O identificador de anexo não existe.

      #### <a name="examples"></a>Exemplos

      ```javascript
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  console.log(result.value.content);
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  console.log("Attachment is a message.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  console.log("Attachment is a calendar item.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  console.log("Attachment is a cloud attachment.");
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: O identificador do anexo que você deseja obter.
          type:
            - string
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto. Se a chamada falhar, a `asyncResult.error` Propriedade conterá um código de erro com o motivo da falha.'
          type:
            - 'outlook!Office.AppointmentRead#getAttachmentContentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentRead#getEntities:member(1)'
    summary: |-
      Obtém as entidades encontradas no corpo do item selecionado.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example accesses the contacts entities in the current item's body.

      var contacts = Office.context.mailbox.item.getEntities().contacts;
      ```
      ```javascript
      var entities = Office.context.mailbox.item.getEntities();
      var entityTypesFound = 0;
      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }
      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }
      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }
      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }
      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }
      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }
      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }
      if (entityTypesFound == 0)
      {
          console.log("No entities found on this item.");
      }
      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType:member(1)'
    summary: |-
      Obtém uma matriz de todas as entidades do tipo de entidade especificado encontradas no corpo do item selecionado.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example shows how to access an array of strings that represent
      // postal addresses in the current item's body.

      // The initialize function is required for all apps.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              // Get an array of strings that represent postal addresses in the current item's body.
              var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
              // Continue processing the array of addresses.
          });
      };
      ```
      ```javascript
      console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
      ```
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#getEntitiesByType~0:complex'
        description: 'Se o valor passado em `entityType` não for um membro válido da enumeração `EntityType`, o método retorna nulo. Se nenhuma entidade do tipo especificado estiver presente no corpo do item, o método retorna uma matriz vazia. Caso contrário, o tipo de objetos na matriz retornada depende do tipo de entidade solicitado no parâmetro `entityType`.'
      parameters:
        - id: entityType
          description: |-
            Um dos valores `EntityType` de enumeração.

            Enquanto o nível de permissão mínimo para usar esse método é`Restricted`<!-- -->, alguns tipos de entidade `ReadItem` exigem o acesso, conforme especificado na tabela a seguir.

            <table> <tr> <th>Valor de entityType</th> <th>Tipo de objetos na matriz retornada</th> <th>Nível de permissão exigido</th> </tr> <tr> <td>Endereço</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contato</td> <td>Contato</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
          type:
            - 'outlook!Office.AppointmentRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)'
    summary: |-
      Retorna entidades bem conhecidas no item selecionado que passam o filtro nomeado definido no arquivo de manifesto XML.

      O `getFilteredEntitiesByName` método retorna as entidades que correspondem à expressão regular definida no elemento `ItemHasKnownEntity` Rule no arquivo de manifesto XML com o valor do `FilterName` elemento especificado.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // This API would only work when you click on highlighted physical address that has the word "Way" in it.
      console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
      ```
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#getFilteredEntitiesByName~0:complex'
        description: 'Se não houver nenhum `ItemHasKnownEntity` elemento no manifesto com um `FilterName` valor de elemento que corresponda ao `name` parâmetro, o método retornará`null`<!-- -->. Se o `name` parâmetro corresponder a `ItemHasKnownEntity` um elemento no manifesto, mas não houver entidades no item atual correspondente, o método retornará uma matriz vazia.'
      parameters:
        - id: name
          description: O nome do elemento de regra `ItemHasKnownEntity` que define o filtro a corresponder.
          type:
            - string
  - uid: 'outlook!Office.AppointmentRead#getInitializationContextAsync:member(1)'
    summary: |-
      Obtém dados de inicialização passados quando o suplemento é [ativado por uma mensagem acionável](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.

      **Observação**: esse método só é compatível com o Outlook 2016 ou posterior no Windows (clique para executar versões superiores a 16.0.8413.1000) e Outlook na Web para o Office 365.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso
    isPreview: true
    name: 'getInitializationContextAsync(options, callback)'
    fullName: 'getInitializationContextAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto. Com êxito, os dados de inicialização são fornecidos na `asyncResult.value` Propriedade como uma cadeia de caracteres. Se não houver nenhum contexto de inicialização, `asyncResult` o objeto conterá `Error` um objeto com `code` sua propriedade definida como 9020 e `name` sua propriedade definida como`GenericResponseError`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentRead#getInitializationContextAsync~0:complex'
  - uid: 'outlook!Office.AppointmentRead#getInitializationContextAsync:member(2)'
    summary: |-
      Obtém dados de inicialização passados quando o suplemento é [ativado por uma mensagem acionável](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.

      **Observação**: esse método só é compatível com o Outlook 2016 ou posterior no Windows (clique para executar versões superiores a 16.0.8413.1000) e Outlook na Web para o Office 365.

      \[[Conjunto de APIs: visualização de caixa de correio](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Get the initialization context (if present).
      Office.context.mailbox.item.getInitializationContextAsync(
          function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                  if (asyncResult.value != null && asyncResult.value.length > 0) {
                      // The value is a string, parse to an object.
                      var context = JSON.parse(asyncResult.value);
                      // Do something with context.
                  } else {
                      // Empty context, treat as no context.
                  }
              } else {
                  if (asyncResult.error.code == 9020) {
                      // GenericResponseError returned when there is no context.
                      // Treat as no context.
                  } else {
                      // Handle the error.
                  }
              }
          }
      );
      ```
    isPreview: true
    name: getInitializationContextAsync(callback)
    fullName: getInitializationContextAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto. Com êxito, os dados de inicialização são fornecidos na `asyncResult.value` Propriedade como uma cadeia de caracteres. Se não houver nenhum contexto de inicialização, `asyncResult` o objeto conterá `Error` um objeto com `code` sua propriedade definida como 9020 e `name` sua propriedade definida como`GenericResponseError`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentRead#getInitializationContextAsync~1:complex'
  - uid: 'outlook!Office.AppointmentRead#getRegExMatches:member(1)'
    summary: |-
      Retorna valores de cadeia de caracteres ao item selecionado que correspondem às expressões regulares definidas no arquivo de manifesto XML.

      O método `getRegExMatches` retorna as cadeias de caracteres que correspondem à expressão regular definida em cada elemento de regra `ItemHasRegularExpressionMatch` ou `ItemHasKnownEntity` no arquivo de manifesto XML. Para uma regra `ItemHasRegularExpressionMatch`, uma cadeia de caracteres correspondente deve ocorrer na propriedade do item especificada por essa regra. O tipo simples `PropertyName` define as propriedades compatíveis.

      Se você especificar uma regra `ItemHasRegularExpressionMatch` na propriedade do corpo de um item, a expressão regular deverá filtrar mais o corpo e não tentar retornar todo o corpo do item. Usar uma expressão regular como. * para obter o corpo inteiro de um item nem sempre retorna os resultados esperados. Em vez disso, use o método `Body.getAsync` para recuperar todo o corpo.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of
      // matches for the regular expression rule elements `fruits`
      // and `veggies`, which are specified in the manifest.
      var allMatches = Office.context.mailbox.item.getRegExMatches();
      var fruits = allMatches.fruits;
      var veggies = allMatches.veggies;
      ```
      ```javascript
      // This API would only work when you click on highlighted word "ScriptLab".
      console.log(Office.context.mailbox.item.getRegExMatches());
      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: Um objeto que contém matrizes de cadeias de caracteres que correspondem às expressões regulares definidas no arquivo XML do manifesto. O nome de cada matriz é igual ao valor correspondente do atributo RegExname da regra de correspondência `ItemHasRegularExpressionMatch` ou do `FilterName` atributo da regra de correspondência. `ItemHasKnownEntity`
  - uid: 'outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)'
    summary: |-
      Retorna valores de cadeia de caracteres no item selecionado que correspondem à expressão regular nomeada definida no arquivo de manifesto XML.

      O método `getRegExMatchesByName` retorna as cadeias de caracteres que correspondem à expressão regular definida no elemento de regra `ItemHasRegularExpressionMatch` no arquivo de manifesto XML com o valor de elemento `RegExName` especificado.

      Se você especificar uma regra `ItemHasRegularExpressionMatch` na propriedade do corpo de um item, a expressão regular deverá filtrar mais o corpo e não tentar retornar todo o corpo do item. Usar uma expressão regular como. * para obter o corpo inteiro de um item nem sempre retorna os resultados esperados.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
      ```
      ```javascript
      // This API would only work when you click on highlighted word "ScriptLab".
      console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: Uma matriz que contém as cadeias de caracteres que correspondem à expressão regular definida no arquivo de manifesto XML.
      parameters:
        - id: name
          description: O nome do elemento de regra `ItemHasRegularExpressionMatch` que define o filtro a corresponder.
          type:
            - string
  - uid: 'outlook!Office.AppointmentRead#getSelectedEntities:member(1)'
    summary: |-
      Obtém as entidades encontradas em uma correspondência realçada que um usuário selecionou. As correspondências realçadas aplicam-se aos suplementos contextuais.

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example accesses the addresses entities in the highlighted
      // match selected by the user.
      var addresses = Office.context.mailbox.item.getSelectedEntities().addresses;
      ```
      ```javascript
      var entities = Office.context.mailbox.item.getSelectedEntities();
      var entityTypesFound = 0;
      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }
      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }
      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }
      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }
      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }
      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }
      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }
      if (entityTypesFound == 0)
      {
          console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
      }
      ```
    name: getSelectedEntities()
    fullName: getSelectedEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.AppointmentRead#getSelectedRegExMatches:member(1)'
    summary: |-
      Retorna valores de cadeia de caracteres em uma correspondência realçada que corresponde às expressões regulares definidas no arquivo de manifesto XML. As correspondências realçadas aplicam-se aos suplementos contextuais.

      O método `getSelectedRegExMatches` retorna as cadeias de caracteres que correspondem à expressão regular definida em cada elemento de regra `ItemHasRegularExpressionMatch` ou `ItemHasKnownEntity` no arquivo de manifesto XML. Para uma regra `ItemHasRegularExpressionMatch`, uma cadeia de caracteres correspondente deve ocorrer na propriedade do item especificada por essa regra. O tipo simples `PropertyName` define as propriedades compatíveis.

      Se você especificar uma regra `ItemHasRegularExpressionMatch` na propriedade do corpo de um item, a expressão regular deverá filtrar mais o corpo e não tentar retornar todo o corpo do item. Usar uma expressão regular como. * para obter o corpo inteiro de um item nem sempre retorna os resultados esperados. Em vez disso, `Body.getAsync` use o método para recuperar todo o corpo

      **Observação**: esse método não tem suporte no Outlook no Ios ou no Android.

      \[[Conjunto de APIs: caixa de correio 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example shows how to access the array of matches for the
      // regular expression rule elements `fruits` and `veggies`, which are
      // specified in the manifest.
      var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();
      var fruits = selectedMatches.fruits;
      var veggies = selectedMatches.veggies;
      ```
      ```javascript
      var matches = Office.context.mailbox.item.getSelectedRegExMatches();
      if (matches) {
          console.log(matches);
      }
      else {
          console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
      }
      ```
    name: getSelectedRegExMatches()
    fullName: getSelectedRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type:
          - any
        description: Um objeto que contém matrizes de cadeias de caracteres que correspondem às expressões regulares definidas no arquivo XML do manifesto. O nome de cada matriz é igual ao valor correspondente do atributo `RegExName` da regra `ItemHasRegularExpressionMatch` correspondente ou do atributo `FilterName` da regra `ItemHasKnownEntity` correspondente.
  - uid: 'outlook!Office.AppointmentRead#getSharedPropertiesAsync:member(1)'
    summary: |-
      Obtém as propriedades de um compromisso ou uma mensagem em uma pasta compartilhada, calendário ou caixa de correio.

      **Observação**: esse método não tem suporte no Outlook no Mac, Ios ou Android.

      \[[Conjunto de APIs: caixa de correio 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
        if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
          Office.context.mailbox.item.getSharedPropertiesAsync(
            {
              // Pass auth token along.
              asyncContext: result.value
            },
            function(result2) {
              let sharedProperties = result2.value;
              let delegatePermissions = sharedProperties.delegatePermissions;

              // Determine if user can do the expected operation, e.g., do they have Write permission?
              if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
                var ewsId = Office.context.mailbox.item.itemId;
                var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
                let rest_url =
                  sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

                $.ajax({
                  url: rest_url,
                  dataType: "json",
                  headers: { Authorization: "Bearer " + result2.asyncContext }
                })
                  .done(function(response) {
                    console.log(response);
                  })
                  .fail(function(error) {
                    console.error(error);
                  });
              }
            }
          );
        }
      });
      ```
    name: 'getSharedPropertiesAsync(options, callback)'
    fullName: 'getSharedPropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. A `value` Propriedade do resultado é as propriedades do item compartilhado.'
          type:
            - 'outlook!Office.AppointmentRead#getSharedPropertiesAsync~0:complex'
  - uid: 'outlook!Office.AppointmentRead#getSharedPropertiesAsync:member(2)'
    summary: |-
      Obtém as propriedades de um compromisso ou uma mensagem em uma pasta compartilhada, calendário ou caixa de correio.

      **Observação**: esse método não tem suporte no Outlook no Mac, Ios ou Android.

      \[[Conjunto de APIs: caixa de correio 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      Office.context.mailbox.item.getSharedPropertiesAsync(callback);

      function callback (asyncResult) {
          var context = asyncResult.context;
          var sharedProperties = asyncResult.value;
      }
      ```
      ```javascript
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
        console.log(result.value);
      });
      ```
    name: getSharedPropertiesAsync(callback)
    fullName: getSharedPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->. A `value` Propriedade do resultado é as propriedades do item compartilhado.'
          type:
            - 'outlook!Office.AppointmentRead#getSharedPropertiesAsync~1:complex'
  - uid: 'outlook!Office.AppointmentRead#itemClass:member'
    summary: |-
      Obtém a classe do item dos Serviços Web do Exchange do item selecionado.

      Você pode criar classes de mensagem personalizadas que estendem uma classe de mensagem padrão, por exemplo, uma classe de mensagem de compromisso personalizada`IPM.Appointment.Contoso`<!-- -->.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      A propriedade `itemClass` especifica a classe da mensagem do item selecionado. A seguir estão as classes de mensagem padrão para o item de mensagem ou de compromisso.

      <table> <tr> <th>Tipo</th> <th>Descrição</th> <th>Classe de item</th> </tr> <tr> <td>Itens de compromisso</td> <td>Estes são os itens de calendário da classe de item IPM. Compromisso ou IPM. Compromisso. ocorrência.</td> <td>IPM. Compromisso, IPM. Compromisso. ocorrência</td> </tr> <tr> <td>Itens de mensagem</td> <td>Eles incluem mensagens de email que têm a classe de mensagem padrão IPM. Observação e solicitações de reunião, respostas e cancelamentos, que usam IPM. Agendar. Meeting como a classe de mensagem básica.</td> <td>IPM. Nota, IPM. Schedule. Meeting. Request, IPM. Schedule. Meeting. neg, IPM. Schedule. Meeting. pos, IPM. Schedule. Meeting. tenda, IPM. Schedule. Meeting. cancelada</td> </tr> </table>

      #### <a name="examples"></a>Exemplos

      ```javascript
      var itemClass = Office.context.mailbox.item.itemClass;
      console.log("Item class: " + itemClass);
      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#itemId:member'
    summary: |-
      Obtém o [identificador do item dos serviços Web do Exchange](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) para o item atual.

      A propriedade `itemId` não está disponível no modo de redação. Se for obrigatório o identificador de um item, pode ser usado o método `saveAsync` para salvar o item no servidor, o que retornará o identificador do item no parâmetro `asyncResult.value` na função de retorno de chamada.

      **Observação**: o identificador retornado pela `itemId` propriedade é o mesmo que o identificador de [item dos serviços Web do Exchange](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!-- -->. A propriedade `itemId` não é idêntica à ID de Entrada do Outlook ou a ID usada pela API REST do Outlook. Antes de fazer chamadas da API REST usando esse valor, ele deve ser convertido usando`Office.context.mailbox.convertToRestId`<!-- -->. Para obter mais detalhes, consulte [usar as APIs REST do Outlook a partir de um suplemento do Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)<!-- -->.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following code checks for the presence of an item
      // identifier. If the `itemId` property returns `null` or
      // `undefined`, it saves the item to the store and gets the
      // item identifier from the asynchronous result.
      // **Important**: `saveAsync` was introduced with requirement set 1.3
      // so you can't get the `itemId` in Compose mode in earlier sets.
      var itemId = Office.context.mailbox.item.itemId;
      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }
      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#itemType:member'
    summary: |-
      Obtém o tipo de item que representa uma instância.

      A `itemType` propriedade retorna um dos valores `ItemType` de enumeração, indicando se a instância do objeto item é uma mensagem ou um compromisso.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.AppointmentRead#itemType~0:complex'
  - uid: 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Carrega de forma assíncrona as propriedades personalizadas para esse suplemento no item selecionado.

      Propriedades personalizadas são armazenadas como pares chave/valor de acordo com o aplicativo e o item. Este método retorna um objeto `CustomProperties` no retorno de chamada, que oferece métodos para acessar as propriedades personalizadas específicas para o item atual e o suplemento atual. Propriedades personalizadas não são criptografadas no item, portanto não devem ser usadas como armazenamento seguro.

      As propriedades personalizadas são fornecidas como um `CustomProperties` objeto na Propriedade AsyncResult. Value. Esse objeto pode ser usado para obter, definir e remover as propriedades personalizadas do item e salvar as alterações na propriedade personalizada definida de volta no servidor.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: Opcional. Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar na função de retorno de chamada. Esse objeto pode ser acessado pela propriedade `asyncResult.asyncContext` na função de retorno de chamada.
          type:
            - any
  - uid: 'outlook!Office.AppointmentRead#location:member'
    summary: |-
      Obtém o local de um compromisso.

      A propriedade `location` retorna uma cadeia de caracteres que contém o local do compromisso.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var location = Office.context.mailbox.item.location;
      console.log("location: " + location);
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#normalizedSubject:member'
    summary: |-
      Obtém o assunto de um item, com todos os prefixos removidos (incluindo RE: e FWD:).

      A `normalizedSubject` propriedade Obtém o assunto do item, com qualquer prefixo padrão (como Re: e FW:) adicionadas por programas de email. Para obter o assunto do item com os prefixos intactos, use a propriedade `subject`.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var normalizedSubject = Office.context.mailbox.item.normalizedSubject;
      console.log("Normalized subject: " + normalizedSubject);
      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#notificationMessages:member'
    summary: |-
      Obtém as mensagens de notificação de um item.

      \[[Conjunto de APIs: caixa de correio 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Get all notifications.
      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
      ```
      ```javascript
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.AppointmentRead#optionalAttendees:member'
    summary: |-
      Fornece acesso aos participantes opcionais de um evento. O tipo de objeto e o nível de acesso dependem do modo do item atual.

      A `optionalAttendees` propriedade retorna uma matriz que contém um objeto [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) para cada participante opcional da reunião. Por padrão, o conjunto está limitado a um máximo de 100 membros. No entanto, no Windows e Mac, você pode ter o máximo de 500 membros.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var optionalAttendees = Office.context.mailbox.item.optionalAttendees;
      console.log("Optional attendees: " + JSON.stringify(optionalAttendees));
      ```
      ```javascript
      var apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;
      console.log("Optional attendees:");
      for (var i = 0; i < apptOptionalAttendees.length; i++) {
        console.log(
          apptOptionalAttendees[i].displayName +
            " (" +
            apptOptionalAttendees[i].emailAddress +
            ") - response: " +
            apptOptionalAttendees[i].appointmentResponse
        );
      }
      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#optionalAttendees~0:complex'
  - uid: 'outlook!Office.AppointmentRead#organizer:member'
    summary: Obtém o endereço de email do organizador da reunião para uma reunião especificada.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var organizerName = Office.context.mailbox.item.organizer.displayName;
      var organizerAddress = Office.context.mailbox.item.organizer.emailAddress;
      console.log("Organizer: " + organizerName + " (" + organizerAddress + ")");
      ```
      ```javascript
      var apptOrganizer = Office.context.mailbox.item.organizer;
      console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      ```
    name: organizer
    fullName: organizer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'organizer: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.AppointmentRead#recurrence:member'
    summary: |-
      Obtém o padrão de recorrência de um compromisso. Obtém o padrão de recorrência de uma solicitação de reunião.

      A `recurrence` propriedade retorna um objeto de [recorrência](xref:outlook!Office.Recurrence:interface) para compromissos recorrentes ou solicitações de reuniões se um item for uma série ou uma instância em uma série. `null`é retornado para compromissos únicos e solicitações de reunião de compromissos únicos.

      **Observação**: as solicitações de reunião `itemClass` têm um valor de`IPM.Schedule.Meeting.Request`<!-- -->.

      **Observação**: se o objeto Recurrence for nulo, isso indicará que o objeto é um único compromisso ou uma solicitação de reunião de um único compromisso e não uma parte de uma série.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var recurrence = Office.context.mailbox.item.recurrence;
      console.log("Recurrence: " + JSON.stringify(recurrence));
      ```
      ```javascript
      var recurrence = Office.context.mailbox.item.recurrence;

      if (recurrence === undefined) {
        console.log("This item is a message but not a meeting request.");
      } else if (recurrence === null) {
        console.log("This is a single appointment.");
      } else {
        console.log(recurrence);
      }
      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - 'outlook!Office.Recurrence:interface'
  - uid: 'outlook!Office.AppointmentRead#removeHandlerAsync:member(1)'
    summary: |-
      Remove um manipulador de eventos para um tipo de evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Para ver quais tipos de evento são suportados, `Office.EventType` consulte para obter detalhes.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve revogar o manipulador.
          type:
            - 'outlook!Office.AppointmentRead#removeHandlerAsync~0:complex'
        - id: options
          description: 'Opcional. Um objeto literal que contém uma ou mais das propriedades a seguir. `asyncContext`<!-- -->: Os desenvolvedores podem fornecer qualquer objeto que desejarem acessar no método de retorno de chamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentRead#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.AppointmentRead#removeHandlerAsync:member(2)'
    summary: |-
      Remove um manipulador de eventos para um tipo de evento com suporte. **Observação**: os eventos estão disponíveis somente com o painel de tarefas.

      Para ver quais tipos de evento são suportados, `Office.EventType` consulte para obter detalhes.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: O evento que deve revogar o manipulador.
          type:
            - 'outlook!Office.AppointmentRead#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Opcional. Quando o método for concluído, a função passada ao parâmetro callback será chamada com um único parâmetro,`asyncResult`<!-- -->, que é um `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentRead#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.AppointmentRead#requiredAttendees:member'
    summary: |-
      Fornece acesso aos participantes obrigatórios de um evento. O tipo de objeto e o nível de acesso dependem do modo do item atual.

      A `requiredAttendees` propriedade retorna uma matriz que contém um objeto [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) para cada participante obrigatório da reunião. Por padrão, o conjunto está limitado a um máximo de 100 membros. No entanto, no Windows e Mac, você pode ter o máximo de 500 membros.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var requiredAttendees = Office.context.mailbox.item.requiredAttendees;
      console.log("Required attendees: " + JSON.stringify(requiredAttendees));
      ```
      ```javascript
      var apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;
      console.log("Required attendees:");
      for (var i = 0; i < apptRequiredAttendees.length; i++) {
        console.log(
          apptRequiredAttendees[i].displayName +
            " (" +
            apptRequiredAttendees[i].emailAddress +
            ") - response: " +
            apptRequiredAttendees[i].appointmentResponse
        );
      }
      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#requiredAttendees~0:complex'
  - uid: 'outlook!Office.AppointmentRead#seriesId:member'
    summary: |-
      Obtém a ID da série à qual uma instância pertence.

      No Outlook na Web e clientes de desktop, o `seriesId` retorna a ID dos serviços Web do Exchange (EWS) do item pai (série) ao qual este item pertence. No entanto, no iOS e no Android, o seriesid retorna a ID REST do item pai.

      **Observação**: o identificador retornado pela `seriesId` propriedade é o mesmo que o identificador de item dos serviços Web do Exchange. A `seriesId` propriedade não é idêntica às IDs do Outlook usadas pela API REST do Outlook. Antes de fazer chamadas da API REST usando esse valor, ele deve ser convertido usando`Office.context.mailbox.convertToRestId`<!-- -->. Para obter mais detalhes, consulte [usar as APIs REST do Outlook a partir de um suplemento do Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.

      A `seriesId` propriedade retorna `null` para itens que não têm itens pai, como compromissos únicos, itens de série ou solicitações de reunião e retornam `undefined` para outros itens que não são solicitações de reunião.

      \[[Conjunto de APIs: caixa de correio 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      // The seriesId property returns null for items that do
      // not have parent items (such as single appointments,
      // series items, or meeting requests) and returns
      // undefined for messages that are not meeting requests.
      var isSeriesInstance = (seriesId != null);
      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#start:member'
    summary: |-
      Obtém a data e hora de início do compromisso.

      A `start` propriedade é um `Date` objeto expresso como um valor de data e hora Coordinated Universal Time (UTC). Você pode usar o `convertToLocalClientTime` método para converter o valor para a data e hora locais do cliente.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      var start = Office.context.mailbox.item.start;
      console.log("Appointment start: " + JSON.stringify(start));
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#subject:member'
    summary: |-
      Obtém a descrição que aparece no campo de assunto de um item.

      A propriedade `subject` obtém ou define o assunto completo do item, conforme enviado pelo servidor de email.

      A propriedade `subject` retorna uma cadeia de caracteres. Use a `normalizedSubject` propriedade para obter o assunto menos prefixos de entrelinha, como Re: e FW:.
    remarks: |-
      **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: participante do compromisso

      #### <a name="examples"></a>Exemplos

      ```javascript
      // The following JavaScript code example shows how to access the
      // `subject` property of the current item in Outlook.

      // The initialize function is required for all apps.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              var subject = item.subject;
              // Continue with processing the subject of the
              // current item, which can be a message or appointment.
          });
      };
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
references:
  - uid: 'outlook!Office.Appointment:interface'
    name: Appointment
  - uid: 'outlook!Office.ItemRead:interface'
    name: ItemRead
  - uid: 'outlook!Office.AppointmentRead#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.AppointmentRead#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentRead#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Categories:interface'
    name: Categories
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.EnhancedLocation:interface'
    name: EnhancedLocation
  - uid: 'outlook!Office.AppointmentRead#getAttachmentContentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentRead#getAttachmentContentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AppointmentRead#getInitializationContextAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentRead#getInitializationContextAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentRead#getSharedPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentRead#getSharedPropertiesAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentRead#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.AppointmentRead#optionalAttendees~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.EmailAddressDetails:interface'
    name: EmailAddressDetails
  - uid: 'outlook!Office.Recurrence:interface'
    name: Recurrence
  - uid: 'outlook!Office.AppointmentRead#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentRead#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentRead#requiredAttendees~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'