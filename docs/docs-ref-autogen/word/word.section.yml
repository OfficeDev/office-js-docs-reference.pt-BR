### YamlMime:UniversalReference
ms.openlocfilehash: bd19a46b78fece884d6372cbc3192f3767fc231f
ms.sourcegitcommit: 2dcedf6deec4167dca476a42dad411e28cc92a97
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 01/23/2019
ms.locfileid: "29384780"
items:
- uid: word.Word.Section
  summary: >-
    Representa uma seção em um documento do Word.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.Section
  fullName: Word.Section
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.Section.body
  - word.Word.Section.context
  - word.Word.Section.getFooter
  - word.Word.Section.getHeader
  - word.Word.Section.getNext
  - word.Word.Section.getNextOrNullObject
  - word.Word.Section.load
  - word.Word.Section.toJSON
  - word.Word.Section.track
  - word.Word.Section.untrack
- uid: word.Word.Section.body
  summary: >-
    Obtém o objeto do corpo da seção. Isso não inclui o cabeçalho/rodapé e outros metadados de seção. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly body: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.Section.context
  summary: O contexto de solicitação associado ao objeto. Esse procedimento fará processo do suplemento de processo do aplicativo host do Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: word.Word.Section.getFooter
  summary: >-
    Obtém um dos rodapés da seção.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getFooter(type)
  fullName: getFooter
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFooter(type: Word.HeaderFooterType): Word.Body;'
    return:
      type:
      - Word.Body
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy sectionsCollection object.\n    var mySections = context.document.sections;\n    \n    // Queue a commmand to load the sections.\n    context.load(mySections, 'body/style');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        // Create a proxy object the primary footer of the first section. \n        // Note that the footer is a body object.\n        var myFooter = mySections.items[0].getFooter(\"primary\");\n        \n        // Queue a command to insert text at the end of the footer.\n        myFooter.insertText(\"This is a footer.\", Word.InsertLocation.end);\n        \n        // Queue a command to wrap the header in a content control.\n        myFooter.insertContentControl();\n                              \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log(\"Added a footer to the first section.\");\n        });                    \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n  context.document.sections.getFirst().getFooter(\"Primary\")\n    .insertParagraph(\"This is a footer\", \"End\");\n\n  await context.sync();\n});\n```"
    parameters:
    - id: type
      description: "Obrigatório. O tipo de rodapé para retornar. Esse valor pode ser: 'Primário', 'FirstPage' ou 'EvenPages'."
      type:
      - word.Word.HeaderFooterType
- uid: word.Word.Section.getHeader
  summary: >-
    Obtém um dos cabeçalhos da seção.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getHeader(type)
  fullName: getHeader
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHeader(type: Word.HeaderFooterType): Word.Body;'
    return:
      type:
      - Word.Body
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy sectionsCollection object.\n    var mySections = context.document.sections;\n    \n    // Queue a commmand to load the sections.\n    context.load(mySections, 'body/style');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        // Create a proxy object the primary header of the first section. \n        // Note that the header is a body object.\n        var myHeader = mySections.items[0].getHeader(\"primary\");\n        \n        // Queue a command to insert text at the end of the header.\n        myHeader.insertText(\"This is a header.\", Word.InsertLocation.end);\n        \n        // Queue a command to wrap the header in a content control.\n        myHeader.insertContentControl();\n                              \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log(\"Added a header to the first section.\");\n        });                    \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n  context.document.sections.getFirst().getHeader(\"Primary\")\n    .insertParagraph(\"This is a header\", \"End\");\n\n  await context.sync();\n});\n```"
    parameters:
    - id: type
      description: "Obrigatório. O tipo de cabeçalho para retornar. Esse valor pode ser: 'Primário', 'FirstPage' ou 'EvenPages'."
      type:
      - word.Word.HeaderFooterType
- uid: word.Word.Section.getNext
  summary: >-
    Obtém a próxima seção. Gera se esta seção é a última.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getNext()
  fullName: getNext
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(): Word.Section;'
    return:
      type:
      - Word.Section
      description: ''
- uid: word.Word.Section.getNextOrNullObject
  summary: >-
    Obtém a próxima seção. Retorna um objeto nulo se esta seção é a última.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getNextOrNullObject()
  fullName: getNextOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(): Word.Section;'
    return:
      type:
      - Word.Section
      description: ''
- uid: word.Word.Section.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: >-
    Além dessa assinatura, esse método tem as seguintes assinaturas:


    `load(option?: { select?: string; expand?: string; }): Word.Section`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Section`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.Section;'
    return:
      type:
      - Word.Section
      description: ''
    parameters:
    - id: option
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: word.Word.Section.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.SectionData;'
    return:
      type:
      - Word.Interfaces.SectionData
      description: ''
- uid: word.Word.Section.track
  summary: Rastrear o objeto para ajuste automático, com base em torno de alterações no documento. Essa chamada é uma forma abreviada de context.trackedObjects.add(thisObject). Se você estiver usando este objeto nas chamadas ". Sync" e fora a execução sequencial de um lote de ".run" e get um erro "InvalidObjectPath" ao definir uma propriedade ou um método no objeto de invocação, você precisava adicionou o objeto ao objeto controlado coleção quando o objeto foi criado pela primeira vez.
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.Section;'
    return:
      type:
      - Word.Section
      description: ''
- uid: word.Word.Section.untrack
  summary: Versão a memória associada a este objeto, se tiver sido rastreado anteriormente. Essa chamada é um atalho para context.trackedObjects.remove(thisObject). Ter vários objetos controlados fica mais lenta do aplicativo host, portanto Lembre-se liberar todos os objetos adicionar, depois que terminar usá-los. Você precisará chamar "context.sync()" antes do lançamento de memória entrará em vigor.
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.Section;'
    return:
      type:
      - Word.Section
      description: ''
