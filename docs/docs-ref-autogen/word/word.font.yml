### YamlMime:UniversalReference
items:
  - uid: word.Word.Font
    summary: |-
      Representa uma fonte.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.Font
    fullName: Word.Font
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Font.bold
      - word.Word.Font.color
      - word.Word.Font.context
      - word.Word.Font.doubleStrikeThrough
      - word.Word.Font.highlightColor
      - word.Word.Font.italic
      - word.Word.Font.load
      - word.Word.Font.load_1
      - word.Word.Font.load_2
      - word.Word.Font.name
      - word.Word.Font.set
      - word.Word.Font.set_1
      - word.Word.Font.size
      - word.Word.Font.strikeThrough
      - word.Word.Font.subscript
      - word.Word.Font.superscript
      - word.Word.Font.toJSON
      - word.Word.Font.track
      - word.Word.Font.underline
      - word.Word.Font.untrack
  - uid: word.Word.Font.bold
    summary: |-
      Obtém ou define um valor que indica se a fonte está em negrito. True quando a fonte é formatada como negrito; caso contrário, false.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: bold
    fullName: bold
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bold: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.color
    summary: |-
      Obtém ou define a cor da fonte especificada. Você pode fornecer o valor no formato '\#RRGGBB ' ou o nome da cor.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: color
    fullName: color
    langs:
      - typeScript
    type: property
    syntax:
      content: 'color: string;'
      return:
        type:
          - string
  - uid: word.Word.Font.context
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: word.Word.Font.doubleStrikeThrough
    summary: |-
      Obtém ou define um valor que indica se a fonte tem um tachado duplo. True quando a fonte é formatada como texto tachado duplo; caso contrário, false.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: doubleStrikeThrough
    fullName: doubleStrikeThrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doubleStrikeThrough: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.highlightColor
    summary: |-
      Obtém ou define a cor de realce. Para defini-lo, use um valor no formato '\#RRGGBB ' ou o nome da cor. Para remover a cor de realce, defina-a como NULL. A cor de realce retornada pode estar no\#formato ' RRGGBB ', uma cadeia de caracteres vazia para cores de realce mistas ou NULL para nenhuma cor de realce.

      **Observação**: somente as cores de realce padrão estão disponíveis na área de trabalho do Office para Windows. Eles são "amarelo", "verde-limão", "turquesa", "rosa", "azul", "vermelho", "DarkBlue", "azul-petróleo", "verde", "roxo", "DarkRed", "Oliva", "cinza", "LightGray" e "preto". Quando o suplemento é executado no Office para área de trabalho do Windows, qualquer outra cor é convertida para a cor mais próxima quando aplicada à fonte.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: highlightColor
    fullName: highlightColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'highlightColor: string;'
      return:
        type:
          - string
  - uid: word.Word.Font.italic
    summary: |-
      Obtém ou define um valor que indica se a fonte está em itálico. True quando a fonte está em itálico; caso contrário, false.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: italic
    fullName: italic
    langs:
      - typeScript
    type: property
    syntax:
      content: 'italic: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.load
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
    remarks: |-
      Além dessa assinatura, este método tem as seguintes assinaturas:

      `load(option?: string | string[]): Word.Font`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.

      `load(option?: { select?: string; expand?: string; }): Word.Font`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Font`– Disponível somente nos tipos de coleção. É semelhante à assinatura anterior. Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado. Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado. Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.

      #### <a name="examples"></a>Exemplos

      ```javascript
      // Change the font name
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the current selection's font name.
          selection.font.name = 'Arial';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font name has changed.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Change the font color
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the font color of the current selection.
          selection.font.color = 'blue';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font color of the selection has been changed.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Change the font size
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the current selection's font size.
          selection.font.size = 20;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font size has changed.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Highlight selected text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to highlight the current selection.
          selection.font.highlightColor = '#FFFF00'; // Yellow

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection has been highlighted.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Bold format text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to make the current selection bold.
          selection.font.bold = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection is now bold.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Underline format text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to underline the current selection.
          selection.font.underline = Word.UnderlineType.single;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection now has an underline style.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Strike format text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to strikethrough the font of the current selection.
          selection.font.strikeThrough = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection now has a strikethrough.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.FontLoadOptions): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - word.Word.Interfaces.FontLoadOptions
  - uid: word.Word.Font.load_1
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: word.Word.Font.load_2
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word.Word.Font.name
    summary: |-
      Obtém ou define um valor que representa o nome da fonte.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: word.Word.Font.set
    summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
    remarks: |-
      Este método tem a seguinte assinatura adicional:

      `set(properties: Word.Font): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.FontUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.
          type:
            - Interfaces.FontUpdateData
        - id: options
          description: Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: word.Word.Font.set_1
    summary: 'Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Font): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - word.Word.Font
  - uid: word.Word.Font.size
    summary: |-
      Obtém ou define um valor que representa o tamanho da fonte em pontos.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: size
    fullName: size
    langs:
      - typeScript
    type: property
    syntax:
      content: 'size: number;'
      return:
        type:
          - number
  - uid: word.Word.Font.strikeThrough
    summary: |-
      Obtém ou define um valor que indica se a fonte tem um tachado. True quando a fonte é formatada como texto tachado; caso contrário, false.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: strikeThrough
    fullName: strikeThrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'strikeThrough: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.subscript
    summary: |-
      Obtém ou define um valor que indica se a fonte é um subscrito. True quando a fonte é formatada como subscrito; caso contrário, false.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: subscript
    fullName: subscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subscript: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.superscript
    summary: |-
      Obtém ou define um valor que indica se a fonte é um sobrescrito. True quando a fonte é formatada como sobrescrito; caso contrário, false.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: superscript
    fullName: superscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'superscript: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.toJSON
    summary: 'Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Word. Font original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Word.Interfaces.FontData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.FontData;'
      return:
        type:
          - word.Word.Interfaces.FontData
        description: ''
  - uid: word.Word.Font.track
    summary: 'Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação de context.trackedObjects.add(thisObject). Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
  - uid: word.Word.Font.underline
    summary: |-
      Obtém ou define um valor que indica o tipo de sublinhado da fonte. ' Nenhum ' se a fonte não estiver sublinhada.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: underline
    fullName: underline
    langs:
      - typeScript
    type: property
    syntax:
      content: 'underline: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";'
      return:
        type:
          - Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble"
  - uid: word.Word.Font.untrack
    summary: 'Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject). Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''