### YamlMime:UniversalReference
ms.openlocfilehash: 27394556625c23b97c1b4d83977ae05ab79cee92
ms.sourcegitcommit: 4e15262bb3005b2f4ebb2756484e6a1b4e2379bd
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 01/08/2019
ms.locfileid: "27770536"
items:
- uid: word.Word.ContentControl
  summary: >-
    Representa um controle de conteúdo. Controles de conteúdo são regiões limitadas e possivelmente rotuladas de um documento, que servem como contêineres para tipos específicos de conteúdo. Os controles de conteúdo individuais podem incluir conteúdo, como imagens, tabelas ou parágrafos de texto formatado. Atualmente, temos suporte apenas para controles de conteúdo de rich text.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.ContentControl
  fullName: Word.ContentControl
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.ContentControl.appearance
  - word.Word.ContentControl.cannotDelete
  - word.Word.ContentControl.cannotEdit
  - word.Word.ContentControl.clear
  - word.Word.ContentControl.color
  - word.Word.ContentControl.contentControls
  - word.Word.ContentControl.delete
  - word.Word.ContentControl.font
  - word.Word.ContentControl.getHtml
  - word.Word.ContentControl.getOoxml
  - word.Word.ContentControl.getRange
  - word.Word.ContentControl.getTextRanges
  - word.Word.ContentControl.id
  - word.Word.ContentControl.inlinePictures
  - word.Word.ContentControl.insertBreak
  - word.Word.ContentControl.insertFileFromBase64
  - word.Word.ContentControl.insertHtml
  - word.Word.ContentControl.insertInlinePictureFromBase64
  - word.Word.ContentControl.insertOoxml
  - word.Word.ContentControl.insertParagraph
  - word.Word.ContentControl.insertTable
  - word.Word.ContentControl.insertText
  - word.Word.ContentControl.lists
  - word.Word.ContentControl.load
  - word.Word.ContentControl.paragraphs
  - word.Word.ContentControl.parentBody
  - word.Word.ContentControl.parentContentControl
  - word.Word.ContentControl.parentContentControlOrNullObject
  - word.Word.ContentControl.parentTable
  - word.Word.ContentControl.parentTableCell
  - word.Word.ContentControl.parentTableCellOrNullObject
  - word.Word.ContentControl.parentTableOrNullObject
  - word.Word.ContentControl.placeholderText
  - word.Word.ContentControl.removeWhenEdited
  - word.Word.ContentControl.search
  - word.Word.ContentControl.select
  - word.Word.ContentControl.split
  - word.Word.ContentControl.style
  - word.Word.ContentControl.styleBuiltIn
  - word.Word.ContentControl.subtype
  - word.Word.ContentControl.tables
  - word.Word.ContentControl.tag
  - word.Word.ContentControl.text
  - word.Word.ContentControl.title
  - word.Word.ContentControl.toJSON
  - word.Word.ContentControl.track
  - word.Word.ContentControl.type
  - word.Word.ContentControl.untrack
- uid: word.Word.ContentControl.appearance
  summary: >-
    Obtém ou define a aparência do controle de conteúdo. O valor pode ser 'BoundingBox', 'Tags' ou 'Oculto'.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: appearance
  fullName: appearance
  langs:
  - typeScript
  type: property
  syntax:
    content: 'appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";'
    return:
      type:
      - Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden"
- uid: word.Word.ContentControl.cannotDelete
  summary: >-
    Obtém ou define um valor que indica se o usuário pode excluir o controle de conteúdo. Mutuamente exclusivo com a propriedade removeWhenEdited.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: cannotDelete
  fullName: cannotDelete
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cannotDelete: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.ContentControl.cannotEdit
  summary: >-
    Obtém ou define um valor que indica se o usuário pode editar o conteúdo do controle de conteúdo.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: cannotEdit
  fullName: cannotEdit
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cannotEdit: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.ContentControl.clear
  summary: >-
    Limpa o conteúdo do controle de conteúdo. O usuário pode executar a operação de desfazer no conteúdo limpo.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: clear()
  fullName: clear
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n            \n            // Queue a command to clear the contents of the first content control.\n            contentControls.items[0].clear();\n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });      \n        }\n            \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControl.color
  summary: >-
    Obtém ou define a cor do controle de conteúdo. Cor é especificada em '\#RRGGBB' Formatar ou usando o nome da cor.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: color
  fullName: color
  langs:
  - typeScript
  type: property
  syntax:
    content: 'color: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.contentControls
  summary: >-
    Obtém a coleção de objetos de controle de conteúdo no controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: contentControls
  fullName: contentControls
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
- uid: word.Word.ContentControl.delete
  summary: >-
    Exclui o controle de conteúdo e o respectivo conteúdo. Quando keepContent é definido como verdadeiro, o conteúdo não é excluído.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: delete(keepContent)
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(keepContent: boolean): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n            \n            // Queue a command to delete the first content control. The\n            // contents will remain in the document.\n            contentControls.items[0].delete(true);\n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });      \n        }\n            \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: keepContent
      description: Obrigatória. Indica se o conteúdo deve ser excluído com o controle de conteúdo. Quando keepContent é definido como verdadeiro, o conteúdo não é excluído.
      type:
      - boolean
- uid: word.Word.ContentControl.font
  summary: >-
    Obtém o formato de texto do controle de conteúdo. Use isto para obter e definir o nome, o tamanho e a cor da fonte, além de outras propriedades. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: font
  fullName: font
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type:
      - word.Word.Font
- uid: word.Word.ContentControl.getHtml
  summary: >-
    Obtém a representação HTML do objeto do controle de conteúdo.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getHtml()
  fullName: getHtml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection that contains a specific tag.\n    var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n    \n    // Queue a command to load the tag property for all of content controls. \n    context.load(contentControlsWithTag, 'tag');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTag.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to get the HTML contents of the first content control.\n            var html = contentControlsWithTag.items[0].getHtml();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Content control HTML: ' + html.value);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControl.getOoxml
  summary: >-
    Obtém a representação OOXML (Office Open XML) do objeto do controle de conteúdo.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getOoxml()
  fullName: getOoxml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to get the OOXML contents of the first content control.\n            var ooxml = contentControls.items[0].getOoxml();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Content control OOXML: ' + ooxml.value);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControl.getRange
  summary: >-
    Obtém o controle de todo o conteúdo, ou então, os pontos inicial ou final do controle de conteúdo, como um intervalo.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getRange(rangeLocation)
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocation
      description: Opcional. A localização de intervalo pode ser 'Todo', 'Antes', 'Iniciar', 'End', 'Depois,' ou 'Conteúdo'.
      type:
      - word.Word.RangeLocation
- uid: word.Word.ContentControl.getTextRanges
  summary: >-
    Obtém os intervalos de texto no controle de conteúdo usando marcas de pontuação e/ou outras marcas finais.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getTextRanges(endingMarks, trimSpacing)
  fullName: getTextRanges
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: endingMarks
      description: Obrigatório. As marcas de pontuação e/ou outras marcas finais como uma matriz de cadeias de caracteres.
      type:
      - string[]
    - id: trimSpacing
      description: Opcional. Indica se aparar caracteres espaçamento (espaços, guias, quebras de coluna e marcas de fim de parágrafo), do início e fim dos intervalos retornado na coleção de intervalo. Padrão é false, que indica que os caracteres de espaçamento no início e fim dos intervalos estão incluídos na coleção range.
      type:
      - boolean
- uid: word.Word.ContentControl.id
  summary: >-
    Obtém um número inteiro que representa o identificador do controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: number;'
    return:
      type:
      - number
- uid: word.Word.ContentControl.inlinePictures
  summary: >-
    Obtém a coleção de objetos inlinePicture no controle de conteúdo. A coleção não inclui imagens flutuantes. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: inlinePictures
  fullName: inlinePictures
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type:
      - word.Word.InlinePictureCollection
- uid: word.Word.ContentControl.insertBreak
  summary: >-
    Insere uma quebra no local especificado no documento principal. O valor de insertLocation pode ser 'Iniciar', 'End', 'Before' ou 'Depois'. Este método não pode ser usado com controles de conteúdo 'RichTextTable', 'RichTextTableRow' e 'RichTextTableCell'.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertBreak(breakType, insertLocation)
  fullName: insertBreak
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a commmand to load the id property for all of content controls. \n    context.load(contentControls, 'id');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion. We now will have \n    // access to the content control collection.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to insert a page break after the first content control. \n            contentControls.items[0].insertBreak('page', \"After\");\n            \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion. \n            return context.sync()\n                .then(function () {\n                    console.log('Inserted a page break after the first content control.');    \n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: breakType
      description: Obrigatório. Tipo de quebra.
      type:
      - word.Word.BreakType
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Iniciar', 'End', 'Before' ou 'Depois'.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertFileFromBase64
  summary: >-
    Insere um documento no controle de conteúdo no local especificado. O valor de insertLocation pode ser 'Replace', 'Iniciar' ou 'End'.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertFileFromBase64(base64File, insertLocation)
  fullName: insertFileFromBase64
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to put HTML into the contents of the first content control.\n            contentControls.items[0].insertHtml(\n                '<strong>HTML content inserted into the content control.</strong>',\n                'Start');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted HTML in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: base64File
      description: Obrigatório. O conteúdo em código de Base64 de um arquivo .docx.
      type:
      - string
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Replace', 'Iniciar' ou 'End'. 'Replace' não pode ser usado com controles de conteúdo 'RichTextTable' e 'RichTextTableRow'.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertHtml
  summary: >-
    Insere HTML o controle de conteúdo no local especificado. O valor de insertLocation pode ser 'Replace', 'Iniciar' ou 'End'.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertHtml(html, insertLocation)
  fullName: insertHtml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: html
      description: Obrigatória. O HTML a inserir no controle de conteúdo.
      type:
      - string
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Replace', 'Iniciar' ou 'End'. 'Replace' não pode ser usado com controles de conteúdo 'RichTextTable' e 'RichTextTableRow'.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertInlinePictureFromBase64
  summary: >-
    Insere uma imagem embutida o controle de conteúdo no local especificado. O valor de insertLocation pode ser 'Replace', 'Iniciar' ou 'End'.


    \[[Conjunto de APIs: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  fullName: insertInlinePictureFromBase64
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to put OOXML into the contents of the first content control.\n            contentControls.items[0].insertOoxml(\"<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>\", \"End\");\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted OOXML in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// Read \"Create better add-ins for Word with Office Open XML\" for guidance on working with OOXML.\n// https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml\n```"
    parameters:
    - id: base64EncodedImage
      description: Obrigatória. A imagem em codificação de Base 64 a inserir no controle de conteúdo.
      type:
      - string
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Replace', 'Iniciar' ou 'End'. 'Replace' não pode ser usado com controles de conteúdo 'RichTextTable' e 'RichTextTableRow'.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertOoxml
  summary: >-
    Insere OOXML o controle de conteúdo no local especificado. O valor de insertLocation pode ser 'Replace', 'Iniciar' ou 'End'.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertOoxml(ooxml, insertLocation)
  fullName: insertOoxml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: ooxml
      description: Obrigatório. O OOXML a ser inserido no controle de conteúdo.
      type:
      - string
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Replace', 'Iniciar' ou 'End'. 'Replace' não pode ser usado com controles de conteúdo 'RichTextTable' e 'RichTextTableRow'.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertParagraph
  summary: >-
    Insere um parágrafo no local especificado. O valor de insertLocation pode ser 'Iniciar', 'End', 'Before' ou 'Depois'. Esse método é suportado somente se o controle de conteúdo abrange um ou mais parágrafos em totalidade.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertParagraph(paragraphText, insertLocation)
  fullName: insertParagraph
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to insert a paragraph after the first content control. \n            contentControls.items[0].insertParagraph('Text of the inserted paragraph.', 'After');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted a paragraph after the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: paragraphText
      description: Obrigatória. O texto do parágrafo a ser inserido.
      type:
      - string
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Iniciar', 'End', 'Before' ou 'Depois'. 'Antes' e 'After' não pode ser usado com 'RichTextTable', 'RichTextTableRow' e 'RichTextTableCell' conteúdo controla.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertTable
  summary: >-
    Insere uma tabela com o número especificado de linhas e colunas em, ou ao lado de um controle de conteúdo. O valor de insertLocation pode ser 'Iniciar', 'End', 'Before' ou 'Depois'.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertTable(rowCount, columnCount, insertLocation, values)
  fullName: insertTable
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: Obrigatório. A quantidade de linhas na tabela.
      type:
      - number
    - id: columnCount
      description: Obrigatório. A quantidade de colunas na tabela.
      type:
      - number
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Iniciar', 'End', 'Before' ou 'Depois'. 'Antes' e 'After' não pode ser usado com 'RichTextTable', 'RichTextTableRow' e 'RichTextTableCell' conteúdo controla.
      type:
      - Word.InsertLocation
    - id: values
      description: Matriz 2D opcional. As células serão preenchidas se as cadeias de caracteres correspondentes estiverem especificadas na matriz.
      type:
      - string[][]
- uid: word.Word.ContentControl.insertText
  summary: >-
    Insere o texto no controle de conteúdo no local especificado. O valor de insertLocation pode ser 'Replace', 'Iniciar' ou 'End'.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertText(text, insertLocation)
  fullName: insertText
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to replace text in the first content control. \n            contentControls.items[0].insertText('Replaced text in the first content control.', 'Replace');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Replaced text in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Silly stories add-in sample shows how to use the insertText method.\n// https://aka.ms/sillystorywordaddin\n```"
    parameters:
    - id: text
      description: Obrigatória. O texto a inserir no controle de conteúdo.
      type:
      - string
    - id: insertLocation
      description: Obrigatório. O valor pode ser 'Replace', 'Iniciar' ou 'End'. 'Replace' não pode ser usado com controles de conteúdo 'RichTextTable' e 'RichTextTableRow'.
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.lists
  summary: >-
    Obtém a coleção de listas de objetos no controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: lists
  fullName: lists
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly lists: Word.ListCollection;'
    return:
      type:
      - word.Word.ListCollection
- uid: word.Word.ContentControl.load
  summary: Filas de backup de um comando para carregar as propriedades especificadas do objeto. Você deve chamar "context.sync()" antes de ler as propriedades.
  remarks: "Além dessa assinatura, esse método tem as seguintes assinaturas:\n\n`load(option?: { select?: string; expand?: string; }): Word.ContentControl`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControl`-Só está disponível em tipos de coleção. Ele é semelhante à assinatura anterior. Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção. Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado. Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy range object for the current selection.\n    var range = context.document.getSelection();\n    \n    // Queue a commmand to create the content control.\n    var myContentControl = range.insertContentControl();\n    myContentControl.tag = 'Customer-Address';\n    myContentControl.title = ' has t';\n    myContentControl.style = 'Heading 2';\n    myContentControl.insertText('One Microsoft Way, Redmond, WA 98052', 'replace');\n    myContentControl.cannotEdit = true;\n    \n    // Queue a command to load the id property for the content control you created.\n    context.load(myContentControl, 'id');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Created content control with id: ' + myContentControl.id);\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Load all of the content control properties\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to load the properties on the first content control. \n            contentControls.items[0].load(  'appearance,' +\n                                            'cannotDelete,' +\n                                            'cannotEdit,' +\n                                            'id,' +\n                                            'placeHolderText,' +\n                                            'removeWhenEdited,' +\n                                            'title,' +\n                                            'text,' +\n                                            'type,' +\n                                            'style,' +\n                                            'tag,' +\n                                            'font/size,' +\n                                            'font/name,' +\n                                            'font/color');             \n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Property values of the first content control:' + \n                        '   ----- appearance: ' + contentControls.items[0].appearance + \n                        '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +\n                        '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +\n                        '   ----- color: ' + contentControls.items[0].color +\n                        '   ----- id: ' + contentControls.items[0].id +\n                        '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +\n                        '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +\n                        '   ----- title: ' + contentControls.items[0].title +\n                        '   ----- text: ' + contentControls.items[0].text +\n                        '   ----- type: ' + contentControls.items[0].type +\n                        '   ----- style: ' + contentControls.items[0].style +\n                        '   ----- tag: ' + contentControls.items[0].tag +\n                        '   ----- font size: ' + contentControls.items[0].font.size +\n                        '   ----- font name: ' + contentControls.items[0].font.name +\n                        '   ----- font color: ' + contentControls.items[0].font.color);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
    parameters:
    - id: option
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.
      type:
      - string | string[]
- uid: word.Word.ContentControl.paragraphs
  summary: >-
    Obtém a coleção de objetos Paragraph no controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: paragraphs
  fullName: paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
- uid: word.Word.ContentControl.parentBody
  summary: >-
    Obtém o corpo pai do controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentBody
  fullName: parentBody
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentBody: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.ContentControl.parentContentControl
  summary: >-
    Obtém o controle de conteúdo que inclui o controle de conteúdo. Retorna uma exceção quando não há um controle de conteúdo pai. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControl
  fullName: parentContentControl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.ContentControl.parentContentControlOrNullObject
  summary: >-
    Obtém o controle de conteúdo que inclui o controle de conteúdo. Retorna um objeto nulo quando não há um controle de conteúdo pai. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControlOrNullObject
  fullName: parentContentControlOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.ContentControl.parentTable
  summary: >-
    Obtém a tabela que contém o controle de conteúdo. Gera uma exceção se não está contido em uma tabela. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTable
  fullName: parentTable
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTable: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.ContentControl.parentTableCell
  summary: >-
    Obtém a célula de tabela que contém o controle de conteúdo. Gera uma exceção se não está contido em uma célula de tabela. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCell
  fullName: parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.ContentControl.parentTableCellOrNullObject
  summary: >-
    Obtém a célula de tabela que contém o controle de conteúdo. Retorna um objeto nulo se não estiver contido em uma célula de tabela. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCellOrNullObject
  fullName: parentTableCellOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.ContentControl.parentTableOrNullObject
  summary: >-
    Obtém a tabela que contém o controle de conteúdo. Retorna um objeto nulo se não estiver contido em uma tabela. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableOrNullObject
  fullName: parentTableOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableOrNullObject: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.ContentControl.placeholderText
  summary: >-
    Obtém o texto de espaço reservado do controle de conteúdo. Texto esmaecido será exibido quando o controle de conteúdo está vazio.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: placeholderText
  fullName: placeholderText
  langs:
  - typeScript
  type: property
  syntax:
    content: 'placeholderText: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.removeWhenEdited
  summary: >-
    Obtém ou define um valor que determina quando o controle de conteúdo é removido após a edição. Mutuamente exclusivo com a propriedade cannotDelete.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: removeWhenEdited
  fullName: removeWhenEdited
  langs:
  - typeScript
  type: property
  syntax:
    content: 'removeWhenEdited: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.ContentControl.search
  summary: >-
    Executa uma pesquisa com o SearchOptions especificado no escopo do objeto de controle de conteúdo. Os resultados da pesquisa são uma coleção de objetos range.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: search(searchText, searchOptions)
  fullName: search
  langs:
  - typeScript
  type: method
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    return:
      type:
      - word.Word.RangeCollection
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to select the first content control.\n            contentControls.items[0].select();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Selected the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: searchText
      description: Obrigatória. O texto da pesquisa.
      type:
      - string
    - id: searchOptions
      description: Opcional. Opções da pesquisa.
      type:
      - >-
        Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
- uid: word.Word.ContentControl.select
  summary: >-
    Seleciona o controle de conteúdo. Isso faz com que o Word role até a seleção.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: select(selectionMode)
  fullName: select
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: selectionMode
      description: Opcional.  O modo de seleção pode ser 'Select', 'Start' ou 'End'. 'Select' é o padrão.
      type:
      - Word.SelectionMode
- uid: word.Word.ContentControl.split
  summary: >-
    Divide o controle de conteúdo em intervalos filho usando delimitadores.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  fullName: split
  langs:
  - typeScript
  type: method
  syntax:
    content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: delimiters
      description: Obrigatório. Os delimitadores como uma matriz de cadeias de caracteres.
      type:
      - string[]
    - id: multiParagraphs
      description: Opcional. Indica se um intervalo retornado filho pode abranger vários parágrafos. Padrão é false, que indica que os limites de parágrafo também são usados como delimitadores.
      type:
      - boolean
    - id: trimDelimiters
      description: Opcional. Indica se aparar delimitadores dos intervalos da coleção range. Padrão é false, que indica se os delimitadores estão incluídos nos intervalos retornados na coleção de intervalo.
      type:
      - boolean
    - id: trimSpacing
      description: Opcional. Indica se aparar caracteres espaçamento (espaços, guias, quebras de coluna e marcas de fim de parágrafo), do início e fim dos intervalos retornado na coleção de intervalo. Padrão é false, que indica que os caracteres de espaçamento no início e fim dos intervalos estão incluídos na coleção range.
      type:
      - boolean
- uid: word.Word.ContentControl.style
  summary: >-
    Obtém ou define o nome de estilo para o controle de conteúdo. Use esta propriedade de estilos personalizados e nomes de estilo localizados. Para usar os estilos internos que são portáteis entre localidades, confira a propriedade "styleBuiltIn".


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.styleBuiltIn
  summary: >-
    Obtém ou define o nome do estilo interno para o controle de conteúdo. Use esta propriedade para estilos internos que são portáteis entre localidades. Para usar estilos personalizados ou nomes de estilo localizados, confira a propriedade "estilo".


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: styleBuiltIn
  fullName: styleBuiltIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
    return:
      type:
      - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
- uid: word.Word.ContentControl.subtype
  summary: >-
    Obtém o subtipo de controle de conteúdo. O subtipo pode ser 'RichTextInline', 'RichTextParagraphs', 'RichTextTableCell', 'RichTextTableRow' e 'RichTextTable' para controles de conteúdo em rich text. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: subtype
  fullName: subtype
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly subtype: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
    return:
      type:
      - Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
- uid: word.Word.ContentControl.tables
  summary: >-
    Obtém a coleção de objetos de tabela no controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Word.TableCollection;'
    return:
      type:
      - Word.TableCollection
- uid: word.Word.ContentControl.tag
  summary: >-
    Obtém ou define uma marca para identificar um controle de conteúdo.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: tag
  fullName: tag
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tag: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\n// Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags\nawait Word.run(async (context) => {\n    let paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); //Don't need any properties, we'll just wrap each paragraph with a content control\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n        let contentControl = paragraphs.items[i].insertContentControl();\n        // For even we tag \"even\"\n        if (i % 2 === 0) {\n            contentControl.tag = \"even\";\n        }\n\n        else {\n            contentControl.tag = \"odd\";\n        }\n    }\n    console.log(\"Content controls inserted: \" + paragraphs.items.length)\n\n    await context.sync();\n});\n\n```"
- uid: word.Word.ContentControl.text
  summary: >-
    Obtém o texto do controle de conteúdo. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.title
  summary: >-
    Obtém ou define o título do controle de conteúdo.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: title
  fullName: title
  langs:
  - typeScript
  type: property
  syntax:
    content: 'title: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlData;'
    return:
      type:
      - word.Word.Interfaces.ContentControlData
      description: ''
- uid: word.Word.ContentControl.track
  summary: Rastrear o objeto para ajuste automático, com base em torno de alterações no documento. Essa chamada é uma forma abreviada de context.trackedObjects.add(thisObject). Se você estiver usando este objeto nas chamadas ". Sync" e fora a execução sequencial de um lote de ".run" e get um erro "InvalidObjectPath" ao definir uma propriedade ou um método no objeto de invocação, você precisava adicionou o objeto ao objeto controlado coleção quando o objeto foi criado pela primeira vez.
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
- uid: word.Word.ContentControl.type
  summary: >-
    Obtém o tipo de controle de conteúdo. Atualmente, temos suporte apenas para controles de conteúdo de rich text. Somente leitura.


    \[[Conjunto de APIs: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
    return:
      type:
      - Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
- uid: word.Word.ContentControl.untrack
  summary: Versão a memória associada a este objeto, se tiver sido rastreado anteriormente. Essa chamada é um atalho para context.trackedObjects.remove(thisObject). Ter vários objetos controlados fica mais lenta do aplicativo host, portanto Lembre-se liberar todos os objetos adicionar, depois que terminar usá-los. Você precisará chamar "context.sync()" antes do lançamento de memória entrará em vigor.
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
