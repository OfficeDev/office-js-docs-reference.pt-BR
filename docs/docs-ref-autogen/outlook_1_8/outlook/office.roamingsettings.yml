### YamlMime:TSType
name: Office.RoamingSettings
uid: outlook!Office.RoamingSettings:interface
package: outlook!
fullName: Office.RoamingSettings
summary: >-
  As configurações criadas com os métodos do objeto `RoamingSettings` são salvas de acordo de acordo com o suplemento e o usuário. Ou seja, eles estão disponíveis apenas para o suplemento que os criou e somente da caixa de correio do usuário em que foram salvos.


  Enquanto a API do suplemento do Outlook limita o acesso a essas configurações apenas para o suplemento que as criou, essas configurações não devem ser consideradas de armazenamento seguro. Elas podem ser acessadas pelos Serviços Web do Exchange ou por MAPI estendido. Elas não devem ser usadas para armazenar informações confidenciais, como credenciais de usuário ou tokens de segurança.


  O nome de uma configuração é uma String, enquanto o valor pode ser uma String, um Number, um Boolean, nulo, um Object ou uma Array.


  O objeto `RoamingSettings` pode ser acessado por meio da propriedade `roamingSettings` no namespace `Office.context`.


  **Importante**:


  - O `RoamingSettings` objeto é inicializado somente a partir do armazenamento persistente quando o suplemento é carregado pela primeira vez. Para painéis de tarefas, isso significa que ele só será inicializado quando o painel de tarefas for aberto pela primeira vez. Se o painel de tarefas navegar para outra página ou recarregar a página atual, o objeto na memória será redefinido para seus valores iniciais, mesmo que seu suplemento tenha persistentedo alterações. As alterações persistentes não estarão disponíveis até que o painel de tarefas (ou item no caso de suplementos sem interface do usuário) seja fechado e reaberto.


  - Quando definido e salvo por meio do Outlook no Windows ou Mac, essas configurações serão refletidas no Outlook na Web somente após uma atualização do navegador.
remarks: >-
  **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


  **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura
isPreview: false
isDeprecated: false
type: interface
methods:
- name: get(name)
  uid: outlook!Office.RoamingSettings#get:member(1)
  package: outlook!
  fullName: get(name)
  summary: Recupera a configuração especificada.
  remarks: >-
    **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


    **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = Office.context.roamingSettings.get(settingName);

    $("#settingValue").val(settingValue);

    console.log(`The value of setting "${settingName}" is "${settingValue}".`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'get(name: string): any;'
    parameters:
    - id: name
      description: O nome da configuração a ser recuperado diferencia maiúsculas de minúsculas.
      type: string
    return:
      type: any
      description: 'Tipo: \| matriz de \| \| objeto Boolean de número \| de cadeia de caracteres'
- name: remove(name)
  uid: outlook!Office.RoamingSettings#remove:member(1)
  package: outlook!
  fullName: remove(name)
  summary: Remove a configuração especificada
  remarks: >-
    **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


    **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'remove(name: string): void;'
    parameters:
    - id: name
      description: O nome da configuração a ser removida diferencia maiúsculas de minúsculas.
      type: string
    return:
      type: void
      description: ''
- name: saveAsync(callback)
  uid: outlook!Office.RoamingSettings#saveAsync:member(1)
  package: outlook!
  fullName: saveAsync(callback)
  summary: >-
    Salva as configurações.


    Quaisquer configurações previamente salvas por um suplemento são carregadas quando ele for inicializado, portanto, durante o tempo de vida da sessão, você pode simplesmente usar os métodos set e get para trabalhar com a cópia na memória do recipiente de propriedades de configurações. Quando você desejar manter as configurações para que elas fiquem disponíveis na próxima vez que o suplemento for usado, use o método saveAsync.
  remarks: >-
    **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


    **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    // Save settings in the mailbox to make it available in future sessions.

    Office.context.roamingSettings.saveAsync(function(result) {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
      } else {
        console.log(`Settings saved with status: ${result.status}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: Opcional. Quando o método for concluído, a função passada ao `callback` parâmetro será chamada com um único parâmetro do tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: set(name, value)
  uid: outlook!Office.RoamingSettings#set:member(1)
  package: outlook!
  fullName: set(name, value)
  summary: >-
    Define ou cria a configuração especificada.


    O `set` método cria uma nova configuração do nome especificado, caso ainda não exista, ou define uma configuração existente do nome especificado. O valor é armazenado no documento como a representação JSON serializada do seu tipo de dados.


    Um máximo de 32 KB está disponível para as configurações de cada suplemento.


    As alterações feitas nas configurações usando a função Set não serão salvas no servidor até que a `saveAsync` função seja chamada.
  remarks: >-
    **<!-- --> [Nível de permissão mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


    **<!-- --> [Modo do Outlook aplicável](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redação ou leitura


    #### <a name="examples"></a>Exemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = $("#settingValue").val();

    Office.context.roamingSettings.set(settingName, settingValue);

    console.log(`Setting "${settingName}" set to value "${settingValue}".`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(name: string, value: any): void;'
    parameters:
    - id: name
      description: O nome da configuração a ser definido ou criado; diferencia maiúsculas de minúsculas.
      type: string
    - id: value
      description: Specifies the value to be stored.
      type: any
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: f6136a4f9143de97fa15166ec887e0ab878564c0
  ms.sourcegitcommit: a6ecbc9abca2ab5c82af4c869e3e2d72c999a4c1
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 12/02/2020
  ms.locfileid: "49540623"
