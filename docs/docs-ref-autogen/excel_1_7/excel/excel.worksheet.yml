### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Worksheet
    summary: |-
      <span data-ttu-id="91a7c-101">Uma planilha do Excel é uma grade de células.</span><span class="sxs-lookup"><span data-stu-id="91a7c-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="91a7c-102">Ela pode conter dados, tabelas, gráficos, etc.</span><span class="sxs-lookup"><span data-stu-id="91a7c-102">It can contain data, tables, charts, etc.</span></span>

      <span data-ttu-id="91a7c-103">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Worksheet.activate
      - excel.Excel.Worksheet.calculate
      - excel.Excel.Worksheet.charts
      - excel.Excel.Worksheet.context
      - excel.Excel.Worksheet.copy
      - excel.Excel.Worksheet.copy_1
      - excel.Excel.Worksheet.delete
      - excel.Excel.Worksheet.freezePanes
      - excel.Excel.Worksheet.getCell
      - excel.Excel.Worksheet.getNext
      - excel.Excel.Worksheet.getNextOrNullObject
      - excel.Excel.Worksheet.getPrevious
      - excel.Excel.Worksheet.getPreviousOrNullObject
      - excel.Excel.Worksheet.getRange
      - excel.Excel.Worksheet.getRangeByIndexes
      - excel.Excel.Worksheet.getUsedRange
      - excel.Excel.Worksheet.getUsedRangeOrNullObject
      - excel.Excel.Worksheet.id
      - excel.Excel.Worksheet.load
      - excel.Excel.Worksheet.load_1
      - excel.Excel.Worksheet.load_2
      - excel.Excel.Worksheet.name
      - excel.Excel.Worksheet.names
      - excel.Excel.Worksheet.onActivated
      - excel.Excel.Worksheet.onChanged
      - excel.Excel.Worksheet.onDeactivated
      - excel.Excel.Worksheet.onSelectionChanged
      - excel.Excel.Worksheet.pivotTables
      - excel.Excel.Worksheet.position
      - excel.Excel.Worksheet.protection
      - excel.Excel.Worksheet.set
      - excel.Excel.Worksheet.set_1
      - excel.Excel.Worksheet.standardHeight
      - excel.Excel.Worksheet.standardWidth
      - excel.Excel.Worksheet.tabColor
      - excel.Excel.Worksheet.tables
      - excel.Excel.Worksheet.toJSON
      - excel.Excel.Worksheet.visibility
  - uid: excel.Excel.Worksheet.activate
    summary: |-
      <span data-ttu-id="91a7c-104">Ative a planilha na interface do usuário do Excel.</span><span class="sxs-lookup"><span data-stu-id="91a7c-104">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="91a7c-105">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-106">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-106">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.calculate
    summary: |-
      <span data-ttu-id="91a7c-107">Calcula todas as células em uma planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-107">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="91a7c-108">\[[Conjunto de APIs: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-108">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="91a7c-109">True, para marcar tudo como sujo.</span><span class="sxs-lookup"><span data-stu-id="91a7c-109">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.charts
    summary: |-
      <span data-ttu-id="91a7c-110">Retorna uma coleção de gráficos que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-110">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="91a7c-111">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-111">Read-only.</span></span>

      <span data-ttu-id="91a7c-112">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-112">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
  - uid: excel.Excel.Worksheet.context
    summary: <span data-ttu-id="91a7c-113">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="91a7c-113">The request context associated with the object.</span></span> <span data-ttu-id="91a7c-114">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="91a7c-114">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Worksheet.copy
    summary: |-
      <span data-ttu-id="91a7c-115">Copia uma planilha e a coloca na posição especificada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-115">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="91a7c-116">Retorna à planilha copiada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-116">Return the copied worksheet.</span></span>

      <span data-ttu-id="91a7c-117">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-117">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-118">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="91a7c-119">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-119">Optional.</span></span>
          type:
            - excel.Excel.WorksheetPositionType
        - id: relativeTo
          description: <span data-ttu-id="91a7c-120">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-120">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.copy_1
    summary: |-
      <span data-ttu-id="91a7c-121">Copia uma planilha e a coloca na posição especificada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="91a7c-122">Retorna à planilha copiada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-122">Return the copied worksheet.</span></span>

      <span data-ttu-id="91a7c-123">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="91a7c-124">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-124">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="91a7c-125">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-125">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.delete
    summary: |-
      <span data-ttu-id="91a7c-126">Exclui a planilha da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="91a7c-126">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="91a7c-127">Observe que, se a visibilidade da planilha estiver definida como "VeryHidden", a operação de exclusão falhará com uma Generalexception.</span><span class="sxs-lookup"><span data-stu-id="91a7c-127">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="91a7c-128">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-129">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-129">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.freezePanes
    summary: |-
      <span data-ttu-id="91a7c-130">Obtém um objeto que pode ser usado para manipular painéis congelados na planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-130">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="91a7c-131">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-131">Read-only.</span></span>

      <span data-ttu-id="91a7c-132">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-132">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - excel.Excel.WorksheetFreezePanes
  - uid: excel.Excel.Worksheet.getCell
    summary: |-
      <span data-ttu-id="91a7c-133">Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna.</span><span class="sxs-lookup"><span data-stu-id="91a7c-133">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="91a7c-134">A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-134">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="91a7c-135">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-135">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-136">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-136">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="91a7c-137">O número da linha da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-137">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="91a7c-138">Indexados com zero.</span><span class="sxs-lookup"><span data-stu-id="91a7c-138">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="91a7c-139">O número da coluna da célula a ser recuperada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-139">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="91a7c-140">Indexado com zero.</span><span class="sxs-lookup"><span data-stu-id="91a7c-140">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Worksheet.getNext
    summary: |-
      <span data-ttu-id="91a7c-141">Obtém a planilha que segue esta.</span><span class="sxs-lookup"><span data-stu-id="91a7c-141">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="91a7c-142">Se não houver planilhas após esta, este método gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="91a7c-142">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="91a7c-143">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-143">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-144">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-144">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="91a7c-145">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-145">Optional.</span></span> <span data-ttu-id="91a7c-146">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-146">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getNextOrNullObject
    summary: |-
      <span data-ttu-id="91a7c-147">Obtém a planilha que segue esta.</span><span class="sxs-lookup"><span data-stu-id="91a7c-147">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="91a7c-148">Se não houver planilhas após esta, este método retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="91a7c-148">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="91a7c-149">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-149">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="91a7c-150">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-150">Optional.</span></span> <span data-ttu-id="91a7c-151">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-151">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPrevious
    summary: |-
      <span data-ttu-id="91a7c-152">Obtém a planilha que precede esta.</span><span class="sxs-lookup"><span data-stu-id="91a7c-152">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="91a7c-153">Se não houver planilhas anteriores, este método gerará um erro.</span><span class="sxs-lookup"><span data-stu-id="91a7c-153">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="91a7c-154">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-154">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-155">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-155">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="91a7c-156">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-156">Optional.</span></span> <span data-ttu-id="91a7c-157">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-157">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPreviousOrNullObject
    summary: |-
      <span data-ttu-id="91a7c-158">Obtém a planilha que precede esta.</span><span class="sxs-lookup"><span data-stu-id="91a7c-158">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="91a7c-159">Se não houver planilhas anteriores, este método retornará um objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="91a7c-159">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="91a7c-160">\[[Conjunto de APIs: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-160">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="91a7c-161">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-161">Optional.</span></span> <span data-ttu-id="91a7c-162">Se true, só considera planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-162">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getRange
    summary: |-
      <span data-ttu-id="91a7c-163">Obtém o objeto Range, representando um único bloco retangular de células, especificado pelo endereço ou nome.</span><span class="sxs-lookup"><span data-stu-id="91a7c-163">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="91a7c-164">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-164">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-165">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-165">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="91a7c-166">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-166">Optional.</span></span> <span data-ttu-id="91a7c-167">A cadeia de caracteres que representa o endereço ou o nome do intervalo.</span><span class="sxs-lookup"><span data-stu-id="91a7c-167">The string representing the address or name of the range.</span></span> <span data-ttu-id="91a7c-168">Por exemplo, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="91a7c-168">For example, "A1:B2".</span></span> <span data-ttu-id="91a7c-169">Caso não seja especificado, todo o intervalo da planilha será retornado.</span><span class="sxs-lookup"><span data-stu-id="91a7c-169">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: excel.Excel.Worksheet.getRangeByIndexes
    summary: |-
      <span data-ttu-id="91a7c-170">Obtém o objeto Range que começa em um determinado índice de linha e índice de coluna e que abrange um determinado número de linhas e colunas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-170">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="91a7c-171">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-171">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="91a7c-172">Linha inicial (indexada por zero).</span><span class="sxs-lookup"><span data-stu-id="91a7c-172">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="91a7c-173">Coluna inicial (indexada por zero).</span><span class="sxs-lookup"><span data-stu-id="91a7c-173">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: <span data-ttu-id="91a7c-174">Número de linhas a serem incluídas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="91a7c-174">Number of rows to include in the range.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="91a7c-175">Número de colunas a serem incluídas no intervalo.</span><span class="sxs-lookup"><span data-stu-id="91a7c-175">Number of columns to include in the range.</span></span>
          type:
            - number
  - uid: excel.Excel.Worksheet.getUsedRange
    summary: |-
      <span data-ttu-id="91a7c-176">O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-176">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="91a7c-177">Se a planilha inteira estiver em branco, essa função retornará a célula superior esquerda (ou seja, *não* gerará um erro).</span><span class="sxs-lookup"><span data-stu-id="91a7c-177">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="91a7c-178">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-178">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-179">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-179">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="91a7c-180">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-180">Optional.</span></span> <span data-ttu-id="91a7c-181">Se true, considera apenas as células com valores como células usadas (ignorando a formatação).</span><span class="sxs-lookup"><span data-stu-id="91a7c-181">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="91a7c-182">\[Conjunto de APIs: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-182">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="91a7c-p122">O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas. Se a planilha inteira estiver em branco, esta função retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="91a7c-p122">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="91a7c-185">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-185">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="91a7c-186">Opcional.</span><span class="sxs-lookup"><span data-stu-id="91a7c-186">Optional.</span></span> <span data-ttu-id="91a7c-187">Considera apenas as células com valores como células usadas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-187">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Worksheet.id
    summary: |-
      <span data-ttu-id="91a7c-p124">Retorna um valor que identifica de forma exclusiva a planilha em uma determinada pasta de trabalho. O valor do identificador permanece o mesmo, ainda que a planilha seja renomeada ou movida. Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-p124">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="91a7c-191">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-191">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.load
    summary: <span data-ttu-id="91a7c-192">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="91a7c-192">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="91a7c-193">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="91a7c-193">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="91a7c-194">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="91a7c-194">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="91a7c-195">`load(option?: string | string[]): Excel.Worksheet`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-195">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="91a7c-196">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-196">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="91a7c-197">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="91a7c-197">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="91a7c-198">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="91a7c-198">It is similar to the preceding signature.</span></span> <span data-ttu-id="91a7c-199">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="91a7c-199">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="91a7c-200">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="91a7c-200">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="91a7c-201">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="91a7c-201">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetLoadOptions
  - uid: excel.Excel.Worksheet.load_1
    summary: <span data-ttu-id="91a7c-202">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="91a7c-202">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="91a7c-203">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="91a7c-203">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-204">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-204">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="91a7c-205">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-205">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.Worksheet.load_2
    summary: <span data-ttu-id="91a7c-206">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="91a7c-206">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="91a7c-207">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="91a7c-207">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="91a7c-208">Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="91a7c-208">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Worksheet.name
    summary: |-
      <span data-ttu-id="91a7c-209">O nome de exibição da planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-209">The display name of the worksheet.</span></span>

      <span data-ttu-id="91a7c-210">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-210">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.names
    summary: |-
      <span data-ttu-id="91a7c-211">Coleção de nomes com escopo para a planilha atual.</span><span class="sxs-lookup"><span data-stu-id="91a7c-211">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="91a7c-212">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-212">Read-only.</span></span>

      <span data-ttu-id="91a7c-213">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-213">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - excel.Excel.NamedItemCollection
  - uid: excel.Excel.Worksheet.onActivated
    summary: |-
      <span data-ttu-id="91a7c-214">Ocorre quando a planilha é ativada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-214">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="91a7c-215">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-215">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-216">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-216">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onChanged
    summary: |-
      <span data-ttu-id="91a7c-217">Ocorre quando os dados são alterados em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="91a7c-217">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="91a7c-218">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-218">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-219">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-219">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: excel.Excel.Worksheet.onDeactivated
    summary: |-
      <span data-ttu-id="91a7c-220">Ocorre quando a planilha é desativada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-220">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="91a7c-221">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-221">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-222">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-222">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onSelectionChanged
    summary: |-
      <span data-ttu-id="91a7c-223">Ocorre quando a seleção é alterada em uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="91a7c-223">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="91a7c-224">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-224">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-225">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-225">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.pivotTables
    summary: |-
      <span data-ttu-id="91a7c-226">Coleção de Tabelas Dinâmicas que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-226">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="91a7c-227">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-227">Read-only.</span></span>

      <span data-ttu-id="91a7c-228">\[[Conjunto de APIs: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-228">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - excel.Excel.PivotTableCollection
  - uid: excel.Excel.Worksheet.position
    summary: |-
      <span data-ttu-id="91a7c-229">A posição baseada em zero da planilha na pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="91a7c-229">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="91a7c-230">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-230">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.protection
    summary: |-
      <span data-ttu-id="91a7c-231">Retorna o objeto de proteção da planilha para uma planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-231">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="91a7c-232">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-232">Read-only.</span></span>

      <span data-ttu-id="91a7c-233">\[[Conjunto de APIs: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-233">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
  - uid: excel.Excel.Worksheet.set
    summary: '<span data-ttu-id="91a7c-234">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="91a7c-234">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="91a7c-235">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="91a7c-235">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="91a7c-236">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="91a7c-236">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="91a7c-237">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="91a7c-237">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: <span data-ttu-id="91a7c-238">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-238">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Worksheet.set_1
    summary: '<span data-ttu-id="91a7c-239">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="91a7c-239">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.standardHeight
    summary: |-
      <span data-ttu-id="91a7c-240">Retorna a altura padrão de todas as linhas na planilha, em pontos.</span><span class="sxs-lookup"><span data-stu-id="91a7c-240">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="91a7c-241">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-241">Read-only.</span></span>

      <span data-ttu-id="91a7c-242">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-242">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.standardWidth
    summary: |-
      <span data-ttu-id="91a7c-243">Retorna ou define a largura padrão de todas as colunas na planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-243">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="91a7c-244">Uma unidade de largura de coluna equivale à largura de um caractere no estilo Normal.</span><span class="sxs-lookup"><span data-stu-id="91a7c-244">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="91a7c-245">Para fontes proporcionais, será usada a largura do caractere 0 (zero).</span><span class="sxs-lookup"><span data-stu-id="91a7c-245">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="91a7c-246">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-246">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.tabColor
    summary: |-
      <span data-ttu-id="91a7c-247">Obtém ou define a cor da guia de planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-247">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="91a7c-248">Ao recuperar a cor de tabulação, se a planilha estiver invisível, o valor será NULL.</span><span class="sxs-lookup"><span data-stu-id="91a7c-248">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="91a7c-249">Se a planilha estiver visível, mas a cor da guia estiver definida como auto, uma cadeia de caracteres vazia será retornada.</span><span class="sxs-lookup"><span data-stu-id="91a7c-249">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="91a7c-250">Caso contrário, a propriedade será definida como uma cor, no formato "\#123456" ao definir a cor, usar uma cadeia de caracteres vazia para definir uma cor "auto" ou uma cor real caso contrário.</span><span class="sxs-lookup"><span data-stu-id="91a7c-250">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="91a7c-251">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-251">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="91a7c-252">Exemplos</span><span class="sxs-lookup"><span data-stu-id="91a7c-252">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.tables
    summary: |-
      <span data-ttu-id="91a7c-253">Coleção de tabelas que fazem parte da planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-253">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="91a7c-254">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="91a7c-254">Read-only.</span></span>

      <span data-ttu-id="91a7c-255">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-255">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
  - uid: excel.Excel.Worksheet.toJSON
    summary: '<span data-ttu-id="91a7c-256">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="91a7c-256">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="91a7c-257">.</span><span class="sxs-lookup"><span data-stu-id="91a7c-257"></span></span> <span data-ttu-id="91a7c-258">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="91a7c-258"></span></span><!-- --><span data-ttu-id="91a7c-259">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. Worksheet original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="91a7c-259">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="91a7c-260">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="91a7c-260">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel.Excel.Worksheet.visibility
    summary: |-
      <span data-ttu-id="91a7c-261">A visibilidade da planilha.</span><span class="sxs-lookup"><span data-stu-id="91a7c-261">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="91a7c-262">\[[Conjunto de APIs: ExcelApi 1,1 para ler a visibilidade; 1,2 para configurá-la.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="91a7c-262">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="91a7c-263">\]</span><span class="sxs-lookup"><span data-stu-id="91a7c-263"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"