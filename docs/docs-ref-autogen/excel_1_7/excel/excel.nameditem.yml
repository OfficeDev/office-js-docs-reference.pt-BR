### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.NamedItem:class'
    summary: |-
      <span data-ttu-id="3c810-101">Representa um nome definido para um intervalo de células ou um valor.</span><span class="sxs-lookup"><span data-stu-id="3c810-101">Represents a defined name for a range of cells or value.</span></span> <span data-ttu-id="3c810-102">Os nomes podem ser objetos com nome primitivo (como visto no tipo abaixo), um objeto Range ou uma referência a um intervalo.</span><span class="sxs-lookup"><span data-stu-id="3c810-102">Names can be primitive named objects (as seen in the type below), range object, or a reference to a range.</span></span> <span data-ttu-id="3c810-103">Use esse objeto para obter um objeto de intervalo associado aos nomes.</span><span class="sxs-lookup"><span data-stu-id="3c810-103">This object can be used to obtain range object associated with names.</span></span>

      <span data-ttu-id="3c810-104">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.NamedItem
    fullName: Excel.NamedItem
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.NamedItem#arrayValues:member'
      - 'excel!Excel.NamedItem#comment:member'
      - 'excel!Excel.NamedItem#context:member'
      - 'excel!Excel.NamedItem#delete:member(1)'
      - 'excel!Excel.NamedItem#formula:member'
      - 'excel!Excel.NamedItem#getRange:member(1)'
      - 'excel!Excel.NamedItem#getRangeOrNullObject:member(1)'
      - 'excel!Excel.NamedItem#load:member(1)'
      - 'excel!Excel.NamedItem#load:member(2)'
      - 'excel!Excel.NamedItem#load:member(3)'
      - 'excel!Excel.NamedItem#name:member'
      - 'excel!Excel.NamedItem#scope:member'
      - 'excel!Excel.NamedItem#set:member(1)'
      - 'excel!Excel.NamedItem#set:member(2)'
      - 'excel!Excel.NamedItem#toJSON:member(1)'
      - 'excel!Excel.NamedItem#type:member'
      - 'excel!Excel.NamedItem#value:member'
      - 'excel!Excel.NamedItem#visible:member'
      - 'excel!Excel.NamedItem#worksheet:member'
      - 'excel!Excel.NamedItem#worksheetOrNullObject:member'
  - uid: 'excel!Excel.NamedItem#arrayValues:member'
    summary: |-
      <span data-ttu-id="3c810-105">Retorna um objeto que contém valores e tipos do item nomeado.</span><span class="sxs-lookup"><span data-stu-id="3c810-105">Returns an object containing values and types of the named item.</span></span> <span data-ttu-id="3c810-106">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="3c810-106">Read-only.</span></span>

      <span data-ttu-id="3c810-107">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-107">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: arrayValues
    fullName: arrayValues
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly arrayValues: Excel.NamedItemArrayValues;'
      return:
        type:
          - 'excel!Excel.NamedItemArrayValues:class'
  - uid: 'excel!Excel.NamedItem#comment:member'
    summary: |-
      <span data-ttu-id="3c810-108">Representa o comentário associado a esse nome.</span><span class="sxs-lookup"><span data-stu-id="3c810-108">Represents the comment associated with this name.</span></span>

      <span data-ttu-id="3c810-109">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-109">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: comment
    fullName: comment
    langs:
      - typeScript
    type: property
    syntax:
      content: 'comment: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.NamedItem#context:member'
    summary: <span data-ttu-id="3c810-110">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="3c810-110">The request context associated with the object.</span></span> <span data-ttu-id="3c810-111">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="3c810-111">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.NamedItem#delete:member(1)'
    summary: |-
      <span data-ttu-id="3c810-112">Exclui o nome fornecido.</span><span class="sxs-lookup"><span data-stu-id="3c810-112">Deletes the given name.</span></span>

      <span data-ttu-id="3c810-113">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-113">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3c810-114">Exemplos</span><span class="sxs-lookup"><span data-stu-id="3c810-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const totalName = sheet.names.getItemOrNullObject("TotalAmount");
              totalName.load();
              await context.sync();

              if (totalName.value) {
                  totalName.delete();

                  // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.
                  sheet.getRange("D11").values = [["=SUM(ExpensesTable[AMOUNT])"]];
              } else {
                  console.log("No named item created for the formula.");
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.NamedItem#formula:member'
    summary: |-
      <span data-ttu-id="3c810-115">Obtém ou define a fórmula do item nomeado.</span><span class="sxs-lookup"><span data-stu-id="3c810-115">Gets or sets the formula of the named item.</span></span> <span data-ttu-id="3c810-116">A fórmula sempre começa com um sinal de "=".</span><span class="sxs-lookup"><span data-stu-id="3c810-116">Formula always starts with a '=' sign.</span></span>

      <span data-ttu-id="3c810-117">\[[Conjunto de APIs: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-117">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formula
    fullName: formula
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formula: any;'
      return:
        type:
          - any
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3c810-118">Exemplos</span><span class="sxs-lookup"><span data-stu-id="3c810-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");

              // Get the named item
              const myNamedItem = sheet.names.getItemOrNullObject("MyRange");
              myNamedItem.load("name, formula");
              await context.sync();

              if (myNamedItem.isNullObject) {
                  console.log(`There is no named item. Create it with "Add named item for a range" first.`);
              } else {                    
                  // Update named item to point to the second range
                  myNamedItem.formula = "=Sample!$B$10:$D$14";
                  sheet.getRange("B10:D14").select();
                  await context.sync();

                  console.log(`Just updated the named item "${myNamedItem.name}" -- it's now located here: ${myNamedItem.formula}`);
              }
          });
          ```
  - uid: 'excel!Excel.NamedItem#getRange:member(1)'
    summary: |-
      <span data-ttu-id="3c810-119">Retorna o objeto Range associado ao nome.</span><span class="sxs-lookup"><span data-stu-id="3c810-119">Returns the range object that is associated with the name.</span></span> <span data-ttu-id="3c810-120">Gerará um erro se o tipo do item nomeado não for um intervalo.</span><span class="sxs-lookup"><span data-stu-id="3c810-120">Throws an error if the named item's type is not a range.</span></span>

      <span data-ttu-id="3c810-121">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-121">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3c810-122">Exemplos</span><span class="sxs-lookup"><span data-stu-id="3c810-122">Examples</span></span>

          ```javascript
          // Returns the Range object that is associated with the name. 
          // null if the name is not of the type Range.
          // Note: This API currently supports only the Workbook scoped items.
          Excel.run(function (ctx) { 
              var names = ctx.workbook.names;
              var range = names.getItem('MyRange').getRange();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.NamedItem#getRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="3c810-123">Retorna o objeto Range associado ao nome.</span><span class="sxs-lookup"><span data-stu-id="3c810-123">Returns the range object that is associated with the name.</span></span> <span data-ttu-id="3c810-124">Retornará um objeto null se o tipo do item nomeado não for um intervalo.</span><span class="sxs-lookup"><span data-stu-id="3c810-124">Returns a null object if the named item's type is not a range.</span></span>

      <span data-ttu-id="3c810-125">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-125">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.NamedItem#load:member(1)'
    summary: <span data-ttu-id="3c810-126">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="3c810-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3c810-127">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="3c810-127">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.NamedItemLoadOptions): Excel.NamedItem;'
      return:
        type:
          - 'excel!Excel.NamedItem:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="3c810-128">Fornece opções para as propriedades do objeto a ser carregado.</span><span class="sxs-lookup"><span data-stu-id="3c810-128">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.NamedItemLoadOptions:interface'
  - uid: 'excel!Excel.NamedItem#load:member(2)'
    summary: <span data-ttu-id="3c810-129">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="3c810-129">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3c810-130">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="3c810-130">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.NamedItem;'
      return:
        type:
          - 'excel!Excel.NamedItem:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3c810-131">Exemplos</span><span class="sxs-lookup"><span data-stu-id="3c810-131">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var names = ctx.workbook.names;
              var namedItem = names.getItem('MyRange');
              namedItem.load('type');
              return ctx.sync().then(function() {
                      console.log(namedItem.type);
              });
          }).catch(function(error) {
                  console.log("Error: " + error);
                  if (error instanceof OfficeExtension.Error) {
                      console.log("Debug info: " + JSON.stringify(error.debugInfo));
                  }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="3c810-132">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="3c810-132">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.NamedItem#load:member(3)'
    summary: <span data-ttu-id="3c810-133">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="3c810-133">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3c810-134">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="3c810-134">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.NamedItem;
      return:
        type:
          - 'excel!Excel.NamedItem:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="3c810-135">`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem `propertyNamesAndPaths.expand` carregadas e é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="3c810-135">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.NamedItem#name:member'
    summary: |-
      <span data-ttu-id="3c810-136">O nome do objeto.</span><span class="sxs-lookup"><span data-stu-id="3c810-136">The name of the object.</span></span> <span data-ttu-id="3c810-137">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="3c810-137">Read-only.</span></span>

      <span data-ttu-id="3c810-138">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-138">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.NamedItem#scope:member'
    summary: |-
      <span data-ttu-id="3c810-139">Indica se o nome tem escopo para a pasta de trabalho ou uma planilha específica.</span><span class="sxs-lookup"><span data-stu-id="3c810-139">Indicates whether the name is scoped to the workbook or to a specific worksheet.</span></span> <span data-ttu-id="3c810-140">Os valores possíveis são: planilha, pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="3c810-140">Possible values are: Worksheet, Workbook.</span></span> <span data-ttu-id="3c810-141">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="3c810-141">Read-only.</span></span>

      <span data-ttu-id="3c810-142">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-142">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: scope
    fullName: scope
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly scope: Excel.NamedItemScope | "Worksheet" | "Workbook";'
      return:
        type:
          - 'excel!Excel.NamedItem#scope~0:complex'
  - uid: 'excel!Excel.NamedItem#set:member(1)'
    summary: '<span data-ttu-id="3c810-143">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="3c810-143">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="3c810-144">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="3c810-144">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="3c810-145">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="3c810-145">This method has the following additional signature:</span></span>

      `set(properties: Excel.NamedItem): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.NamedItemUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="3c810-146">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="3c810-146">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.NamedItemUpdateData:interface'
        - id: options
          description: <span data-ttu-id="3c810-147">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="3c810-147">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.NamedItem#set:member(2)'
    summary: '<span data-ttu-id="3c810-148">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="3c810-148">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.NamedItem): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.NamedItem:class'
  - uid: 'excel!Excel.NamedItem#toJSON:member(1)'
    summary: '<span data-ttu-id="3c810-149">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="3c810-149">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="3c810-150">.</span><span class="sxs-lookup"><span data-stu-id="3c810-150"></span></span> <span data-ttu-id="3c810-151">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="3c810-151"></span></span><!-- --><span data-ttu-id="3c810-152">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Excel. NamedItem original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Excel.Interfaces.NamedItemData`</span><span class="sxs-lookup"><span data-stu-id="3c810-152">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.NamedItem object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemData`</span></span><!-- --><span data-ttu-id="3c810-153">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="3c810-153">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.NamedItemData;'
      return:
        type:
          - 'excel!Excel.Interfaces.NamedItemData:interface'
        description: ''
  - uid: 'excel!Excel.NamedItem#type:member'
    summary: |-
      <span data-ttu-id="3c810-154">Indica o tipo do valor retornado pela fórmula do nome.</span><span class="sxs-lookup"><span data-stu-id="3c810-154">Indicates the type of the value returned by the name's formula.</span></span> <span data-ttu-id="3c810-155">Consulte Excel. NamedItemType para obter detalhes.</span><span class="sxs-lookup"><span data-stu-id="3c810-155">See Excel.NamedItemType for details.</span></span> <span data-ttu-id="3c810-156">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="3c810-156">Read-only.</span></span>

      <span data-ttu-id="3c810-157">\[[Conjunto de APIs: ExcelApi 1,1 para cadeia de caracteres, inteiro, duplo, booliano, intervalo, erro; 1,7 para a matriz](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-157">\[ [API set: ExcelApi 1.1 for String,Integer,Double,Boolean,Range,Error; 1.7 for Array](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.NamedItemType | "String" | "Integer" | "Double" | "Boolean" | "Range" | "Error" | "Array";'
      return:
        type:
          - 'excel!Excel.NamedItem#type~0:complex'
  - uid: 'excel!Excel.NamedItem#value:member'
    summary: |-
      <span data-ttu-id="3c810-158">Representa o valor calculado pela fórmula do nome.</span><span class="sxs-lookup"><span data-stu-id="3c810-158">Represents the value computed by the name's formula.</span></span> <span data-ttu-id="3c810-159">Para um intervalo nomeado, retornará o endereço do intervalo.</span><span class="sxs-lookup"><span data-stu-id="3c810-159">For a named range, will return the range address.</span></span> <span data-ttu-id="3c810-160">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="3c810-160">Read-only.</span></span>

      <span data-ttu-id="3c810-161">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-161">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: value
    fullName: value
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly value: any;'
      return:
        type:
          - any
  - uid: 'excel!Excel.NamedItem#visible:member'
    summary: |-
      <span data-ttu-id="3c810-162">Determina se o objeto estará visível ou não.</span><span class="sxs-lookup"><span data-stu-id="3c810-162">Specifies whether the object is visible or not.</span></span>

      <span data-ttu-id="3c810-163">\[[Conjunto de APIs: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-163">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: visible
    fullName: visible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visible: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.NamedItem#worksheet:member'
    summary: |-
      <span data-ttu-id="3c810-164">Retorna a planilha em que o item nomeado tem escopo.</span><span class="sxs-lookup"><span data-stu-id="3c810-164">Returns the worksheet on which the named item is scoped to.</span></span> <span data-ttu-id="3c810-165">Gera um erro se o item estiver no escopo da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="3c810-165">Throws an error if the item is scoped to the workbook instead.</span></span>

      <span data-ttu-id="3c810-166">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-166">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.NamedItem#worksheetOrNullObject:member'
    summary: |-
      <span data-ttu-id="3c810-167">Retorna a planilha em que o item nomeado tem escopo.</span><span class="sxs-lookup"><span data-stu-id="3c810-167">Returns the worksheet on which the named item is scoped to.</span></span> <span data-ttu-id="3c810-168">Retornará um objeto null se o item tiver escopo para a pasta de trabalho em vez disso.</span><span class="sxs-lookup"><span data-stu-id="3c810-168">Returns a null object if the item is scoped to the workbook instead.</span></span>

      <span data-ttu-id="3c810-169">\[[Conjunto de APIs: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3c810-169">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheetOrNullObject
    fullName: worksheetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheetOrNullObject: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.NamedItemArrayValues:class'
    name: Excel.NamedItemArrayValues
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.NamedItem:class'
    name: Excel.NamedItem
  - uid: 'excel!Excel.Interfaces.NamedItemLoadOptions:interface'
    name: Excel.Interfaces.NamedItemLoadOptions
  - uid: 'excel!Excel.NamedItem#scope~0:complex'
    name: Excel.NamedItemScope | "Worksheet" | "Workbook"
    fullName: Excel.NamedItemScope | "Worksheet" | "Workbook"
    spec.typeScript:
      - uid: 'excel!Excel.NamedItemScope:enum'
        name: Excel.NamedItemScope
        fullName: Excel.NamedItemScope
      - name: ' | "Worksheet" | "Workbook"'
        fullName: ' | "Worksheet" | "Workbook"'
  - uid: 'excel!Excel.Interfaces.NamedItemUpdateData:interface'
    name: Interfaces.NamedItemUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.NamedItemData:interface'
    name: Excel.Interfaces.NamedItemData
  - uid: 'excel!Excel.NamedItem#type~0:complex'
    name: Excel.NamedItemType | "String" | "Integer" | "Double" | "Boolean" | "Range" | "Error" | "Array"
    fullName: Excel.NamedItemType | "String" | "Integer" | "Double" | "Boolean" | "Range" | "Error" | "Array"
    spec.typeScript:
      - uid: 'excel!Excel.NamedItemType:enum'
        name: Excel.NamedItemType
        fullName: Excel.NamedItemType
      - name: ' | "String" | "Integer" | "Double" | "Boolean" | "Range" | "Error" | "Array"'
        fullName: ' | "String" | "Integer" | "Double" | "Boolean" | "Range" | "Error" | "Array"'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet