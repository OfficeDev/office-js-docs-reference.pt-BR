### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Body:class'
    summary: |-
      <span data-ttu-id="a90d0-101">Representa o corpo de um documento ou de uma seção.</span><span class="sxs-lookup"><span data-stu-id="a90d0-101">Represents the body of a document or a section.</span></span>

      <span data-ttu-id="a90d0-102">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Body
    fullName: Word.Body
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Body#clear:member(1)'
      - 'word!Word.Body#contentControls:member'
      - 'word!Word.Body#context:member'
      - 'word!Word.Body#font:member'
      - 'word!Word.Body#getHtml:member(1)'
      - 'word!Word.Body#getOoxml:member(1)'
      - 'word!Word.Body#inlinePictures:member'
      - 'word!Word.Body#insertBreak:member(1)'
      - 'word!Word.Body#insertBreak:member(2)'
      - 'word!Word.Body#insertContentControl:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(2)'
      - 'word!Word.Body#insertHtml:member(1)'
      - 'word!Word.Body#insertHtml:member(2)'
      - 'word!Word.Body#insertOoxml:member(1)'
      - 'word!Word.Body#insertOoxml:member(2)'
      - 'word!Word.Body#insertParagraph:member(1)'
      - 'word!Word.Body#insertParagraph:member(2)'
      - 'word!Word.Body#insertText:member(1)'
      - 'word!Word.Body#insertText:member(2)'
      - 'word!Word.Body#load:member(1)'
      - 'word!Word.Body#load:member(2)'
      - 'word!Word.Body#load:member(3)'
      - 'word!Word.Body#paragraphs:member'
      - 'word!Word.Body#parentContentControl:member'
      - 'word!Word.Body#search:member(1)'
      - 'word!Word.Body#select:member(1)'
      - 'word!Word.Body#select:member(2)'
      - 'word!Word.Body#set:member(1)'
      - 'word!Word.Body#set:member(2)'
      - 'word!Word.Body#style:member'
      - 'word!Word.Body#text:member'
      - 'word!Word.Body#toJSON:member(1)'
      - 'word!Word.Body#track:member(1)'
      - 'word!Word.Body#untrack:member(1)'
  - uid: 'word!Word.Body#clear:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-103">Limpa o conteúdo do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="a90d0-103">Clears the contents of the body object.</span></span> <span data-ttu-id="a90d0-104">O usuário pode executar a operação de desfazer no conteúdo limpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-104">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="a90d0-105">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-106">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-106">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to clear the contents of the body.
              body.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the body contents.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how the 
          // clear method can be used to clear the contents of a document.
          // https://aka.ms/sillystorywordaddin
          ```
  - uid: 'word!Word.Body#contentControls:member'
    summary: |-
      <span data-ttu-id="a90d0-107">Obtém a coleção de objetos de controle de conteúdo de Rich Text no corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-107">Gets the collection of rich text content control objects in the body.</span></span> <span data-ttu-id="a90d0-108">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-108">Read-only.</span></span>

      <span data-ttu-id="a90d0-109">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-109">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Body#context:member'
    summary: <span data-ttu-id="a90d0-110">O contexto de solicitação associado ao objeto.</span><span class="sxs-lookup"><span data-stu-id="a90d0-110">The request context associated with the object.</span></span> <span data-ttu-id="a90d0-111">Isso conecta o processo do suplemento ao processo do aplicativo host do Office.</span><span class="sxs-lookup"><span data-stu-id="a90d0-111">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Body#font:member'
    summary: |-
      <span data-ttu-id="a90d0-112">Obtém o formato de texto do corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-112">Gets the text format of the body.</span></span> <span data-ttu-id="a90d0-113">Use isso para obter e definir o nome, tamanho, cor e outras propriedades da fonte.</span><span class="sxs-lookup"><span data-stu-id="a90d0-113">Use this to get and set font name, size, color and other properties.</span></span> <span data-ttu-id="a90d0-114">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-114">Read-only.</span></span>

      <span data-ttu-id="a90d0-115">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-115">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - 'word!Word.Font:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-116">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-116">Examples</span></span>

          ```javascript
          // Get the style and the font size, font name, and font color properties on the body object.
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load font and style information for the document body.
              context.load(body, 'font/size, font/name, font/color, style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Show the results of the load method. Here we show the
                  // property values on the body object.
                  var results = 'Font size: ' + body.font.size +
                                '; Font name: ' + body.font.name +
                                '; Font color: ' + body.font.color +
                                '; Body style: ' + body.style;

                  console.log(results);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getHtml:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-117">Obtém uma representação HTML do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="a90d0-117">Gets an HTML representation of the body object.</span></span> <span data-ttu-id="a90d0-118">Quando renderizado em uma página da Web ou em um visualizador de HTML, a formatação será uma correspondência próxima, mas não exata, à formatação do documento.</span><span class="sxs-lookup"><span data-stu-id="a90d0-118">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match to the formatting of the document.</span></span> <span data-ttu-id="a90d0-119">Este método não retorna o mesmo HTML para o mesmo documento em diferentes plataformas (Windows, Mac, etc.).</span><span class="sxs-lookup"><span data-stu-id="a90d0-119">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, etc.).</span></span> <span data-ttu-id="a90d0-120">Se você precisar de fidelidade exata ou consistência entre plataformas, use `Body.getOoxml()` e converta o XML RETORNADO em HTML.</span><span class="sxs-lookup"><span data-stu-id="a90d0-120">If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="a90d0-121">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-121">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getHtml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-122">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-122">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the HTML contents of the body.
              var bodyHTML = body.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body HTML contents: " + bodyHTML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getOoxml:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-123">Obtém a representação OOXML (Office Open XML) do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="a90d0-123">Gets the OOXML (Office Open XML) representation of the body object.</span></span>

      <span data-ttu-id="a90d0-124">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-124">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getOoxml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-125">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-125">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the OOXML contents of the body.
              var bodyOOXML = body.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body OOXML contents: " + bodyOOXML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#inlinePictures:member'
    summary: |-
      <span data-ttu-id="a90d0-126">Obtém a coleção de objetos InlinePicture no corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-126">Gets the collection of InlinePicture objects in the body.</span></span> <span data-ttu-id="a90d0-127">A coleção não inclui imagens flutuantes.</span><span class="sxs-lookup"><span data-stu-id="a90d0-127">The collection does not include floating images.</span></span> <span data-ttu-id="a90d0-128">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-128">Read-only.</span></span>

      <span data-ttu-id="a90d0-129">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-129">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - 'word!Word.InlinePictureCollection:class'
  - uid: 'word!Word.Body#insertBreak:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-130">Insere uma quebra no local especificado no documento principal.</span><span class="sxs-lookup"><span data-stu-id="a90d0-130">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="a90d0-131">O valor de insertLocation pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-131">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="a90d0-132">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-132">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-133">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-133">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (ctx) {

              // Create a proxy object for the document body.
              var body = ctx.document.body;

              // Queue a command to insert a page break at the start of the document body.
              body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  console.log('Added a page break at the start of the document body.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakType
          description: <span data-ttu-id="a90d0-134">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-134">Required.</span></span> <span data-ttu-id="a90d0-135">O tipo de quebra a adicionar ao corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-135">The break type to add to the body.</span></span>
          type:
            - 'word!Word.BreakType:enum'
        - id: insertLocation
          description: <span data-ttu-id="a90d0-136">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-136">Required.</span></span> <span data-ttu-id="a90d0-137">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-137">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertBreak:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-138">Insere uma quebra no local especificado no documento principal.</span><span class="sxs-lookup"><span data-stu-id="a90d0-138">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="a90d0-139">O valor de insertLocation pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-139">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="a90d0-140">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-140">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakTypeString
          description: <span data-ttu-id="a90d0-141">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-141">Required.</span></span> <span data-ttu-id="a90d0-142">O tipo de quebra a adicionar ao corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-142">The break type to add to the body.</span></span>
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: <span data-ttu-id="a90d0-143">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-143">Required.</span></span> <span data-ttu-id="a90d0-144">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-144">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertContentControl:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-145">Quebra o objeto Body com um controle de conteúdo de rich text.</span><span class="sxs-lookup"><span data-stu-id="a90d0-145">Wraps the body object with a Rich Text content control.</span></span>

      <span data-ttu-id="a90d0-146">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-146">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-147">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-147">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to wrap the body in a content control.
              body.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the body in a content control.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#insertFileFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-148">Insere um documento no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-148">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="a90d0-149">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-149">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-150">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-150">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-151">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-151">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert base64 encoded .docx at the beginning of the content body.
              // You will need to implement getBase64() to pass in a string of a base64 encoded docx file.
              body.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: <span data-ttu-id="a90d0-152">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-152">Required.</span></span> <span data-ttu-id="a90d0-153">O conteúdo codificado em Base64 de um arquivo. docx.</span><span class="sxs-lookup"><span data-stu-id="a90d0-153">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="a90d0-154">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-154">Required.</span></span> <span data-ttu-id="a90d0-155">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-155">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertFileFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-156">Insere um documento no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-156">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="a90d0-157">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-157">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-158">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-158">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="a90d0-159">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-159">Required.</span></span> <span data-ttu-id="a90d0-160">O conteúdo codificado em Base64 de um arquivo. docx.</span><span class="sxs-lookup"><span data-stu-id="a90d0-160">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="a90d0-161">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-161">Required.</span></span> <span data-ttu-id="a90d0-162">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-162">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertHtml:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-163">Insere HTML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-163">Inserts HTML at the specified location.</span></span> <span data-ttu-id="a90d0-164">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-164">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-165">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-165">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-166">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-166">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert HTML in to the beginning of the body.
              body.insertHtml(
                  '<strong>This is text inserted with body.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: <span data-ttu-id="a90d0-167">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-167">Required.</span></span> <span data-ttu-id="a90d0-168">O HTML a inserir no documento.</span><span class="sxs-lookup"><span data-stu-id="a90d0-168">The HTML to be inserted in the document.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="a90d0-169">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-169">Required.</span></span> <span data-ttu-id="a90d0-170">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-170">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertHtml:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-171">Insere HTML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-171">Inserts HTML at the specified location.</span></span> <span data-ttu-id="a90d0-172">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-172">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-173">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-173">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: html
          description: <span data-ttu-id="a90d0-174">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-174">Required.</span></span> <span data-ttu-id="a90d0-175">O HTML a inserir no documento.</span><span class="sxs-lookup"><span data-stu-id="a90d0-175">The HTML to be inserted in the document.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="a90d0-176">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-176">Required.</span></span> <span data-ttu-id="a90d0-177">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-177">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertOoxml:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-178">Insere um formato OOXML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-178">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="a90d0-179">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-179">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-180">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-180">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="a90d0-181">Obrigatória.</span><span class="sxs-lookup"><span data-stu-id="a90d0-181">Required.</span></span> <span data-ttu-id="a90d0-182">O formato OOXML a inserir.</span><span class="sxs-lookup"><span data-stu-id="a90d0-182">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="a90d0-183">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-183">Required.</span></span> <span data-ttu-id="a90d0-184">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-184">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertOoxml:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-185">Insere um formato OOXML no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-185">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="a90d0-186">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-186">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-187">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-187">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="a90d0-188">Obrigatória.</span><span class="sxs-lookup"><span data-stu-id="a90d0-188">Required.</span></span> <span data-ttu-id="a90d0-189">O formato OOXML a inserir.</span><span class="sxs-lookup"><span data-stu-id="a90d0-189">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="a90d0-190">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-190">Required.</span></span> <span data-ttu-id="a90d0-191">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-191">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertParagraph:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-192">Insere um parágrafo no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-192">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="a90d0-193">O valor de insertLocation pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-193">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="a90d0-194">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-194">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-195">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-195">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              body.insertParagraph('Content of a new paragraph', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added at the end of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample shows how you can use the insertParagraph method to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
              let paragraph = context.document.body.insertParagraph("Timeline", "End");
              paragraph.style = "Heading 2";
              let paragraph2 = context.document.body.insertParagraph("The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.", "End");
              paragraph2.style = "Normal";
              let paragraph3 = context.document.body.insertParagraph("Project Costs by Phase", "End");
              paragraph3.style = "Heading 2";
              // Note a content control with the title of "ProjectCosts" is added. Content will be replaced later.
              let paragraph4 = context.document.body.insertParagraph("<Add Project Costs Here>", "End");
              paragraph4.style = "Normal";
              paragraph4.font.highlightColor = "#FFFF00";
              let contentControl = paragraph4.insertContentControl();
              contentControl.title = "ProjectCosts";
              let paragraph5 = context.document.body.insertParagraph("Project Team", "End");
              paragraph5.style = "Heading 2";
              paragraph5.font.highlightColor = "#FFFFFF";
              let paragraph6 = context.document.body.insertParagraph("Terms of Work", "End");
              paragraph6.style = "Heading 1";
              let paragraph7 = context.document.body.insertParagraph("Contractor shall provide the Services and Deliverable(s) as follows:", "End");
              paragraph7.style = "Normal";
              let paragraph8 = context.document.body.insertParagraph("Out-of-Pocket Expenses / Invoice Procedures", "End");
              paragraph8.style = "Heading 2";
              let paragraph9 = context.document.body.insertParagraph("Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.", "End");
              paragraph9.style = "Normal";
              // Insert a page break at the end of the document.
              context.document.body.insertBreak("Page", "End");

              await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="a90d0-196">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-196">Required.</span></span> <span data-ttu-id="a90d0-197">O texto do parágrafo a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="a90d0-197">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: <span data-ttu-id="a90d0-198">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-198">Required.</span></span> <span data-ttu-id="a90d0-199">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-199">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertParagraph:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-200">Insere um parágrafo no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-200">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="a90d0-201">O valor de insertLocation pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-201">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="a90d0-202">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-202">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="a90d0-203">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-203">Required.</span></span> <span data-ttu-id="a90d0-204">O texto do parágrafo a ser inserido.</span><span class="sxs-lookup"><span data-stu-id="a90d0-204">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: <span data-ttu-id="a90d0-205">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-205">Required.</span></span> <span data-ttu-id="a90d0-206">O valor pode ser 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-206">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertText:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-207">Insere texto no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-207">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="a90d0-208">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-208">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-209">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-209">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-210">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-210">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert text in to the beginning of the body.
              body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="a90d0-211">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-211">Required.</span></span> <span data-ttu-id="a90d0-212">Texto a inserir.</span><span class="sxs-lookup"><span data-stu-id="a90d0-212">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="a90d0-213">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-213">Required.</span></span> <span data-ttu-id="a90d0-214">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-214">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertText:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-215">Insere texto no corpo, no local especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-215">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="a90d0-216">O valor de insertLocation pode ser 'Replace', 'Start' ou 'End'.</span><span class="sxs-lookup"><span data-stu-id="a90d0-216">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="a90d0-217">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-217">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: text
          description: <span data-ttu-id="a90d0-218">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-218">Required.</span></span> <span data-ttu-id="a90d0-219">Texto a inserir.</span><span class="sxs-lookup"><span data-stu-id="a90d0-219">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="a90d0-220">Obrigatório.</span><span class="sxs-lookup"><span data-stu-id="a90d0-220">Required.</span></span> <span data-ttu-id="a90d0-221">O valor pode ser ''Replace'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-221">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#load:member(1)'
    summary: <span data-ttu-id="a90d0-222">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="a90d0-222">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a90d0-223">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="a90d0-223">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="a90d0-224">Além dessa assinatura, este método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="a90d0-224">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="a90d0-225">`load(option?: string | string[]): Word.Body`-Where Option é uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="a90d0-225">`load(option?: string | string[]): Word.Body` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="a90d0-226">`load(option?: { select?: string; expand?: string; }): Word.Body`-Onde Option. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas, e Options. Expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="a90d0-226">`load(option?: { select?: string; expand?: string; }): Word.Body` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="a90d0-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body`– Disponível somente nos tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="a90d0-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body` - Only available on collection types.</span></span> <span data-ttu-id="a90d0-228">É semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="a90d0-228">It is similar to the preceding signature.</span></span> <span data-ttu-id="a90d0-229">Option. Top especifica o número máximo de itens de coleta que podem ser incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-229">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a90d0-230">Option. Skip especifica o número de itens que devem ser ignorados e não incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-230">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a90d0-231">Se Option. Top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-231">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.BodyLoadOptions): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.BodyLoadOptions:interface'
  - uid: 'word!Word.Body#load:member(2)'
    summary: <span data-ttu-id="a90d0-232">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="a90d0-232">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a90d0-233">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="a90d0-233">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="a90d0-234">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="a90d0-234">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'word!Word.Body#load:member(3)'
    summary: <span data-ttu-id="a90d0-235">Coloca um comando na fila para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="a90d0-235">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a90d0-236">Você deve chamar `context.sync()` antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="a90d0-236">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="a90d0-237">Onde propertyNamesAndPaths. Select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e propertyNamesAndPaths. Expand é uma sequência de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.</span><span class="sxs-lookup"><span data-stu-id="a90d0-237">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.Body#paragraphs:member'
    summary: |-
      <span data-ttu-id="a90d0-238">Obtém a coleção de objetos Paragraph no corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-238">Gets the collection of paragraph objects in the body.</span></span> <span data-ttu-id="a90d0-239">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-239">Read-only.</span></span>

      <span data-ttu-id="a90d0-240">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-240">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-241">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-241">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
  - uid: 'word!Word.Body#parentContentControl:member'
    summary: |-
      <span data-ttu-id="a90d0-242">Obtém o controle de conteúdo que inclui o corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-242">Gets the content control that contains the body.</span></span> <span data-ttu-id="a90d0-243">Gera se não há um controle de conteúdo pai.</span><span class="sxs-lookup"><span data-stu-id="a90d0-243">Throws if there isn't a parent content control.</span></span> <span data-ttu-id="a90d0-244">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-244">Read-only.</span></span>

      <span data-ttu-id="a90d0-245">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-245">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Body#search:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-246">Realiza uma pesquisa com o Searchoptions especificado no escopo do objeto Body.</span><span class="sxs-lookup"><span data-stu-id="a90d0-246">Performs a search with the specified SearchOptions on the scope of the body object.</span></span> <span data-ttu-id="a90d0-247">Os resultados da pesquisa são uma coleção de objetos Range.</span><span class="sxs-lookup"><span data-stu-id="a90d0-247">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="a90d0-248">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-248">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-249">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-249">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to search the document.
              var searchResults = context.document.body.search('video', {matchCase: false});

              // Queue a command to load the results.
              context.load(searchResults, 'text, font');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  var results = 'Found count: ' + searchResults.items.length +
                                '; we highlighted the results.';

                  // Queue a command to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                    searchResults.items[i].font.color = '#FF0000'    // Change color to Red
                    searchResults.items[i].font.highlightColor = '#FFFF00';
                    searchResults.items[i].font.bold = true;
                  }

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log(results);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample provides another example of how to search a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
            let results = context.document.body.search("Online");
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "yellow";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
            // (i.e. use wildcards).
            let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "red";
              results.items[i].font.color = "white";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
      parameters:
        - id: searchText
          description: <span data-ttu-id="a90d0-250">Obrigatória.</span><span class="sxs-lookup"><span data-stu-id="a90d0-250">Required.</span></span> <span data-ttu-id="a90d0-251">O texto da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="a90d0-251">The search text.</span></span> <span data-ttu-id="a90d0-252">Pode ter no máximo 255 caracteres.</span><span class="sxs-lookup"><span data-stu-id="a90d0-252">Can be a maximum of 255 characters.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="a90d0-253">Opcional.</span><span class="sxs-lookup"><span data-stu-id="a90d0-253">Optional.</span></span> <span data-ttu-id="a90d0-254">Opções da pesquisa.</span><span class="sxs-lookup"><span data-stu-id="a90d0-254">Options for the search.</span></span>
          type:
            - 'word!Word.Body#search~0:complex'
  - uid: 'word!Word.Body#select:member(1)'
    summary: |-
      <span data-ttu-id="a90d0-255">Seleciona o corpo e navega na interface do usuário do Word até ele.</span><span class="sxs-lookup"><span data-stu-id="a90d0-255">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="a90d0-256">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-256">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-257">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-257">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to select the document body. The Word UI will
              // move to the selected document body.
              body.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="a90d0-258">Opcional.</span><span class="sxs-lookup"><span data-stu-id="a90d0-258">Optional.</span></span> <span data-ttu-id="a90d0-259">O modo de seleção pode ser ''Select'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-259">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="a90d0-260">''Select'' é o padrão.</span><span class="sxs-lookup"><span data-stu-id="a90d0-260">''Select'' is the default.</span></span>'
          type:
            - 'word!Word.SelectionMode:enum'
  - uid: 'word!Word.Body#select:member(2)'
    summary: |-
      <span data-ttu-id="a90d0-261">Seleciona o corpo e navega na interface do usuário do Word até ele.</span><span class="sxs-lookup"><span data-stu-id="a90d0-261">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="a90d0-262">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-262">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="a90d0-263">Opcional.</span><span class="sxs-lookup"><span data-stu-id="a90d0-263">Optional.</span></span> <span data-ttu-id="a90d0-264">O modo de seleção pode ser ''Select'', ''Start'' ou ''End''.</span><span class="sxs-lookup"><span data-stu-id="a90d0-264">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="a90d0-265">''Select'' é o padrão.</span><span class="sxs-lookup"><span data-stu-id="a90d0-265">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: 'word!Word.Body#set:member(1)'
    summary: '<span data-ttu-id="a90d0-266">Define várias propriedades de um objeto ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-266">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="a90d0-267">Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-267">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="a90d0-268">Este método tem a seguinte assinatura adicional:</span><span class="sxs-lookup"><span data-stu-id="a90d0-268">This method has the following additional signature:</span></span>

      `set(properties: Word.Body): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.BodyUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="a90d0-269">Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.</span><span class="sxs-lookup"><span data-stu-id="a90d0-269">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'word!Word.Interfaces.BodyUpdateData:interface'
        - id: options
          description: <span data-ttu-id="a90d0-270">Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-270">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Body#set:member(2)'
    summary: '<span data-ttu-id="a90d0-271">Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.</span><span class="sxs-lookup"><span data-stu-id="a90d0-271">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Body): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Body:class'
  - uid: 'word!Word.Body#style:member'
    summary: |-
      <span data-ttu-id="a90d0-p155">Obtém ou define o nome do estilo usado para o corpo. Use esta propriedade de estilos personalizados e nomes de estilo localizados. Para usar os estilos internos que são portáteis entre localidades, confira a propriedade "styleBuiltIn".</span><span class="sxs-lookup"><span data-stu-id="a90d0-p155">Gets or sets the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="a90d0-275">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-275">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'word!Word.Body#text:member'
    summary: |-
      <span data-ttu-id="a90d0-276">Obtém o texto do corpo.</span><span class="sxs-lookup"><span data-stu-id="a90d0-276">Gets the text of the body.</span></span> <span data-ttu-id="a90d0-277">Usa o método insertText para inserir texto.</span><span class="sxs-lookup"><span data-stu-id="a90d0-277">Use the insertText method to insert text.</span></span> <span data-ttu-id="a90d0-278">Somente leitura.</span><span class="sxs-lookup"><span data-stu-id="a90d0-278">Read-only.</span></span>

      <span data-ttu-id="a90d0-279">\[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a90d0-279">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a90d0-280">Exemplos</span><span class="sxs-lookup"><span data-stu-id="a90d0-280">Examples</span></span>

          ```javascript
          // Get the text property on the body object
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load the text in document body.
              context.load(body, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body contents: " + body.text);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#toJSON:member(1)'
    summary: '<span data-ttu-id="a90d0-281">Substitui o método `toJSON()` JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="a90d0-281">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="a90d0-282">.</span><span class="sxs-lookup"><span data-stu-id="a90d0-282"></span></span> <span data-ttu-id="a90d0-283">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="a90d0-283"></span></span><!-- --><span data-ttu-id="a90d0-284">, por sua vez, chama `toJSON` o método do objeto que é passado para ele.) Enquanto o objeto Word. Body original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Word.Interfaces.BodyData`</span><span class="sxs-lookup"><span data-stu-id="a90d0-284">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Body object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BodyData`</span></span><!-- --><span data-ttu-id="a90d0-285">) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.</span><span class="sxs-lookup"><span data-stu-id="a90d0-285">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.BodyData;'
      return:
        type:
          - 'word!Word.Interfaces.BodyData:interface'
        description: ''
  - uid: 'word!Word.Body#track:member(1)'
    summary: '<span data-ttu-id="a90d0-286">Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento.</span><span class="sxs-lookup"><span data-stu-id="a90d0-286">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="a90d0-287">Essa chamada é uma abreviação de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="a90d0-287">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="a90d0-288">Se você estiver usando esse objeto em chamadas ".sync" e fora da execução sequencial de um lote ".run" e receber um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, era necessário ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.</span><span class="sxs-lookup"><span data-stu-id="a90d0-288">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
  - uid: 'word!Word.Body#untrack:member(1)'
    summary: '<span data-ttu-id="a90d0-289">Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="a90d0-289">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="a90d0-290">Essa chamada é uma abreviação de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="a90d0-290">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="a90d0-291">Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los.</span><span class="sxs-lookup"><span data-stu-id="a90d0-291">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="a90d0-292">Você precisa chamar "context.sync()" antes da liberação da memória entrar em vigor.</span><span class="sxs-lookup"><span data-stu-id="a90d0-292">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Font:class'
    name: Word.Font
  - uid: 'word!Word.Body#getHtml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Body#getOoxml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.InlinePictureCollection:class'
    name: Word.InlinePictureCollection
  - uid: 'word!Word.BreakType:enum'
    name: Word.BreakType
  - uid: 'word!Word.InsertLocation:enum'
    name: Word.InsertLocation
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.Body:class'
    name: Word.Body
  - uid: 'word!Word.Interfaces.BodyLoadOptions:interface'
    name: Word.Interfaces.BodyLoadOptions
  - uid: 'word!Word.ParagraphCollection:class'
    name: Word.ParagraphCollection
  - uid: 'word!Word.RangeCollection:class'
    name: Word.RangeCollection
  - uid: 'word!Word.Body#search~0:complex'
    name: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    fullName: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    spec.typeScript:
      - uid: 'word!Word.SearchOptions:class'
        name: Word.SearchOptions
        fullName: Word.SearchOptions
      - name: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
        fullName: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
  - uid: 'word!Word.SelectionMode:enum'
    name: Word.SelectionMode
  - uid: 'word!Word.Interfaces.BodyUpdateData:interface'
    name: Interfaces.BodyUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.BodyData:interface'
    name: Word.Interfaces.BodyData