### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Document:class'
    summary: |-
      O objeto Document é o objeto de nível superior. Um objeto Document contém uma ou mais seções, controles de conteúdo e o corpo que inclui o conteúdo do documento.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.Document
    fullName: Word.Document
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Document#body:member'
      - 'word!Word.Document#contentControls:member'
      - 'word!Word.Document#context:member'
      - 'word!Word.Document#getSelection:member(1)'
      - 'word!Word.Document#load:member(1)'
      - 'word!Word.Document#load:member(2)'
      - 'word!Word.Document#load:member(3)'
      - 'word!Word.Document#properties:member'
      - 'word!Word.Document#save:member(1)'
      - 'word!Word.Document#saved:member'
      - 'word!Word.Document#sections:member'
      - 'word!Word.Document#set:member(1)'
      - 'word!Word.Document#set:member(2)'
      - 'word!Word.Document#toJSON:member(1)'
      - 'word!Word.Document#track:member(1)'
      - 'word!Word.Document#untrack:member(1)'
  - uid: 'word!Word.Document#body:member'
    summary: |-
      Obtém o objeto Body do documento. O corpo é o texto que exclui cabeçalhos, rodapés, notas de rodapé, caixas de texto, etc. Somente leitura.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly body: Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
  - uid: 'word!Word.Document#contentControls:member'
    summary: |-
      Obtém a coleção de objetos de controle de conteúdo no documento. Isso inclui controles de conteúdo no corpo do documento, cabeçalhos, rodapés, caixas de texto, etc. Somente leitura.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Document#context:member'
    summary: O contexto de solicitação associado ao objeto. Isso conecta o processo do suplemento ao processo do aplicativo host do Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Document#getSelection:member(1)'
    summary: |-
      Obtém a seleção atual do documento. Não há suporte para várias seleções.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getSelection()
    fullName: getSelection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelection(): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              var textSample = 'This is an example of the insert text method. This is a method ' + 
                  'which allows users to insert text into a selection. It can insert text into a ' +
                  'relative location or it can overwrite the current selection. Since the ' +
                  'getSelection method returns a range object, look up the range object documentation ' +
                  'for everything you can do with a selection.';
              
              // Create a range proxy object for the current selection.
              var range = context.document.getSelection();
              
              // Queue a command to insert text at the end of the selection.
              range.insertText(textSample, Word.InsertLocation.end);
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted the text at the end of the selection.');
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Document#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Word.Interfaces.DocumentLoadOptions): Word.Document;'
      return:
        type:
          - 'word!Word.Document:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the document.
              var thisDocument = context.document;
              
              // Queue a command to load content control properties.
              context.load(thisDocument, 'contentControls/id, contentControls/text, contentControls/tag');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (thisDocument.contentControls.items.length !== 0) {
                      for (var i = 0; i < thisDocument.contentControls.items.length; i++) {
                          console.log(thisDocument.contentControls.items[i].id);
                          console.log(thisDocument.contentControls.items[i].text);
                          console.log(thisDocument.contentControls.items[i].tag);
                      }
                  } else {
                      console.log('No content controls in this document.');
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: options
          description: Fornece opções para as propriedades do objeto a ser carregado.
          type:
            - 'word!Word.Interfaces.DocumentLoadOptions:interface'
  - uid: 'word!Word.Document#load:member(2)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Document;'
      return:
        type:
          - 'word!Word.Document:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'word!Word.Document#load:member(3)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Document;
      return:
        type:
          - 'word!Word.Document:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades a serem carregadas e `propertyNamesAndPaths.expand` é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação a serem carregadas.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'word!Word.Document#properties:member'
    summary: |-
      Obtém as propriedades do documento. Somente leitura.

      \[[Conjunto de APIs: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: properties
    fullName: properties
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly properties: Word.DocumentProperties;'
      return:
        type:
          - 'word!Word.DocumentProperties:class'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/30-properties/get-built-in-properties.yaml
          await Word.run(async (context) => {
              let builtInProperties = context.document.properties;
              builtInProperties.load("*"); // Let's get all!

              await context.sync();
              console.log(JSON.stringify(builtInProperties, null, 4));
          });
          ```
  - uid: 'word!Word.Document#save:member(1)'
    summary: |-
      Salva o documento. Isso usará a Convenção de nomenclatura de arquivo padrão do Word se o documento não tiver sido salvo antes.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: save()
    fullName: save()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'save(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the document.
              var thisDocument = context.document;

              // Queue a command to load the document save state (on the saved property).
              context.load(thisDocument, 'saved');    
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (thisDocument.saved === false) {
                      // Queue a command to save this document.
                      thisDocument.save();
                      
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Saved the document');
                      });
                  } else {
                      console.log('The document has not changed since the last save.');
                  }
              });  
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Document#saved:member'
    summary: |-
      Indica se as alterações do documento foram salvas. Um valor true indica que o documento não foi alterado desde que foi salvo. Somente leitura.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: saved
    fullName: saved
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly saved: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.Document#sections:member'
    summary: |-
      Obtém a coleção de objetos section no documento. Somente leitura.

      \[[Conjunto de APIs: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: sections
    fullName: sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: Word.SectionCollection;'
      return:
        type:
          - 'word!Word.SectionCollection:class'
  - uid: 'word!Word.Document#set:member(1)'
    summary: Define várias propriedades de um objeto ao mesmo tempo. Você pode passar um objeto simples com as propriedades apropriadas ou outro objeto API do mesmo tipo.
    remarks: |-
      Este método tem a seguinte assinatura adicional:

      `set(properties: Word.Document): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DocumentUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Um objeto JavaScript com propriedades que são estruturadas isomorphically para as propriedades do objeto no qual o método é chamado.
          type:
            - 'word!Word.Interfaces.DocumentUpdateData:interface'
        - id: options
          description: Fornece uma opção para suprimir erros se o objeto Properties tentar definir qualquer propriedade somente leitura.
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Document#set:member(2)'
    summary: 'Define várias propriedades no objeto ao mesmo tempo, com base em um objeto carregado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Document): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Document:class'
  - uid: 'word!Word.Document#toJSON:member(1)'
    summary: 'Substitui o `toJSON()` método JavaScript para fornecer uma saída mais útil quando um objeto API é passado para`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, por sua vez, chama o `toJSON` método do objeto que é passado para ele.) Enquanto o objeto Word.Document original é um objeto API, o `toJSON` método retorna um objeto JavaScript simples (digitado como`Word.Interfaces.DocumentData`<!-- -->) que contém cópias superficiais de qualquer propriedade filho carregada do objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.DocumentData;'
      return:
        type:
          - 'word!Word.Interfaces.DocumentData:interface'
        description: ''
  - uid: 'word!Word.Document#track:member(1)'
    summary: 'Acompanha o objeto para ajuste automático com base nas alterações adjacentes no documento. Essa chamada é uma abreviação para`context.trackedObjects.add(thisObject)`<!-- -->. Se você estiver usando esse objeto nas `.sync` chamadas e fora da execução seqüencial de um lote ". Run" e obter um erro "InvalidObjectPath" ao definir uma propriedade ou invocar um método no objeto, você precisa ter adicionado o objeto à coleção de objetos rastreados quando o objeto foi criado pela primeira vez.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Document;'
      return:
        type:
          - 'word!Word.Document:class'
        description: ''
  - uid: 'word!Word.Document#untrack:member(1)'
    summary: 'Libere a memória associada a este objeto, se ele já tiver sido rastreado anteriormente. Essa chamada é abreviada para`context.trackedObjects.remove(thisObject)`<!-- -->. Ter muitos objetos rastreados desacelera o aplicativo host, por isso, lembre-se de liberar todos os objetos adicionados após usá-los. Você precisará chamar `context.sync()` antes que o lançamento da memória entre em vigor.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Document;'
      return:
        type:
          - 'word!Word.Document:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.Body:class'
    name: Word.Body
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.Document:class'
    name: Word.Document
  - uid: 'word!Word.Interfaces.DocumentLoadOptions:interface'
    name: Word.Interfaces.DocumentLoadOptions
  - uid: 'word!Word.DocumentProperties:class'
    name: Word.DocumentProperties
  - uid: 'word!Word.SectionCollection:class'
    name: Word.SectionCollection
  - uid: 'word!Word.Interfaces.DocumentUpdateData:interface'
    name: Interfaces.DocumentUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.DocumentData:interface'
    name: Word.Interfaces.DocumentData