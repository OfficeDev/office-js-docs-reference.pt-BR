### YamlMime:UniversalReference
items:
  - uid: office-runtime.OfficeRuntime.AsyncStorage
    summary: 'Armazenamento de valor chave assíncrono, global e persistente. O limite de armazenamento é de 10 MB por domínio, que pode ser compartilhado por vários suplementos.'
    remarks: 'Será preterido no futuro; em vez disso, use o Office. Storage.'
    name: OfficeRuntime.AsyncStorage
    fullName: OfficeRuntime.AsyncStorage
    langs:
      - typeScript
    type: interface
    package: office-runtime
    children:
      - office-runtime.OfficeRuntime.AsyncStorage.getAllKeys
      - office-runtime.OfficeRuntime.AsyncStorage.getItem
      - office-runtime.OfficeRuntime.AsyncStorage.multiGet
      - office-runtime.OfficeRuntime.AsyncStorage.multiRemove
      - office-runtime.OfficeRuntime.AsyncStorage.multiSet
      - office-runtime.OfficeRuntime.AsyncStorage.removeItem
      - office-runtime.OfficeRuntime.AsyncStorage.setItem
  - uid: office-runtime.OfficeRuntime.AsyncStorage.getAllKeys
    summary: Recupera todas as chaves e invoca um retorno de chamada quando terminar. Retorna uma promessa.
    name: getAllKeys(callback)
    fullName: getAllKeys(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAllKeys(callback?: (error?: Error, keys?: string[]) => void): Promise<string[]>;'
      return:
        type:
          - 'Promise<string[]>'
        description: ''
      parameters:
        - id: callback
          description: ''
          type:
            - '(error?: Error, keys?: string[]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.getItem
    summary: Recupera um item por chave e emite um retorno de chamada. Retorna uma promessa.
    name: 'getItem(key, callback)'
    fullName: 'getItem(key, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string, callback?: (error?: Error, result?: string) => void): Promise<string>;'
      return:
        type:
          - Promise<string>
        description: ''
      parameters:
        - id: key
          description: O nome da chave a ser recuperada. Deve ser uma cadeia de caracteres.
          type:
            - string
        - id: callback
          description: O resultado retornado é uma cadeia de caracteres.
          type:
            - '(error?: Error, result?: string) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.multiGet
    summary: Recupera vários itens do armazenamento e invoca um retorno de chamada quando terminar. Retorna uma promessa.
    name: 'multiGet(keys, callback)'
    fullName: 'multiGet(keys, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiGet(keys: string[], callback?: (errors?: Error[], result?: string[][]) => void): Promise<string[][]>;'
      return:
        type:
          - 'Promise<string[][]>'
        description: ''
      parameters:
        - id: keys
          description: Chaves dos itens a serem recuperados. Deve ser uma matriz de cadeias de caracteres.
          type:
            - 'string[]'
        - id: callback
          description: ''
          type:
            - '(errors?: Error[], result?: string[][]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.multiRemove
    summary: Remove vários itens do armazenamento e invoca um retorno de chamada quando terminar. Retorna uma promessa.
    name: 'multiRemove(keys, callback)'
    fullName: 'multiRemove(keys, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiRemove(keys: string[], callback?: (errors?: Error[]) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: keys
          description: Chaves dos itens a serem removidos. Deve ser uma matriz de cadeias de caracteres.
          type:
            - 'string[]'
        - id: callback
          description: ''
          type:
            - '(errors?: Error[]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.multiSet
    summary: Define vários pares chave-valor e invoca um retorno de chamada quando terminar. Retorna uma promessa.
    name: 'multiSet(keyValuePairs, callback)'
    fullName: 'multiSet(keyValuePairs, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiSet(keyValuePairs: string[][], callback?: (errors?: Error[]) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: keyValuePairs
          description: Deve ser matrizes de cadeias de caracteres.
          type:
            - 'string[][]'
        - id: callback
          description: ''
          type:
            - '(errors?: Error[]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.removeItem
    summary: Remove itens por chave e invoca um retorno de chamada quando terminar. Ele retorna uma promessa que é resolvida para um objeto que contém as chaves e os valores solicitados.
    name: 'removeItem(key, callback)'
    fullName: 'removeItem(key, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeItem(key: string, callback?: (error?: Error) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: key
          description: A chave do item a ser removido. Deve ser uma cadeia de caracteres.
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(error?: Error) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.setItem
    summary: Cria um novo par chave-valor no armazenamento ou atualiza uma chave existente com um novo valor. Retorna uma promessa.
    name: 'setItem(key, value, callback)'
    fullName: 'setItem(key, value, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setItem(key: string, value: string, callback?: (error?: Error) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: key
          description: O nome da chave para o par chave-valor. Deve ser uma cadeia de caracteres.
          type:
            - string
        - id: value
          description: O nome do valor. Deve ser uma cadeia de caracteres.
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(error?: Error) => void'